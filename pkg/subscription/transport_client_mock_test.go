// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/wundergraph/graphql-go-tools/pkg/subscription (interfaces: TransportClient)

// Package subscription is a generated GoMock package.
package subscription

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockTransportClient is a mock of TransportClient interface.
type MockTransportClient struct {
	ctrl     *gomock.Controller
	recorder *MockTransportClientMockRecorder
}

// MockTransportClientMockRecorder is the mock recorder for MockTransportClient.
type MockTransportClientMockRecorder struct {
	mock *MockTransportClient
}

// NewMockTransportClient creates a new mock instance.
func NewMockTransportClient(ctrl *gomock.Controller) *MockTransportClient {
	mock := &MockTransportClient{ctrl: ctrl}
	mock.recorder = &MockTransportClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockTransportClient) EXPECT() *MockTransportClientMockRecorder {
	return m.recorder
}

// Disconnect mocks base method.
func (m *MockTransportClient) Disconnect() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Disconnect")
	ret0, _ := ret[0].(error)
	return ret0
}

// Disconnect indicates an expected call of Disconnect.
func (mr *MockTransportClientMockRecorder) Disconnect() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Disconnect", reflect.TypeOf((*MockTransportClient)(nil).Disconnect))
}

// DisconnectWithReason mocks base method.
func (m *MockTransportClient) DisconnectWithReason(arg0 interface{}) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DisconnectWithReason", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// DisconnectWithReason indicates an expected call of DisconnectWithReason.
func (mr *MockTransportClientMockRecorder) DisconnectWithReason(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DisconnectWithReason", reflect.TypeOf((*MockTransportClient)(nil).DisconnectWithReason), arg0)
}

// IsConnected mocks base method.
func (m *MockTransportClient) IsConnected() bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsConnected")
	ret0, _ := ret[0].(bool)
	return ret0
}

// IsConnected indicates an expected call of IsConnected.
func (mr *MockTransportClientMockRecorder) IsConnected() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsConnected", reflect.TypeOf((*MockTransportClient)(nil).IsConnected))
}

// ReadBytesFromClient mocks base method.
func (m *MockTransportClient) ReadBytesFromClient() ([]byte, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReadBytesFromClient")
	ret0, _ := ret[0].([]byte)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ReadBytesFromClient indicates an expected call of ReadBytesFromClient.
func (mr *MockTransportClientMockRecorder) ReadBytesFromClient() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReadBytesFromClient", reflect.TypeOf((*MockTransportClient)(nil).ReadBytesFromClient))
}

// WriteBytesToClient mocks base method.
func (m *MockTransportClient) WriteBytesToClient(arg0 []byte) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WriteBytesToClient", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// WriteBytesToClient indicates an expected call of WriteBytesToClient.
func (mr *MockTransportClientMockRecorder) WriteBytesToClient(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WriteBytesToClient", reflect.TypeOf((*MockTransportClient)(nil).WriteBytesToClient), arg0)
}
