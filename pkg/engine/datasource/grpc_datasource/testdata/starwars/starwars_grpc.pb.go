// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.19.4
// source: starwars.proto

package starwars

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// StarwarsServiceClient is the client API for StarwarsService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type StarwarsServiceClient interface {
	GetHero(ctx context.Context, in *GetHeroRequest, opts ...grpc.CallOption) (*Character, error)
	GetHuman(ctx context.Context, in *GetHumanRequest, opts ...grpc.CallOption) (*Character, error)
	GetDroid(ctx context.Context, in *GetDroidRequest, opts ...grpc.CallOption) (*Character, error)
	ListHumans(ctx context.Context, in *ListEmptyRequest, opts ...grpc.CallOption) (*ListHumansResponse, error)
	ListDroids(ctx context.Context, in *ListEmptyRequest, opts ...grpc.CallOption) (*ListDroidsResponse, error)
}

type starwarsServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewStarwarsServiceClient(cc grpc.ClientConnInterface) StarwarsServiceClient {
	return &starwarsServiceClient{cc}
}

func (c *starwarsServiceClient) GetHero(ctx context.Context, in *GetHeroRequest, opts ...grpc.CallOption) (*Character, error) {
	out := new(Character)
	err := c.cc.Invoke(ctx, "/starwars.StarwarsService/GetHero", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *starwarsServiceClient) GetHuman(ctx context.Context, in *GetHumanRequest, opts ...grpc.CallOption) (*Character, error) {
	out := new(Character)
	err := c.cc.Invoke(ctx, "/starwars.StarwarsService/GetHuman", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *starwarsServiceClient) GetDroid(ctx context.Context, in *GetDroidRequest, opts ...grpc.CallOption) (*Character, error) {
	out := new(Character)
	err := c.cc.Invoke(ctx, "/starwars.StarwarsService/GetDroid", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *starwarsServiceClient) ListHumans(ctx context.Context, in *ListEmptyRequest, opts ...grpc.CallOption) (*ListHumansResponse, error) {
	out := new(ListHumansResponse)
	err := c.cc.Invoke(ctx, "/starwars.StarwarsService/ListHumans", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *starwarsServiceClient) ListDroids(ctx context.Context, in *ListEmptyRequest, opts ...grpc.CallOption) (*ListDroidsResponse, error) {
	out := new(ListDroidsResponse)
	err := c.cc.Invoke(ctx, "/starwars.StarwarsService/ListDroids", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// StarwarsServiceServer is the server API for StarwarsService service.
// All implementations must embed UnimplementedStarwarsServiceServer
// for forward compatibility
type StarwarsServiceServer interface {
	GetHero(context.Context, *GetHeroRequest) (*Character, error)
	GetHuman(context.Context, *GetHumanRequest) (*Character, error)
	GetDroid(context.Context, *GetDroidRequest) (*Character, error)
	ListHumans(context.Context, *ListEmptyRequest) (*ListHumansResponse, error)
	ListDroids(context.Context, *ListEmptyRequest) (*ListDroidsResponse, error)
	mustEmbedUnimplementedStarwarsServiceServer()
}

// UnimplementedStarwarsServiceServer must be embedded to have forward compatible implementations.
type UnimplementedStarwarsServiceServer struct {
}

func (UnimplementedStarwarsServiceServer) GetHero(context.Context, *GetHeroRequest) (*Character, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetHero not implemented")
}
func (UnimplementedStarwarsServiceServer) GetHuman(context.Context, *GetHumanRequest) (*Character, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetHuman not implemented")
}
func (UnimplementedStarwarsServiceServer) GetDroid(context.Context, *GetDroidRequest) (*Character, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetDroid not implemented")
}
func (UnimplementedStarwarsServiceServer) ListHumans(context.Context, *ListEmptyRequest) (*ListHumansResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListHumans not implemented")
}
func (UnimplementedStarwarsServiceServer) ListDroids(context.Context, *ListEmptyRequest) (*ListDroidsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListDroids not implemented")
}
func (UnimplementedStarwarsServiceServer) mustEmbedUnimplementedStarwarsServiceServer() {}

// UnsafeStarwarsServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to StarwarsServiceServer will
// result in compilation errors.
type UnsafeStarwarsServiceServer interface {
	mustEmbedUnimplementedStarwarsServiceServer()
}

func RegisterStarwarsServiceServer(s grpc.ServiceRegistrar, srv StarwarsServiceServer) {
	s.RegisterService(&StarwarsService_ServiceDesc, srv)
}

func _StarwarsService_GetHero_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetHeroRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StarwarsServiceServer).GetHero(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/starwars.StarwarsService/GetHero",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StarwarsServiceServer).GetHero(ctx, req.(*GetHeroRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _StarwarsService_GetHuman_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetHumanRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StarwarsServiceServer).GetHuman(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/starwars.StarwarsService/GetHuman",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StarwarsServiceServer).GetHuman(ctx, req.(*GetHumanRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _StarwarsService_GetDroid_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetDroidRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StarwarsServiceServer).GetDroid(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/starwars.StarwarsService/GetDroid",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StarwarsServiceServer).GetDroid(ctx, req.(*GetDroidRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _StarwarsService_ListHumans_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListEmptyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StarwarsServiceServer).ListHumans(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/starwars.StarwarsService/ListHumans",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StarwarsServiceServer).ListHumans(ctx, req.(*ListEmptyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _StarwarsService_ListDroids_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListEmptyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StarwarsServiceServer).ListDroids(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/starwars.StarwarsService/ListDroids",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StarwarsServiceServer).ListDroids(ctx, req.(*ListEmptyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// StarwarsService_ServiceDesc is the grpc.ServiceDesc for StarwarsService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var StarwarsService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "starwars.StarwarsService",
	HandlerType: (*StarwarsServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetHero",
			Handler:    _StarwarsService_GetHero_Handler,
		},
		{
			MethodName: "GetHuman",
			Handler:    _StarwarsService_GetHuman_Handler,
		},
		{
			MethodName: "GetDroid",
			Handler:    _StarwarsService_GetDroid_Handler,
		},
		{
			MethodName: "ListHumans",
			Handler:    _StarwarsService_ListHumans_Handler,
		},
		{
			MethodName: "ListDroids",
			Handler:    _StarwarsService_ListDroids_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "starwars.proto",
}
