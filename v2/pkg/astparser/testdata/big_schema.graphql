type AggregateAlphazap {
  count: Int!
}

type AggregateAsset {
  count: Int!
}

type AggregateBamity {
  count: Int!
}

type AggregateBigtax {
  count: Int!
}

type AggregateColor {
  count: Int!
}

type AggregateDaltfresh {
  count: Int!
}

type AggregateHatity {
  count: Int!
}

type AggregateJob {
  count: Int!
}

type AggregateKeylex {
  count: Int!
}

type AggregateKonklab {
  count: Int!
}

type AggregateKonklux {
  count: Int!
}

type AggregateLatlux {
  count: Int!
}

type AggregateLocation {
  count: Int!
}

type AggregateLotlux {
  count: Int!
}

type AggregateLotstring {
  count: Int!
}

type AggregateOtcom {
  count: Int!
}

type AggregateOverhold {
  count: Int!
}

type AggregateRedhold {
  count: Int!
}

type AggregateRonstring {
  count: Int!
}

type AggregateSonair {
  count: Int!
}

type AggregateSonsing {
  count: Int!
}

type AggregateStim {
  count: Int!
}

type AggregateStringtough {
  count: Int!
}

type AggregateStronghold {
  count: Int!
}

type AggregateSubin {
  count: Int!
}

type AggregateTemp {
  count: Int!
}

type AggregateToughjoyfax {
  count: Int!
}

type AggregateTranscof {
  count: Int!
}

type AggregateTreeflex {
  count: Int!
}

type AggregateTresom {
  count: Int!
}

type AggregateVentosanzap {
  count: Int!
}

type AggregateViva {
  count: Int!
}

type AggregateVoltsillam {
  count: Int!
}

type AggregateVoyatouch {
  count: Int!
}

type AggregateZamit {
  count: Int!
}

type AggregateZathin {
  count: Int!
}

type AggregateZoolab {
  count: Int!
}

type Alphazap implements Node {
  status: Status!
  updatedAt: DateTime!
  createdAt: DateTime!
  id: ID!
  indigo: [Daugherty!]!
  salmon: [Harris!]!
  turquoise: [Muller!]!
  azure(
    where: TresomWhereInput
    orderBy: TresomOrderByInput
    skip: Int
    after: String
    before: String
    first: Int
    last: Int
  ): [Tresom!]
}

# A connection to a list of items.
type AlphazapConnection {
  # Information to aid in pagination.
  pageInfo: PageInfo!
  # A list of edges.
  edges: [AlphazapEdge]!
  aggregate: AggregateAlphazap!
}

input AlphazapCreateindigoInput {
  set: [Daugherty!]
}

input AlphazapCreateInput {
  status: Status
  indigo: AlphazapCreateindigoInput
  salmon: AlphazapCreatesalmonInput
  turquoise: AlphazapCreateturquoiseInput
  azure: TresomCreateManyWithoutTealInput
}

input AlphazapCreateOneWithoutAzureInput {
  create: AlphazapCreateWithoutAzureInput
  connect: AlphazapWhereUniqueInput
}

input AlphazapCreatesalmonInput {
  set: [Harris!]
}

input AlphazapCreateturquoiseInput {
  set: [Muller!]
}

input AlphazapCreateWithoutAzureInput {
  status: Status
  indigo: AlphazapCreateindigoInput
  salmon: AlphazapCreatesalmonInput
  turquoise: AlphazapCreateturquoiseInput
}

# An edge in a connection.
type AlphazapEdge {
  # The item at the end of the edge.
  node: Alphazap!
  # A cursor for use in pagination.
  cursor: String!
}

enum AlphazapOrderByInput {
  status_ASC
  status_DESC
  updatedAt_ASC
  updatedAt_DESC
  createdAt_ASC
  createdAt_DESC
  id_ASC
  id_DESC
}

type AlphazapPreviousValues {
  status: Status!
  updatedAt: DateTime!
  createdAt: DateTime!
  id: ID!
  indigo: [Daugherty!]!
  salmon: [Harris!]!
  turquoise: [Muller!]!
}

type AlphazapSubscriptionPayload {
  mutation: MutationType!
  node: Alphazap
  updatedFields: [String!]
  previousValues: AlphazapPreviousValues
}

input AlphazapSubscriptionWhereInput {
  # Logical AND on all given filters.
  AND: [AlphazapSubscriptionWhereInput!]
  # Logical OR on all given filters.
  OR: [AlphazapSubscriptionWhereInput!]
  # Logical NOT on all given filters combined by AND.
  NOT: [AlphazapSubscriptionWhereInput!]
  # The subscription event gets dispatched when it's listed in mutation_in
  mutation_in: [MutationType!]
  # The subscription event gets only dispatched when one of the updated fields names is included in this list
  updatedFields_contains: String
  # The subscription event gets only dispatched when all of the field names included in this list have been updated
  updatedFields_contains_every: [String!]
  # The subscription event gets only dispatched when some of the field names included in this list have been updated
  updatedFields_contains_some: [String!]
  node: AlphazapWhereInput
}

input AlphazapUpdateindigoInput {
  set: [Daugherty!]
}

input AlphazapUpdateInput {
  status: Status
  indigo: AlphazapUpdateindigoInput
  salmon: AlphazapUpdatesalmonInput
  turquoise: AlphazapUpdateturquoiseInput
  azure: TresomUpdateManyWithoutTealInput
}

input AlphazapUpdateManyMutationInput {
  status: Status
  indigo: AlphazapUpdateindigoInput
  salmon: AlphazapUpdatesalmonInput
  turquoise: AlphazapUpdateturquoiseInput
}

input AlphazapUpdateOneWithoutAzureInput {
  create: AlphazapCreateWithoutAzureInput
  connect: AlphazapWhereUniqueInput
  disconnect: Boolean
  delete: Boolean
  update: AlphazapUpdateWithoutAzureDataInput
  upsert: AlphazapUpsertWithoutAzureInput
}

input AlphazapUpdatesalmonInput {
  set: [Harris!]
}

input AlphazapUpdateturquoiseInput {
  set: [Muller!]
}

input AlphazapUpdateWithoutAzureDataInput {
  status: Status
  indigo: AlphazapUpdateindigoInput
  salmon: AlphazapUpdatesalmonInput
  turquoise: AlphazapUpdateturquoiseInput
}

input AlphazapUpsertWithoutAzureInput {
  update: AlphazapUpdateWithoutAzureDataInput!
  create: AlphazapCreateWithoutAzureInput!
}

input AlphazapWhereInput {
  # Logical AND on all given filters.
  AND: [AlphazapWhereInput!]
  # Logical OR on all given filters.
  OR: [AlphazapWhereInput!]
  # Logical NOT on all given filters combined by AND.
  NOT: [AlphazapWhereInput!]
  status: Status
  # All values that are not equal to given value.
  status_not: Status
  # All values that are contained in given list.
  status_in: [Status!]
  # All values that are not contained in given list.
  status_not_in: [Status!]
  updatedAt: DateTime
  # All values that are not equal to given value.
  updatedAt_not: DateTime
  # All values that are contained in given list.
  updatedAt_in: [DateTime!]
  # All values that are not contained in given list.
  updatedAt_not_in: [DateTime!]
  # All values less than the given value.
  updatedAt_lt: DateTime
  # All values less than or equal the given value.
  updatedAt_lte: DateTime
  # All values greater than the given value.
  updatedAt_gt: DateTime
  # All values greater than or equal the given value.
  updatedAt_gte: DateTime
  createdAt: DateTime
  # All values that are not equal to given value.
  createdAt_not: DateTime
  # All values that are contained in given list.
  createdAt_in: [DateTime!]
  # All values that are not contained in given list.
  createdAt_not_in: [DateTime!]
  # All values less than the given value.
  createdAt_lt: DateTime
  # All values less than or equal the given value.
  createdAt_lte: DateTime
  # All values greater than the given value.
  createdAt_gt: DateTime
  # All values greater than or equal the given value.
  createdAt_gte: DateTime
  id: ID
  # All values that are not equal to given value.
  id_not: ID
  # All values that are contained in given list.
  id_in: [ID!]
  # All values that are not contained in given list.
  id_not_in: [ID!]
  # All values less than the given value.
  id_lt: ID
  # All values less than or equal the given value.
  id_lte: ID
  # All values greater than the given value.
  id_gt: ID
  # All values greater than or equal the given value.
  id_gte: ID
  # All values containing the given string.
  id_contains: ID
  # All values not containing the given string.
  id_not_contains: ID
  # All values starting with the given string.
  id_starts_with: ID
  # All values not starting with the given string.
  id_not_starts_with: ID
  # All values ending with the given string.
  id_ends_with: ID
  # All values not ending with the given string.
  id_not_ends_with: ID
  azure_every: TresomWhereInput
  azure_some: TresomWhereInput
  azure_none: TresomWhereInput
}

input AlphazapWhereUniqueInput {
  id: ID
}

type Asset implements Node {
  status: Status!
  updatedAt: DateTime!
  createdAt: DateTime!
  id: ID!
  handle: String!
  fileName: String!
  height: Float
  width: Float
  size: Float
  mimeType: String
  oliveTemp(
    where: TempWhereInput
    orderBy: TempOrderByInput
    skip: Int
    after: String
    before: String
    first: Int
    last: Int
  ): [Temp!]
  goldLotstring(
    where: LotstringWhereInput
    orderBy: LotstringOrderByInput
    skip: Int
    after: String
    before: String
    first: Int
    last: Int
  ): [Lotstring!]
  maroonDaltfresh(
    where: DaltfreshWhereInput
    orderBy: DaltfreshOrderByInput
    skip: Int
    after: String
    before: String
    first: Int
    last: Int
  ): [Daltfresh!]
  greenStronghold(
    where: StrongholdWhereInput
    orderBy: StrongholdOrderByInput
    skip: Int
    after: String
    before: String
    first: Int
    last: Int
  ): [Stronghold!]
  tealStronghold(
    where: StrongholdWhereInput
    orderBy: StrongholdOrderByInput
    skip: Int
    after: String
    before: String
    first: Int
    last: Int
  ): [Stronghold!]
  silverStronghold(
    where: StrongholdWhereInput
    orderBy: StrongholdOrderByInput
    skip: Int
    after: String
    before: String
    first: Int
    last: Int
  ): [Stronghold!]
  lavenderStronghold(
    where: StrongholdWhereInput
    orderBy: StrongholdOrderByInput
    skip: Int
    after: String
    before: String
    first: Int
    last: Int
  ): [Stronghold!]
  goldOtcom(
    where: OtcomWhereInput
    orderBy: OtcomOrderByInput
    skip: Int
    after: String
    before: String
    first: Int
    last: Int
  ): [Otcom!]
  greyZamit(
    where: ZamitWhereInput
    orderBy: ZamitOrderByInput
    skip: Int
    after: String
    before: String
    first: Int
    last: Int
  ): [Zamit!]
  # Get the url for the asset with provided transformations applied.
  url(transformation: AssetTransformationInput): String!
}

# A connection to a list of items.
type AssetConnection {
  # Information to aid in pagination.
  pageInfo: PageInfo!
  # A list of edges.
  edges: [AssetEdge]!
  aggregate: AggregateAsset!
}

input AssetCreateInput {
  status: Status
  handle: String!
  fileName: String!
  height: Float
  width: Float
  size: Float
  mimeType: String
  oliveTemp: TempCreateManyWithoutOliveInput
  goldLotstring: LotstringCreateManyWithoutGoldInput
  maroonDaltfresh: DaltfreshCreateManyWithoutMaroonInput
  greenStronghold: StrongholdCreateManyWithoutGreenInput
  tealStronghold: StrongholdCreateManyWithoutTealInput
  silverStronghold: StrongholdCreateManyWithoutSilverInput
  lavenderStronghold: StrongholdCreateManyWithoutLavenderInput
  goldOtcom: OtcomCreateManyWithoutGoldInput
  greyZamit: ZamitCreateManyWithoutGreyInput
}

input AssetCreateManyWithoutGoldLotstringInput {
  create: [AssetCreateWithoutGoldLotstringInput!]
  connect: [AssetWhereUniqueInput!]
}

input AssetCreateOneWithoutGoldOtcomInput {
  create: AssetCreateWithoutGoldOtcomInput
  connect: AssetWhereUniqueInput
}

input AssetCreateOneWithoutGreenStrongholdInput {
  create: AssetCreateWithoutGreenStrongholdInput
  connect: AssetWhereUniqueInput
}

input AssetCreateOneWithoutGreyZamitInput {
  create: AssetCreateWithoutGreyZamitInput
  connect: AssetWhereUniqueInput
}

input AssetCreateOneWithoutLavenderStrongholdInput {
  create: AssetCreateWithoutLavenderStrongholdInput
  connect: AssetWhereUniqueInput
}

input AssetCreateOneWithoutMaroonDaltfreshInput {
  create: AssetCreateWithoutMaroonDaltfreshInput
  connect: AssetWhereUniqueInput
}

input AssetCreateOneWithoutOliveTempInput {
  create: AssetCreateWithoutOliveTempInput
  connect: AssetWhereUniqueInput
}

input AssetCreateOneWithoutSilverStrongholdInput {
  create: AssetCreateWithoutSilverStrongholdInput
  connect: AssetWhereUniqueInput
}

input AssetCreateOneWithoutTealStrongholdInput {
  create: AssetCreateWithoutTealStrongholdInput
  connect: AssetWhereUniqueInput
}

input AssetCreateWithoutGoldLotstringInput {
  status: Status
  handle: String!
  fileName: String!
  height: Float
  width: Float
  size: Float
  mimeType: String
  oliveTemp: TempCreateManyWithoutOliveInput
  maroonDaltfresh: DaltfreshCreateManyWithoutMaroonInput
  greenStronghold: StrongholdCreateManyWithoutGreenInput
  tealStronghold: StrongholdCreateManyWithoutTealInput
  silverStronghold: StrongholdCreateManyWithoutSilverInput
  lavenderStronghold: StrongholdCreateManyWithoutLavenderInput
  goldOtcom: OtcomCreateManyWithoutGoldInput
  greyZamit: ZamitCreateManyWithoutGreyInput
}

input AssetCreateWithoutGoldOtcomInput {
  status: Status
  handle: String!
  fileName: String!
  height: Float
  width: Float
  size: Float
  mimeType: String
  oliveTemp: TempCreateManyWithoutOliveInput
  goldLotstring: LotstringCreateManyWithoutGoldInput
  maroonDaltfresh: DaltfreshCreateManyWithoutMaroonInput
  greenStronghold: StrongholdCreateManyWithoutGreenInput
  tealStronghold: StrongholdCreateManyWithoutTealInput
  silverStronghold: StrongholdCreateManyWithoutSilverInput
  lavenderStronghold: StrongholdCreateManyWithoutLavenderInput
  greyZamit: ZamitCreateManyWithoutGreyInput
}

input AssetCreateWithoutGreenStrongholdInput {
  status: Status
  handle: String!
  fileName: String!
  height: Float
  width: Float
  size: Float
  mimeType: String
  oliveTemp: TempCreateManyWithoutOliveInput
  goldLotstring: LotstringCreateManyWithoutGoldInput
  maroonDaltfresh: DaltfreshCreateManyWithoutMaroonInput
  tealStronghold: StrongholdCreateManyWithoutTealInput
  silverStronghold: StrongholdCreateManyWithoutSilverInput
  lavenderStronghold: StrongholdCreateManyWithoutLavenderInput
  goldOtcom: OtcomCreateManyWithoutGoldInput
  greyZamit: ZamitCreateManyWithoutGreyInput
}

input AssetCreateWithoutGreyZamitInput {
  status: Status
  handle: String!
  fileName: String!
  height: Float
  width: Float
  size: Float
  mimeType: String
  oliveTemp: TempCreateManyWithoutOliveInput
  goldLotstring: LotstringCreateManyWithoutGoldInput
  maroonDaltfresh: DaltfreshCreateManyWithoutMaroonInput
  greenStronghold: StrongholdCreateManyWithoutGreenInput
  tealStronghold: StrongholdCreateManyWithoutTealInput
  silverStronghold: StrongholdCreateManyWithoutSilverInput
  lavenderStronghold: StrongholdCreateManyWithoutLavenderInput
  goldOtcom: OtcomCreateManyWithoutGoldInput
}

input AssetCreateWithoutLavenderStrongholdInput {
  status: Status
  handle: String!
  fileName: String!
  height: Float
  width: Float
  size: Float
  mimeType: String
  oliveTemp: TempCreateManyWithoutOliveInput
  goldLotstring: LotstringCreateManyWithoutGoldInput
  maroonDaltfresh: DaltfreshCreateManyWithoutMaroonInput
  greenStronghold: StrongholdCreateManyWithoutGreenInput
  tealStronghold: StrongholdCreateManyWithoutTealInput
  silverStronghold: StrongholdCreateManyWithoutSilverInput
  goldOtcom: OtcomCreateManyWithoutGoldInput
  greyZamit: ZamitCreateManyWithoutGreyInput
}

input AssetCreateWithoutMaroonDaltfreshInput {
  status: Status
  handle: String!
  fileName: String!
  height: Float
  width: Float
  size: Float
  mimeType: String
  oliveTemp: TempCreateManyWithoutOliveInput
  goldLotstring: LotstringCreateManyWithoutGoldInput
  greenStronghold: StrongholdCreateManyWithoutGreenInput
  tealStronghold: StrongholdCreateManyWithoutTealInput
  silverStronghold: StrongholdCreateManyWithoutSilverInput
  lavenderStronghold: StrongholdCreateManyWithoutLavenderInput
  goldOtcom: OtcomCreateManyWithoutGoldInput
  greyZamit: ZamitCreateManyWithoutGreyInput
}

input AssetCreateWithoutOliveTempInput {
  status: Status
  handle: String!
  fileName: String!
  height: Float
  width: Float
  size: Float
  mimeType: String
  goldLotstring: LotstringCreateManyWithoutGoldInput
  maroonDaltfresh: DaltfreshCreateManyWithoutMaroonInput
  greenStronghold: StrongholdCreateManyWithoutGreenInput
  tealStronghold: StrongholdCreateManyWithoutTealInput
  silverStronghold: StrongholdCreateManyWithoutSilverInput
  lavenderStronghold: StrongholdCreateManyWithoutLavenderInput
  goldOtcom: OtcomCreateManyWithoutGoldInput
  greyZamit: ZamitCreateManyWithoutGreyInput
}

input AssetCreateWithoutSilverStrongholdInput {
  status: Status
  handle: String!
  fileName: String!
  height: Float
  width: Float
  size: Float
  mimeType: String
  oliveTemp: TempCreateManyWithoutOliveInput
  goldLotstring: LotstringCreateManyWithoutGoldInput
  maroonDaltfresh: DaltfreshCreateManyWithoutMaroonInput
  greenStronghold: StrongholdCreateManyWithoutGreenInput
  tealStronghold: StrongholdCreateManyWithoutTealInput
  lavenderStronghold: StrongholdCreateManyWithoutLavenderInput
  goldOtcom: OtcomCreateManyWithoutGoldInput
  greyZamit: ZamitCreateManyWithoutGreyInput
}

input AssetCreateWithoutTealStrongholdInput {
  status: Status
  handle: String!
  fileName: String!
  height: Float
  width: Float
  size: Float
  mimeType: String
  oliveTemp: TempCreateManyWithoutOliveInput
  goldLotstring: LotstringCreateManyWithoutGoldInput
  maroonDaltfresh: DaltfreshCreateManyWithoutMaroonInput
  greenStronghold: StrongholdCreateManyWithoutGreenInput
  silverStronghold: StrongholdCreateManyWithoutSilverInput
  lavenderStronghold: StrongholdCreateManyWithoutLavenderInput
  goldOtcom: OtcomCreateManyWithoutGoldInput
  greyZamit: ZamitCreateManyWithoutGreyInput
}

# An edge in a connection.
type AssetEdge {
  # The item at the end of the edge.
  node: Asset!
  # A cursor for use in pagination.
  cursor: String!
}

enum AssetOrderByInput {
  status_ASC
  status_DESC
  updatedAt_ASC
  updatedAt_DESC
  createdAt_ASC
  createdAt_DESC
  id_ASC
  id_DESC
  handle_ASC
  handle_DESC
  fileName_ASC
  fileName_DESC
  height_ASC
  height_DESC
  width_ASC
  width_DESC
  size_ASC
  size_DESC
  mimeType_ASC
  mimeType_DESC
}

type AssetPreviousValues {
  status: Status!
  updatedAt: DateTime!
  createdAt: DateTime!
  id: ID!
  handle: String!
  fileName: String!
  height: Float
  width: Float
  size: Float
  mimeType: String
}

input AssetScalarWhereInput {
  # Logical AND on all given filters.
  AND: [AssetScalarWhereInput!]
  # Logical OR on all given filters.
  OR: [AssetScalarWhereInput!]
  # Logical NOT on all given filters combined by AND.
  NOT: [AssetScalarWhereInput!]
  status: Status
  # All values that are not equal to given value.
  status_not: Status
  # All values that are contained in given list.
  status_in: [Status!]
  # All values that are not contained in given list.
  status_not_in: [Status!]
  updatedAt: DateTime
  # All values that are not equal to given value.
  updatedAt_not: DateTime
  # All values that are contained in given list.
  updatedAt_in: [DateTime!]
  # All values that are not contained in given list.
  updatedAt_not_in: [DateTime!]
  # All values less than the given value.
  updatedAt_lt: DateTime
  # All values less than or equal the given value.
  updatedAt_lte: DateTime
  # All values greater than the given value.
  updatedAt_gt: DateTime
  # All values greater than or equal the given value.
  updatedAt_gte: DateTime
  createdAt: DateTime
  # All values that are not equal to given value.
  createdAt_not: DateTime
  # All values that are contained in given list.
  createdAt_in: [DateTime!]
  # All values that are not contained in given list.
  createdAt_not_in: [DateTime!]
  # All values less than the given value.
  createdAt_lt: DateTime
  # All values less than or equal the given value.
  createdAt_lte: DateTime
  # All values greater than the given value.
  createdAt_gt: DateTime
  # All values greater than or equal the given value.
  createdAt_gte: DateTime
  id: ID
  # All values that are not equal to given value.
  id_not: ID
  # All values that are contained in given list.
  id_in: [ID!]
  # All values that are not contained in given list.
  id_not_in: [ID!]
  # All values less than the given value.
  id_lt: ID
  # All values less than or equal the given value.
  id_lte: ID
  # All values greater than the given value.
  id_gt: ID
  # All values greater than or equal the given value.
  id_gte: ID
  # All values containing the given string.
  id_contains: ID
  # All values not containing the given string.
  id_not_contains: ID
  # All values starting with the given string.
  id_starts_with: ID
  # All values not starting with the given string.
  id_not_starts_with: ID
  # All values ending with the given string.
  id_ends_with: ID
  # All values not ending with the given string.
  id_not_ends_with: ID
  handle: String
  # All values that are not equal to given value.
  handle_not: String
  # All values that are contained in given list.
  handle_in: [String!]
  # All values that are not contained in given list.
  handle_not_in: [String!]
  # All values less than the given value.
  handle_lt: String
  # All values less than or equal the given value.
  handle_lte: String
  # All values greater than the given value.
  handle_gt: String
  # All values greater than or equal the given value.
  handle_gte: String
  # All values containing the given string.
  handle_contains: String
  # All values not containing the given string.
  handle_not_contains: String
  # All values starting with the given string.
  handle_starts_with: String
  # All values not starting with the given string.
  handle_not_starts_with: String
  # All values ending with the given string.
  handle_ends_with: String
  # All values not ending with the given string.
  handle_not_ends_with: String
  fileName: String
  # All values that are not equal to given value.
  fileName_not: String
  # All values that are contained in given list.
  fileName_in: [String!]
  # All values that are not contained in given list.
  fileName_not_in: [String!]
  # All values less than the given value.
  fileName_lt: String
  # All values less than or equal the given value.
  fileName_lte: String
  # All values greater than the given value.
  fileName_gt: String
  # All values greater than or equal the given value.
  fileName_gte: String
  # All values containing the given string.
  fileName_contains: String
  # All values not containing the given string.
  fileName_not_contains: String
  # All values starting with the given string.
  fileName_starts_with: String
  # All values not starting with the given string.
  fileName_not_starts_with: String
  # All values ending with the given string.
  fileName_ends_with: String
  # All values not ending with the given string.
  fileName_not_ends_with: String
  height: Float
  # All values that are not equal to given value.
  height_not: Float
  # All values that are contained in given list.
  height_in: [Float!]
  # All values that are not contained in given list.
  height_not_in: [Float!]
  # All values less than the given value.
  height_lt: Float
  # All values less than or equal the given value.
  height_lte: Float
  # All values greater than the given value.
  height_gt: Float
  # All values greater than or equal the given value.
  height_gte: Float
  width: Float
  # All values that are not equal to given value.
  width_not: Float
  # All values that are contained in given list.
  width_in: [Float!]
  # All values that are not contained in given list.
  width_not_in: [Float!]
  # All values less than the given value.
  width_lt: Float
  # All values less than or equal the given value.
  width_lte: Float
  # All values greater than the given value.
  width_gt: Float
  # All values greater than or equal the given value.
  width_gte: Float
  size: Float
  # All values that are not equal to given value.
  size_not: Float
  # All values that are contained in given list.
  size_in: [Float!]
  # All values that are not contained in given list.
  size_not_in: [Float!]
  # All values less than the given value.
  size_lt: Float
  # All values less than or equal the given value.
  size_lte: Float
  # All values greater than the given value.
  size_gt: Float
  # All values greater than or equal the given value.
  size_gte: Float
  mimeType: String
  # All values that are not equal to given value.
  mimeType_not: String
  # All values that are contained in given list.
  mimeType_in: [String!]
  # All values that are not contained in given list.
  mimeType_not_in: [String!]
  # All values less than the given value.
  mimeType_lt: String
  # All values less than or equal the given value.
  mimeType_lte: String
  # All values greater than the given value.
  mimeType_gt: String
  # All values greater than or equal the given value.
  mimeType_gte: String
  # All values containing the given string.
  mimeType_contains: String
  # All values not containing the given string.
  mimeType_not_contains: String
  # All values starting with the given string.
  mimeType_starts_with: String
  # All values not starting with the given string.
  mimeType_not_starts_with: String
  # All values ending with the given string.
  mimeType_ends_with: String
  # All values not ending with the given string.
  mimeType_not_ends_with: String
}

type AssetSubscriptionPayload {
  mutation: MutationType!
  node: Asset
  updatedFields: [String!]
  previousValues: AssetPreviousValues
}

input AssetSubscriptionWhereInput {
  # Logical AND on all given filters.
  AND: [AssetSubscriptionWhereInput!]
  # Logical OR on all given filters.
  OR: [AssetSubscriptionWhereInput!]
  # Logical NOT on all given filters combined by AND.
  NOT: [AssetSubscriptionWhereInput!]
  # The subscription event gets dispatched when it's listed in mutation_in
  mutation_in: [MutationType!]
  # The subscription event gets only dispatched when one of the updated fields names is included in this list
  updatedFields_contains: String
  # The subscription event gets only dispatched when all of the field names included in this list have been updated
  updatedFields_contains_every: [String!]
  # The subscription event gets only dispatched when some of the field names included in this list have been updated
  updatedFields_contains_some: [String!]
  node: AssetWhereInput
}

# Transformations for Assets
input AssetTransformationInput {
  image: ImageTransformationInput
  document: DocumentTransformationInput
  # Pass `true` if you want to validate the passed transformation parameters
  validateOptions: Boolean = false
}

input AssetUpdateInput {
  status: Status
  handle: String
  fileName: String
  height: Float
  width: Float
  size: Float
  mimeType: String
  oliveTemp: TempUpdateManyWithoutOliveInput
  goldLotstring: LotstringUpdateManyWithoutGoldInput
  maroonDaltfresh: DaltfreshUpdateManyWithoutMaroonInput
  greenStronghold: StrongholdUpdateManyWithoutGreenInput
  tealStronghold: StrongholdUpdateManyWithoutTealInput
  silverStronghold: StrongholdUpdateManyWithoutSilverInput
  lavenderStronghold: StrongholdUpdateManyWithoutLavenderInput
  goldOtcom: OtcomUpdateManyWithoutGoldInput
  greyZamit: ZamitUpdateManyWithoutGreyInput
}

input AssetUpdateManyDataInput {
  status: Status
  handle: String
  fileName: String
  height: Float
  width: Float
  size: Float
  mimeType: String
}

input AssetUpdateManyMutationInput {
  status: Status
  handle: String
  fileName: String
  height: Float
  width: Float
  size: Float
  mimeType: String
}

input AssetUpdateManyWithoutGoldLotstringInput {
  create: [AssetCreateWithoutGoldLotstringInput!]
  connect: [AssetWhereUniqueInput!]
  set: [AssetWhereUniqueInput!]
  disconnect: [AssetWhereUniqueInput!]
  delete: [AssetWhereUniqueInput!]
  update: [AssetUpdateWithWhereUniqueWithoutGoldLotstringInput!]
  updateMany: [AssetUpdateManyWithWhereNestedInput!]
  deleteMany: [AssetScalarWhereInput!]
  upsert: [AssetUpsertWithWhereUniqueWithoutGoldLotstringInput!]
}

input AssetUpdateManyWithWhereNestedInput {
  where: AssetScalarWhereInput!
  data: AssetUpdateManyDataInput!
}

input AssetUpdateOneWithoutGoldOtcomInput {
  create: AssetCreateWithoutGoldOtcomInput
  connect: AssetWhereUniqueInput
  disconnect: Boolean
  delete: Boolean
  update: AssetUpdateWithoutGoldOtcomDataInput
  upsert: AssetUpsertWithoutGoldOtcomInput
}

input AssetUpdateOneWithoutGreenStrongholdInput {
  create: AssetCreateWithoutGreenStrongholdInput
  connect: AssetWhereUniqueInput
  disconnect: Boolean
  delete: Boolean
  update: AssetUpdateWithoutGreenStrongholdDataInput
  upsert: AssetUpsertWithoutGreenStrongholdInput
}

input AssetUpdateOneWithoutGreyZamitInput {
  create: AssetCreateWithoutGreyZamitInput
  connect: AssetWhereUniqueInput
  disconnect: Boolean
  delete: Boolean
  update: AssetUpdateWithoutGreyZamitDataInput
  upsert: AssetUpsertWithoutGreyZamitInput
}

input AssetUpdateOneWithoutLavenderStrongholdInput {
  create: AssetCreateWithoutLavenderStrongholdInput
  connect: AssetWhereUniqueInput
  disconnect: Boolean
  delete: Boolean
  update: AssetUpdateWithoutLavenderStrongholdDataInput
  upsert: AssetUpsertWithoutLavenderStrongholdInput
}

input AssetUpdateOneWithoutMaroonDaltfreshInput {
  create: AssetCreateWithoutMaroonDaltfreshInput
  connect: AssetWhereUniqueInput
  disconnect: Boolean
  delete: Boolean
  update: AssetUpdateWithoutMaroonDaltfreshDataInput
  upsert: AssetUpsertWithoutMaroonDaltfreshInput
}

input AssetUpdateOneWithoutOliveTempInput {
  create: AssetCreateWithoutOliveTempInput
  connect: AssetWhereUniqueInput
  disconnect: Boolean
  delete: Boolean
  update: AssetUpdateWithoutOliveTempDataInput
  upsert: AssetUpsertWithoutOliveTempInput
}

input AssetUpdateOneWithoutSilverStrongholdInput {
  create: AssetCreateWithoutSilverStrongholdInput
  connect: AssetWhereUniqueInput
  disconnect: Boolean
  delete: Boolean
  update: AssetUpdateWithoutSilverStrongholdDataInput
  upsert: AssetUpsertWithoutSilverStrongholdInput
}

input AssetUpdateOneWithoutTealStrongholdInput {
  create: AssetCreateWithoutTealStrongholdInput
  connect: AssetWhereUniqueInput
  disconnect: Boolean
  delete: Boolean
  update: AssetUpdateWithoutTealStrongholdDataInput
  upsert: AssetUpsertWithoutTealStrongholdInput
}

input AssetUpdateWithoutGoldLotstringDataInput {
  status: Status
  handle: String
  fileName: String
  height: Float
  width: Float
  size: Float
  mimeType: String
  oliveTemp: TempUpdateManyWithoutOliveInput
  maroonDaltfresh: DaltfreshUpdateManyWithoutMaroonInput
  greenStronghold: StrongholdUpdateManyWithoutGreenInput
  tealStronghold: StrongholdUpdateManyWithoutTealInput
  silverStronghold: StrongholdUpdateManyWithoutSilverInput
  lavenderStronghold: StrongholdUpdateManyWithoutLavenderInput
  goldOtcom: OtcomUpdateManyWithoutGoldInput
  greyZamit: ZamitUpdateManyWithoutGreyInput
}

input AssetUpdateWithoutGoldOtcomDataInput {
  status: Status
  handle: String
  fileName: String
  height: Float
  width: Float
  size: Float
  mimeType: String
  oliveTemp: TempUpdateManyWithoutOliveInput
  goldLotstring: LotstringUpdateManyWithoutGoldInput
  maroonDaltfresh: DaltfreshUpdateManyWithoutMaroonInput
  greenStronghold: StrongholdUpdateManyWithoutGreenInput
  tealStronghold: StrongholdUpdateManyWithoutTealInput
  silverStronghold: StrongholdUpdateManyWithoutSilverInput
  lavenderStronghold: StrongholdUpdateManyWithoutLavenderInput
  greyZamit: ZamitUpdateManyWithoutGreyInput
}

input AssetUpdateWithoutGreenStrongholdDataInput {
  status: Status
  handle: String
  fileName: String
  height: Float
  width: Float
  size: Float
  mimeType: String
  oliveTemp: TempUpdateManyWithoutOliveInput
  goldLotstring: LotstringUpdateManyWithoutGoldInput
  maroonDaltfresh: DaltfreshUpdateManyWithoutMaroonInput
  tealStronghold: StrongholdUpdateManyWithoutTealInput
  silverStronghold: StrongholdUpdateManyWithoutSilverInput
  lavenderStronghold: StrongholdUpdateManyWithoutLavenderInput
  goldOtcom: OtcomUpdateManyWithoutGoldInput
  greyZamit: ZamitUpdateManyWithoutGreyInput
}

input AssetUpdateWithoutGreyZamitDataInput {
  status: Status
  handle: String
  fileName: String
  height: Float
  width: Float
  size: Float
  mimeType: String
  oliveTemp: TempUpdateManyWithoutOliveInput
  goldLotstring: LotstringUpdateManyWithoutGoldInput
  maroonDaltfresh: DaltfreshUpdateManyWithoutMaroonInput
  greenStronghold: StrongholdUpdateManyWithoutGreenInput
  tealStronghold: StrongholdUpdateManyWithoutTealInput
  silverStronghold: StrongholdUpdateManyWithoutSilverInput
  lavenderStronghold: StrongholdUpdateManyWithoutLavenderInput
  goldOtcom: OtcomUpdateManyWithoutGoldInput
}

input AssetUpdateWithoutLavenderStrongholdDataInput {
  status: Status
  handle: String
  fileName: String
  height: Float
  width: Float
  size: Float
  mimeType: String
  oliveTemp: TempUpdateManyWithoutOliveInput
  goldLotstring: LotstringUpdateManyWithoutGoldInput
  maroonDaltfresh: DaltfreshUpdateManyWithoutMaroonInput
  greenStronghold: StrongholdUpdateManyWithoutGreenInput
  tealStronghold: StrongholdUpdateManyWithoutTealInput
  silverStronghold: StrongholdUpdateManyWithoutSilverInput
  goldOtcom: OtcomUpdateManyWithoutGoldInput
  greyZamit: ZamitUpdateManyWithoutGreyInput
}

input AssetUpdateWithoutMaroonDaltfreshDataInput {
  status: Status
  handle: String
  fileName: String
  height: Float
  width: Float
  size: Float
  mimeType: String
  oliveTemp: TempUpdateManyWithoutOliveInput
  goldLotstring: LotstringUpdateManyWithoutGoldInput
  greenStronghold: StrongholdUpdateManyWithoutGreenInput
  tealStronghold: StrongholdUpdateManyWithoutTealInput
  silverStronghold: StrongholdUpdateManyWithoutSilverInput
  lavenderStronghold: StrongholdUpdateManyWithoutLavenderInput
  goldOtcom: OtcomUpdateManyWithoutGoldInput
  greyZamit: ZamitUpdateManyWithoutGreyInput
}

input AssetUpdateWithoutOliveTempDataInput {
  status: Status
  handle: String
  fileName: String
  height: Float
  width: Float
  size: Float
  mimeType: String
  goldLotstring: LotstringUpdateManyWithoutGoldInput
  maroonDaltfresh: DaltfreshUpdateManyWithoutMaroonInput
  greenStronghold: StrongholdUpdateManyWithoutGreenInput
  tealStronghold: StrongholdUpdateManyWithoutTealInput
  silverStronghold: StrongholdUpdateManyWithoutSilverInput
  lavenderStronghold: StrongholdUpdateManyWithoutLavenderInput
  goldOtcom: OtcomUpdateManyWithoutGoldInput
  greyZamit: ZamitUpdateManyWithoutGreyInput
}

input AssetUpdateWithoutSilverStrongholdDataInput {
  status: Status
  handle: String
  fileName: String
  height: Float
  width: Float
  size: Float
  mimeType: String
  oliveTemp: TempUpdateManyWithoutOliveInput
  goldLotstring: LotstringUpdateManyWithoutGoldInput
  maroonDaltfresh: DaltfreshUpdateManyWithoutMaroonInput
  greenStronghold: StrongholdUpdateManyWithoutGreenInput
  tealStronghold: StrongholdUpdateManyWithoutTealInput
  lavenderStronghold: StrongholdUpdateManyWithoutLavenderInput
  goldOtcom: OtcomUpdateManyWithoutGoldInput
  greyZamit: ZamitUpdateManyWithoutGreyInput
}

input AssetUpdateWithoutTealStrongholdDataInput {
  status: Status
  handle: String
  fileName: String
  height: Float
  width: Float
  size: Float
  mimeType: String
  oliveTemp: TempUpdateManyWithoutOliveInput
  goldLotstring: LotstringUpdateManyWithoutGoldInput
  maroonDaltfresh: DaltfreshUpdateManyWithoutMaroonInput
  greenStronghold: StrongholdUpdateManyWithoutGreenInput
  silverStronghold: StrongholdUpdateManyWithoutSilverInput
  lavenderStronghold: StrongholdUpdateManyWithoutLavenderInput
  goldOtcom: OtcomUpdateManyWithoutGoldInput
  greyZamit: ZamitUpdateManyWithoutGreyInput
}

input AssetUpdateWithWhereUniqueWithoutGoldLotstringInput {
  where: AssetWhereUniqueInput!
  data: AssetUpdateWithoutGoldLotstringDataInput!
}

input AssetUpsertWithoutGoldOtcomInput {
  update: AssetUpdateWithoutGoldOtcomDataInput!
  create: AssetCreateWithoutGoldOtcomInput!
}

input AssetUpsertWithoutGreenStrongholdInput {
  update: AssetUpdateWithoutGreenStrongholdDataInput!
  create: AssetCreateWithoutGreenStrongholdInput!
}

input AssetUpsertWithoutGreyZamitInput {
  update: AssetUpdateWithoutGreyZamitDataInput!
  create: AssetCreateWithoutGreyZamitInput!
}

input AssetUpsertWithoutLavenderStrongholdInput {
  update: AssetUpdateWithoutLavenderStrongholdDataInput!
  create: AssetCreateWithoutLavenderStrongholdInput!
}

input AssetUpsertWithoutMaroonDaltfreshInput {
  update: AssetUpdateWithoutMaroonDaltfreshDataInput!
  create: AssetCreateWithoutMaroonDaltfreshInput!
}

input AssetUpsertWithoutOliveTempInput {
  update: AssetUpdateWithoutOliveTempDataInput!
  create: AssetCreateWithoutOliveTempInput!
}

input AssetUpsertWithoutSilverStrongholdInput {
  update: AssetUpdateWithoutSilverStrongholdDataInput!
  create: AssetCreateWithoutSilverStrongholdInput!
}

input AssetUpsertWithoutTealStrongholdInput {
  update: AssetUpdateWithoutTealStrongholdDataInput!
  create: AssetCreateWithoutTealStrongholdInput!
}

input AssetUpsertWithWhereUniqueWithoutGoldLotstringInput {
  where: AssetWhereUniqueInput!
  update: AssetUpdateWithoutGoldLotstringDataInput!
  create: AssetCreateWithoutGoldLotstringInput!
}

input AssetWhereInput {
  # Logical AND on all given filters.
  AND: [AssetWhereInput!]
  # Logical OR on all given filters.
  OR: [AssetWhereInput!]
  # Logical NOT on all given filters combined by AND.
  NOT: [AssetWhereInput!]
  status: Status
  # All values that are not equal to given value.
  status_not: Status
  # All values that are contained in given list.
  status_in: [Status!]
  # All values that are not contained in given list.
  status_not_in: [Status!]
  updatedAt: DateTime
  # All values that are not equal to given value.
  updatedAt_not: DateTime
  # All values that are contained in given list.
  updatedAt_in: [DateTime!]
  # All values that are not contained in given list.
  updatedAt_not_in: [DateTime!]
  # All values less than the given value.
  updatedAt_lt: DateTime
  # All values less than or equal the given value.
  updatedAt_lte: DateTime
  # All values greater than the given value.
  updatedAt_gt: DateTime
  # All values greater than or equal the given value.
  updatedAt_gte: DateTime
  createdAt: DateTime
  # All values that are not equal to given value.
  createdAt_not: DateTime
  # All values that are contained in given list.
  createdAt_in: [DateTime!]
  # All values that are not contained in given list.
  createdAt_not_in: [DateTime!]
  # All values less than the given value.
  createdAt_lt: DateTime
  # All values less than or equal the given value.
  createdAt_lte: DateTime
  # All values greater than the given value.
  createdAt_gt: DateTime
  # All values greater than or equal the given value.
  createdAt_gte: DateTime
  id: ID
  # All values that are not equal to given value.
  id_not: ID
  # All values that are contained in given list.
  id_in: [ID!]
  # All values that are not contained in given list.
  id_not_in: [ID!]
  # All values less than the given value.
  id_lt: ID
  # All values less than or equal the given value.
  id_lte: ID
  # All values greater than the given value.
  id_gt: ID
  # All values greater than or equal the given value.
  id_gte: ID
  # All values containing the given string.
  id_contains: ID
  # All values not containing the given string.
  id_not_contains: ID
  # All values starting with the given string.
  id_starts_with: ID
  # All values not starting with the given string.
  id_not_starts_with: ID
  # All values ending with the given string.
  id_ends_with: ID
  # All values not ending with the given string.
  id_not_ends_with: ID
  handle: String
  # All values that are not equal to given value.
  handle_not: String
  # All values that are contained in given list.
  handle_in: [String!]
  # All values that are not contained in given list.
  handle_not_in: [String!]
  # All values less than the given value.
  handle_lt: String
  # All values less than or equal the given value.
  handle_lte: String
  # All values greater than the given value.
  handle_gt: String
  # All values greater than or equal the given value.
  handle_gte: String
  # All values containing the given string.
  handle_contains: String
  # All values not containing the given string.
  handle_not_contains: String
  # All values starting with the given string.
  handle_starts_with: String
  # All values not starting with the given string.
  handle_not_starts_with: String
  # All values ending with the given string.
  handle_ends_with: String
  # All values not ending with the given string.
  handle_not_ends_with: String
  fileName: String
  # All values that are not equal to given value.
  fileName_not: String
  # All values that are contained in given list.
  fileName_in: [String!]
  # All values that are not contained in given list.
  fileName_not_in: [String!]
  # All values less than the given value.
  fileName_lt: String
  # All values less than or equal the given value.
  fileName_lte: String
  # All values greater than the given value.
  fileName_gt: String
  # All values greater than or equal the given value.
  fileName_gte: String
  # All values containing the given string.
  fileName_contains: String
  # All values not containing the given string.
  fileName_not_contains: String
  # All values starting with the given string.
  fileName_starts_with: String
  # All values not starting with the given string.
  fileName_not_starts_with: String
  # All values ending with the given string.
  fileName_ends_with: String
  # All values not ending with the given string.
  fileName_not_ends_with: String
  height: Float
  # All values that are not equal to given value.
  height_not: Float
  # All values that are contained in given list.
  height_in: [Float!]
  # All values that are not contained in given list.
  height_not_in: [Float!]
  # All values less than the given value.
  height_lt: Float
  # All values less than or equal the given value.
  height_lte: Float
  # All values greater than the given value.
  height_gt: Float
  # All values greater than or equal the given value.
  height_gte: Float
  width: Float
  # All values that are not equal to given value.
  width_not: Float
  # All values that are contained in given list.
  width_in: [Float!]
  # All values that are not contained in given list.
  width_not_in: [Float!]
  # All values less than the given value.
  width_lt: Float
  # All values less than or equal the given value.
  width_lte: Float
  # All values greater than the given value.
  width_gt: Float
  # All values greater than or equal the given value.
  width_gte: Float
  size: Float
  # All values that are not equal to given value.
  size_not: Float
  # All values that are contained in given list.
  size_in: [Float!]
  # All values that are not contained in given list.
  size_not_in: [Float!]
  # All values less than the given value.
  size_lt: Float
  # All values less than or equal the given value.
  size_lte: Float
  # All values greater than the given value.
  size_gt: Float
  # All values greater than or equal the given value.
  size_gte: Float
  mimeType: String
  # All values that are not equal to given value.
  mimeType_not: String
  # All values that are contained in given list.
  mimeType_in: [String!]
  # All values that are not contained in given list.
  mimeType_not_in: [String!]
  # All values less than the given value.
  mimeType_lt: String
  # All values less than or equal the given value.
  mimeType_lte: String
  # All values greater than the given value.
  mimeType_gt: String
  # All values greater than or equal the given value.
  mimeType_gte: String
  # All values containing the given string.
  mimeType_contains: String
  # All values not containing the given string.
  mimeType_not_contains: String
  # All values starting with the given string.
  mimeType_starts_with: String
  # All values not starting with the given string.
  mimeType_not_starts_with: String
  # All values ending with the given string.
  mimeType_ends_with: String
  # All values not ending with the given string.
  mimeType_not_ends_with: String
  oliveTemp_every: TempWhereInput
  oliveTemp_some: TempWhereInput
  oliveTemp_none: TempWhereInput
  goldLotstring_every: LotstringWhereInput
  goldLotstring_some: LotstringWhereInput
  goldLotstring_none: LotstringWhereInput
  maroonDaltfresh_every: DaltfreshWhereInput
  maroonDaltfresh_some: DaltfreshWhereInput
  maroonDaltfresh_none: DaltfreshWhereInput
  greenStronghold_every: StrongholdWhereInput
  greenStronghold_some: StrongholdWhereInput
  greenStronghold_none: StrongholdWhereInput
  tealStronghold_every: StrongholdWhereInput
  tealStronghold_some: StrongholdWhereInput
  tealStronghold_none: StrongholdWhereInput
  silverStronghold_every: StrongholdWhereInput
  silverStronghold_some: StrongholdWhereInput
  silverStronghold_none: StrongholdWhereInput
  lavenderStronghold_every: StrongholdWhereInput
  lavenderStronghold_some: StrongholdWhereInput
  lavenderStronghold_none: StrongholdWhereInput
  goldOtcom_every: OtcomWhereInput
  goldOtcom_some: OtcomWhereInput
  goldOtcom_none: OtcomWhereInput
  greyZamit_every: ZamitWhereInput
  greyZamit_some: ZamitWhereInput
  greyZamit_none: ZamitWhereInput
}

input AssetWhereUniqueInput {
  id: ID
  handle: String
}

type Bamity implements Node {
  status: Status!
  updatedAt: DateTime!
  createdAt: DateTime!
  id: ID!
  blue: DateTime
  tan: DateTime
  orange: Rice!
  purple: String
  maroon: Stronghold
}

# A connection to a list of items.
type BamityConnection {
  # Information to aid in pagination.
  pageInfo: PageInfo!
  # A list of edges.
  edges: [BamityEdge]!
  aggregate: AggregateBamity!
}

input BamityCreateInput {
  status: Status
  blue: DateTime
  tan: DateTime
  orange: Rice!
  purple: String
  maroon: StrongholdCreateOneWithoutOrchidInput
}

input BamityCreateManyWithoutMaroonInput {
  create: [BamityCreateWithoutMaroonInput!]
  connect: [BamityWhereUniqueInput!]
}

input BamityCreateWithoutMaroonInput {
  status: Status
  blue: DateTime
  tan: DateTime
  orange: Rice!
  purple: String
}

# An edge in a connection.
type BamityEdge {
  # The item at the end of the edge.
  node: Bamity!
  # A cursor for use in pagination.
  cursor: String!
}

enum BamityOrderByInput {
  status_ASC
  status_DESC
  updatedAt_ASC
  updatedAt_DESC
  createdAt_ASC
  createdAt_DESC
  id_ASC
  id_DESC
  blue_ASC
  blue_DESC
  tan_ASC
  tan_DESC
  orange_ASC
  orange_DESC
  purple_ASC
  purple_DESC
}

type BamityPreviousValues {
  status: Status!
  updatedAt: DateTime!
  createdAt: DateTime!
  id: ID!
  blue: DateTime
  tan: DateTime
  orange: Rice!
  purple: String
}

input BamityScalarWhereInput {
  # Logical AND on all given filters.
  AND: [BamityScalarWhereInput!]
  # Logical OR on all given filters.
  OR: [BamityScalarWhereInput!]
  # Logical NOT on all given filters combined by AND.
  NOT: [BamityScalarWhereInput!]
  status: Status
  # All values that are not equal to given value.
  status_not: Status
  # All values that are contained in given list.
  status_in: [Status!]
  # All values that are not contained in given list.
  status_not_in: [Status!]
  updatedAt: DateTime
  # All values that are not equal to given value.
  updatedAt_not: DateTime
  # All values that are contained in given list.
  updatedAt_in: [DateTime!]
  # All values that are not contained in given list.
  updatedAt_not_in: [DateTime!]
  # All values less than the given value.
  updatedAt_lt: DateTime
  # All values less than or equal the given value.
  updatedAt_lte: DateTime
  # All values greater than the given value.
  updatedAt_gt: DateTime
  # All values greater than or equal the given value.
  updatedAt_gte: DateTime
  createdAt: DateTime
  # All values that are not equal to given value.
  createdAt_not: DateTime
  # All values that are contained in given list.
  createdAt_in: [DateTime!]
  # All values that are not contained in given list.
  createdAt_not_in: [DateTime!]
  # All values less than the given value.
  createdAt_lt: DateTime
  # All values less than or equal the given value.
  createdAt_lte: DateTime
  # All values greater than the given value.
  createdAt_gt: DateTime
  # All values greater than or equal the given value.
  createdAt_gte: DateTime
  id: ID
  # All values that are not equal to given value.
  id_not: ID
  # All values that are contained in given list.
  id_in: [ID!]
  # All values that are not contained in given list.
  id_not_in: [ID!]
  # All values less than the given value.
  id_lt: ID
  # All values less than or equal the given value.
  id_lte: ID
  # All values greater than the given value.
  id_gt: ID
  # All values greater than or equal the given value.
  id_gte: ID
  # All values containing the given string.
  id_contains: ID
  # All values not containing the given string.
  id_not_contains: ID
  # All values starting with the given string.
  id_starts_with: ID
  # All values not starting with the given string.
  id_not_starts_with: ID
  # All values ending with the given string.
  id_ends_with: ID
  # All values not ending with the given string.
  id_not_ends_with: ID
  blue: DateTime
  # All values that are not equal to given value.
  blue_not: DateTime
  # All values that are contained in given list.
  blue_in: [DateTime!]
  # All values that are not contained in given list.
  blue_not_in: [DateTime!]
  # All values less than the given value.
  blue_lt: DateTime
  # All values less than or equal the given value.
  blue_lte: DateTime
  # All values greater than the given value.
  blue_gt: DateTime
  # All values greater than or equal the given value.
  blue_gte: DateTime
  tan: DateTime
  # All values that are not equal to given value.
  tan_not: DateTime
  # All values that are contained in given list.
  tan_in: [DateTime!]
  # All values that are not contained in given list.
  tan_not_in: [DateTime!]
  # All values less than the given value.
  tan_lt: DateTime
  # All values less than or equal the given value.
  tan_lte: DateTime
  # All values greater than the given value.
  tan_gt: DateTime
  # All values greater than or equal the given value.
  tan_gte: DateTime
  orange: Rice
  # All values that are not equal to given value.
  orange_not: Rice
  # All values that are contained in given list.
  orange_in: [Rice!]
  # All values that are not contained in given list.
  orange_not_in: [Rice!]
  purple: String
  # All values that are not equal to given value.
  purple_not: String
  # All values that are contained in given list.
  purple_in: [String!]
  # All values that are not contained in given list.
  purple_not_in: [String!]
  # All values less than the given value.
  purple_lt: String
  # All values less than or equal the given value.
  purple_lte: String
  # All values greater than the given value.
  purple_gt: String
  # All values greater than or equal the given value.
  purple_gte: String
  # All values containing the given string.
  purple_contains: String
  # All values not containing the given string.
  purple_not_contains: String
  # All values starting with the given string.
  purple_starts_with: String
  # All values not starting with the given string.
  purple_not_starts_with: String
  # All values ending with the given string.
  purple_ends_with: String
  # All values not ending with the given string.
  purple_not_ends_with: String
}

type BamitySubscriptionPayload {
  mutation: MutationType!
  node: Bamity
  updatedFields: [String!]
  previousValues: BamityPreviousValues
}

input BamitySubscriptionWhereInput {
  # Logical AND on all given filters.
  AND: [BamitySubscriptionWhereInput!]
  # Logical OR on all given filters.
  OR: [BamitySubscriptionWhereInput!]
  # Logical NOT on all given filters combined by AND.
  NOT: [BamitySubscriptionWhereInput!]
  # The subscription event gets dispatched when it's listed in mutation_in
  mutation_in: [MutationType!]
  # The subscription event gets only dispatched when one of the updated fields names is included in this list
  updatedFields_contains: String
  # The subscription event gets only dispatched when all of the field names included in this list have been updated
  updatedFields_contains_every: [String!]
  # The subscription event gets only dispatched when some of the field names included in this list have been updated
  updatedFields_contains_some: [String!]
  node: BamityWhereInput
}

input BamityUpdateInput {
  status: Status
  blue: DateTime
  tan: DateTime
  orange: Rice
  purple: String
  maroon: StrongholdUpdateOneWithoutOrchidInput
}

input BamityUpdateManyDataInput {
  status: Status
  blue: DateTime
  tan: DateTime
  orange: Rice
  purple: String
}

input BamityUpdateManyMutationInput {
  status: Status
  blue: DateTime
  tan: DateTime
  orange: Rice
  purple: String
}

input BamityUpdateManyWithoutMaroonInput {
  create: [BamityCreateWithoutMaroonInput!]
  connect: [BamityWhereUniqueInput!]
  set: [BamityWhereUniqueInput!]
  disconnect: [BamityWhereUniqueInput!]
  delete: [BamityWhereUniqueInput!]
  update: [BamityUpdateWithWhereUniqueWithoutMaroonInput!]
  updateMany: [BamityUpdateManyWithWhereNestedInput!]
  deleteMany: [BamityScalarWhereInput!]
  upsert: [BamityUpsertWithWhereUniqueWithoutMaroonInput!]
}

input BamityUpdateManyWithWhereNestedInput {
  where: BamityScalarWhereInput!
  data: BamityUpdateManyDataInput!
}

input BamityUpdateWithoutMaroonDataInput {
  status: Status
  blue: DateTime
  tan: DateTime
  orange: Rice
  purple: String
}

input BamityUpdateWithWhereUniqueWithoutMaroonInput {
  where: BamityWhereUniqueInput!
  data: BamityUpdateWithoutMaroonDataInput!
}

input BamityUpsertWithWhereUniqueWithoutMaroonInput {
  where: BamityWhereUniqueInput!
  update: BamityUpdateWithoutMaroonDataInput!
  create: BamityCreateWithoutMaroonInput!
}

input BamityWhereInput {
  # Logical AND on all given filters.
  AND: [BamityWhereInput!]
  # Logical OR on all given filters.
  OR: [BamityWhereInput!]
  # Logical NOT on all given filters combined by AND.
  NOT: [BamityWhereInput!]
  status: Status
  # All values that are not equal to given value.
  status_not: Status
  # All values that are contained in given list.
  status_in: [Status!]
  # All values that are not contained in given list.
  status_not_in: [Status!]
  updatedAt: DateTime
  # All values that are not equal to given value.
  updatedAt_not: DateTime
  # All values that are contained in given list.
  updatedAt_in: [DateTime!]
  # All values that are not contained in given list.
  updatedAt_not_in: [DateTime!]
  # All values less than the given value.
  updatedAt_lt: DateTime
  # All values less than or equal the given value.
  updatedAt_lte: DateTime
  # All values greater than the given value.
  updatedAt_gt: DateTime
  # All values greater than or equal the given value.
  updatedAt_gte: DateTime
  createdAt: DateTime
  # All values that are not equal to given value.
  createdAt_not: DateTime
  # All values that are contained in given list.
  createdAt_in: [DateTime!]
  # All values that are not contained in given list.
  createdAt_not_in: [DateTime!]
  # All values less than the given value.
  createdAt_lt: DateTime
  # All values less than or equal the given value.
  createdAt_lte: DateTime
  # All values greater than the given value.
  createdAt_gt: DateTime
  # All values greater than or equal the given value.
  createdAt_gte: DateTime
  id: ID
  # All values that are not equal to given value.
  id_not: ID
  # All values that are contained in given list.
  id_in: [ID!]
  # All values that are not contained in given list.
  id_not_in: [ID!]
  # All values less than the given value.
  id_lt: ID
  # All values less than or equal the given value.
  id_lte: ID
  # All values greater than the given value.
  id_gt: ID
  # All values greater than or equal the given value.
  id_gte: ID
  # All values containing the given string.
  id_contains: ID
  # All values not containing the given string.
  id_not_contains: ID
  # All values starting with the given string.
  id_starts_with: ID
  # All values not starting with the given string.
  id_not_starts_with: ID
  # All values ending with the given string.
  id_ends_with: ID
  # All values not ending with the given string.
  id_not_ends_with: ID
  blue: DateTime
  # All values that are not equal to given value.
  blue_not: DateTime
  # All values that are contained in given list.
  blue_in: [DateTime!]
  # All values that are not contained in given list.
  blue_not_in: [DateTime!]
  # All values less than the given value.
  blue_lt: DateTime
  # All values less than or equal the given value.
  blue_lte: DateTime
  # All values greater than the given value.
  blue_gt: DateTime
  # All values greater than or equal the given value.
  blue_gte: DateTime
  tan: DateTime
  # All values that are not equal to given value.
  tan_not: DateTime
  # All values that are contained in given list.
  tan_in: [DateTime!]
  # All values that are not contained in given list.
  tan_not_in: [DateTime!]
  # All values less than the given value.
  tan_lt: DateTime
  # All values less than or equal the given value.
  tan_lte: DateTime
  # All values greater than the given value.
  tan_gt: DateTime
  # All values greater than or equal the given value.
  tan_gte: DateTime
  orange: Rice
  # All values that are not equal to given value.
  orange_not: Rice
  # All values that are contained in given list.
  orange_in: [Rice!]
  # All values that are not contained in given list.
  orange_not_in: [Rice!]
  purple: String
  # All values that are not equal to given value.
  purple_not: String
  # All values that are contained in given list.
  purple_in: [String!]
  # All values that are not contained in given list.
  purple_not_in: [String!]
  # All values less than the given value.
  purple_lt: String
  # All values less than or equal the given value.
  purple_lte: String
  # All values greater than the given value.
  purple_gt: String
  # All values greater than or equal the given value.
  purple_gte: String
  # All values containing the given string.
  purple_contains: String
  # All values not containing the given string.
  purple_not_contains: String
  # All values starting with the given string.
  purple_starts_with: String
  # All values not starting with the given string.
  purple_not_starts_with: String
  # All values ending with the given string.
  purple_ends_with: String
  # All values not ending with the given string.
  purple_not_ends_with: String
  maroon: StrongholdWhereInput
}

input BamityWhereUniqueInput {
  id: ID
}

type BatchPayload {
  # The number of nodes that have been affected by the Batch operation.
  count: Long!
}

type Bigtax implements Node {
  status: Status!
  updatedAt: DateTime!
  createdAt: DateTime!
  id: ID!
  gold: String!
  lime: String!
  yellow(
    where: VoyatouchWhereInput
    orderBy: VoyatouchOrderByInput
    skip: Int
    after: String
    before: String
    first: Int
    last: Int
  ): [Voyatouch!]
  azure: Int
  tan: String
  green: String
}

# A connection to a list of items.
type BigtaxConnection {
  # Information to aid in pagination.
  pageInfo: PageInfo!
  # A list of edges.
  edges: [BigtaxEdge]!
  aggregate: AggregateBigtax!
}

input BigtaxCreateInput {
  status: Status
  gold: String!
  lime: String!
  azure: Int
  tan: String
  green: String
  yellow: VoyatouchCreateManyWithoutTanInput
}

input BigtaxCreateManyWithoutYellowInput {
  create: [BigtaxCreateWithoutYellowInput!]
  connect: [BigtaxWhereUniqueInput!]
}

input BigtaxCreateWithoutYellowInput {
  status: Status
  gold: String!
  lime: String!
  azure: Int
  tan: String
  green: String
}

# An edge in a connection.
type BigtaxEdge {
  # The item at the end of the edge.
  node: Bigtax!
  # A cursor for use in pagination.
  cursor: String!
}

enum BigtaxOrderByInput {
  status_ASC
  status_DESC
  updatedAt_ASC
  updatedAt_DESC
  createdAt_ASC
  createdAt_DESC
  id_ASC
  id_DESC
  gold_ASC
  gold_DESC
  lime_ASC
  lime_DESC
  azure_ASC
  azure_DESC
  tan_ASC
  tan_DESC
  green_ASC
  green_DESC
}

type BigtaxPreviousValues {
  status: Status!
  updatedAt: DateTime!
  createdAt: DateTime!
  id: ID!
  gold: String!
  lime: String!
  azure: Int
  tan: String
  green: String
}

input BigtaxScalarWhereInput {
  # Logical AND on all given filters.
  AND: [BigtaxScalarWhereInput!]
  # Logical OR on all given filters.
  OR: [BigtaxScalarWhereInput!]
  # Logical NOT on all given filters combined by AND.
  NOT: [BigtaxScalarWhereInput!]
  status: Status
  # All values that are not equal to given value.
  status_not: Status
  # All values that are contained in given list.
  status_in: [Status!]
  # All values that are not contained in given list.
  status_not_in: [Status!]
  updatedAt: DateTime
  # All values that are not equal to given value.
  updatedAt_not: DateTime
  # All values that are contained in given list.
  updatedAt_in: [DateTime!]
  # All values that are not contained in given list.
  updatedAt_not_in: [DateTime!]
  # All values less than the given value.
  updatedAt_lt: DateTime
  # All values less than or equal the given value.
  updatedAt_lte: DateTime
  # All values greater than the given value.
  updatedAt_gt: DateTime
  # All values greater than or equal the given value.
  updatedAt_gte: DateTime
  createdAt: DateTime
  # All values that are not equal to given value.
  createdAt_not: DateTime
  # All values that are contained in given list.
  createdAt_in: [DateTime!]
  # All values that are not contained in given list.
  createdAt_not_in: [DateTime!]
  # All values less than the given value.
  createdAt_lt: DateTime
  # All values less than or equal the given value.
  createdAt_lte: DateTime
  # All values greater than the given value.
  createdAt_gt: DateTime
  # All values greater than or equal the given value.
  createdAt_gte: DateTime
  id: ID
  # All values that are not equal to given value.
  id_not: ID
  # All values that are contained in given list.
  id_in: [ID!]
  # All values that are not contained in given list.
  id_not_in: [ID!]
  # All values less than the given value.
  id_lt: ID
  # All values less than or equal the given value.
  id_lte: ID
  # All values greater than the given value.
  id_gt: ID
  # All values greater than or equal the given value.
  id_gte: ID
  # All values containing the given string.
  id_contains: ID
  # All values not containing the given string.
  id_not_contains: ID
  # All values starting with the given string.
  id_starts_with: ID
  # All values not starting with the given string.
  id_not_starts_with: ID
  # All values ending with the given string.
  id_ends_with: ID
  # All values not ending with the given string.
  id_not_ends_with: ID
  gold: String
  # All values that are not equal to given value.
  gold_not: String
  # All values that are contained in given list.
  gold_in: [String!]
  # All values that are not contained in given list.
  gold_not_in: [String!]
  # All values less than the given value.
  gold_lt: String
  # All values less than or equal the given value.
  gold_lte: String
  # All values greater than the given value.
  gold_gt: String
  # All values greater than or equal the given value.
  gold_gte: String
  # All values containing the given string.
  gold_contains: String
  # All values not containing the given string.
  gold_not_contains: String
  # All values starting with the given string.
  gold_starts_with: String
  # All values not starting with the given string.
  gold_not_starts_with: String
  # All values ending with the given string.
  gold_ends_with: String
  # All values not ending with the given string.
  gold_not_ends_with: String
  lime: String
  # All values that are not equal to given value.
  lime_not: String
  # All values that are contained in given list.
  lime_in: [String!]
  # All values that are not contained in given list.
  lime_not_in: [String!]
  # All values less than the given value.
  lime_lt: String
  # All values less than or equal the given value.
  lime_lte: String
  # All values greater than the given value.
  lime_gt: String
  # All values greater than or equal the given value.
  lime_gte: String
  # All values containing the given string.
  lime_contains: String
  # All values not containing the given string.
  lime_not_contains: String
  # All values starting with the given string.
  lime_starts_with: String
  # All values not starting with the given string.
  lime_not_starts_with: String
  # All values ending with the given string.
  lime_ends_with: String
  # All values not ending with the given string.
  lime_not_ends_with: String
  azure: Int
  # All values that are not equal to given value.
  azure_not: Int
  # All values that are contained in given list.
  azure_in: [Int!]
  # All values that are not contained in given list.
  azure_not_in: [Int!]
  # All values less than the given value.
  azure_lt: Int
  # All values less than or equal the given value.
  azure_lte: Int
  # All values greater than the given value.
  azure_gt: Int
  # All values greater than or equal the given value.
  azure_gte: Int
  tan: String
  # All values that are not equal to given value.
  tan_not: String
  # All values that are contained in given list.
  tan_in: [String!]
  # All values that are not contained in given list.
  tan_not_in: [String!]
  # All values less than the given value.
  tan_lt: String
  # All values less than or equal the given value.
  tan_lte: String
  # All values greater than the given value.
  tan_gt: String
  # All values greater than or equal the given value.
  tan_gte: String
  # All values containing the given string.
  tan_contains: String
  # All values not containing the given string.
  tan_not_contains: String
  # All values starting with the given string.
  tan_starts_with: String
  # All values not starting with the given string.
  tan_not_starts_with: String
  # All values ending with the given string.
  tan_ends_with: String
  # All values not ending with the given string.
  tan_not_ends_with: String
  green: String
  # All values that are not equal to given value.
  green_not: String
  # All values that are contained in given list.
  green_in: [String!]
  # All values that are not contained in given list.
  green_not_in: [String!]
  # All values less than the given value.
  green_lt: String
  # All values less than or equal the given value.
  green_lte: String
  # All values greater than the given value.
  green_gt: String
  # All values greater than or equal the given value.
  green_gte: String
  # All values containing the given string.
  green_contains: String
  # All values not containing the given string.
  green_not_contains: String
  # All values starting with the given string.
  green_starts_with: String
  # All values not starting with the given string.
  green_not_starts_with: String
  # All values ending with the given string.
  green_ends_with: String
  # All values not ending with the given string.
  green_not_ends_with: String
}

type BigtaxSubscriptionPayload {
  mutation: MutationType!
  node: Bigtax
  updatedFields: [String!]
  previousValues: BigtaxPreviousValues
}

input BigtaxSubscriptionWhereInput {
  # Logical AND on all given filters.
  AND: [BigtaxSubscriptionWhereInput!]
  # Logical OR on all given filters.
  OR: [BigtaxSubscriptionWhereInput!]
  # Logical NOT on all given filters combined by AND.
  NOT: [BigtaxSubscriptionWhereInput!]
  # The subscription event gets dispatched when it's listed in mutation_in
  mutation_in: [MutationType!]
  # The subscription event gets only dispatched when one of the updated fields names is included in this list
  updatedFields_contains: String
  # The subscription event gets only dispatched when all of the field names included in this list have been updated
  updatedFields_contains_every: [String!]
  # The subscription event gets only dispatched when some of the field names included in this list have been updated
  updatedFields_contains_some: [String!]
  node: BigtaxWhereInput
}

input BigtaxUpdateInput {
  status: Status
  gold: String
  lime: String
  azure: Int
  tan: String
  green: String
  yellow: VoyatouchUpdateManyWithoutTanInput
}

input BigtaxUpdateManyDataInput {
  status: Status
  gold: String
  lime: String
  azure: Int
  tan: String
  green: String
}

input BigtaxUpdateManyMutationInput {
  status: Status
  gold: String
  lime: String
  azure: Int
  tan: String
  green: String
}

input BigtaxUpdateManyWithoutYellowInput {
  create: [BigtaxCreateWithoutYellowInput!]
  connect: [BigtaxWhereUniqueInput!]
  set: [BigtaxWhereUniqueInput!]
  disconnect: [BigtaxWhereUniqueInput!]
  delete: [BigtaxWhereUniqueInput!]
  update: [BigtaxUpdateWithWhereUniqueWithoutYellowInput!]
  updateMany: [BigtaxUpdateManyWithWhereNestedInput!]
  deleteMany: [BigtaxScalarWhereInput!]
  upsert: [BigtaxUpsertWithWhereUniqueWithoutYellowInput!]
}

input BigtaxUpdateManyWithWhereNestedInput {
  where: BigtaxScalarWhereInput!
  data: BigtaxUpdateManyDataInput!
}

input BigtaxUpdateWithoutYellowDataInput {
  status: Status
  gold: String
  lime: String
  azure: Int
  tan: String
  green: String
}

input BigtaxUpdateWithWhereUniqueWithoutYellowInput {
  where: BigtaxWhereUniqueInput!
  data: BigtaxUpdateWithoutYellowDataInput!
}

input BigtaxUpsertWithWhereUniqueWithoutYellowInput {
  where: BigtaxWhereUniqueInput!
  update: BigtaxUpdateWithoutYellowDataInput!
  create: BigtaxCreateWithoutYellowInput!
}

input BigtaxWhereInput {
  # Logical AND on all given filters.
  AND: [BigtaxWhereInput!]
  # Logical OR on all given filters.
  OR: [BigtaxWhereInput!]
  # Logical NOT on all given filters combined by AND.
  NOT: [BigtaxWhereInput!]
  status: Status
  # All values that are not equal to given value.
  status_not: Status
  # All values that are contained in given list.
  status_in: [Status!]
  # All values that are not contained in given list.
  status_not_in: [Status!]
  updatedAt: DateTime
  # All values that are not equal to given value.
  updatedAt_not: DateTime
  # All values that are contained in given list.
  updatedAt_in: [DateTime!]
  # All values that are not contained in given list.
  updatedAt_not_in: [DateTime!]
  # All values less than the given value.
  updatedAt_lt: DateTime
  # All values less than or equal the given value.
  updatedAt_lte: DateTime
  # All values greater than the given value.
  updatedAt_gt: DateTime
  # All values greater than or equal the given value.
  updatedAt_gte: DateTime
  createdAt: DateTime
  # All values that are not equal to given value.
  createdAt_not: DateTime
  # All values that are contained in given list.
  createdAt_in: [DateTime!]
  # All values that are not contained in given list.
  createdAt_not_in: [DateTime!]
  # All values less than the given value.
  createdAt_lt: DateTime
  # All values less than or equal the given value.
  createdAt_lte: DateTime
  # All values greater than the given value.
  createdAt_gt: DateTime
  # All values greater than or equal the given value.
  createdAt_gte: DateTime
  id: ID
  # All values that are not equal to given value.
  id_not: ID
  # All values that are contained in given list.
  id_in: [ID!]
  # All values that are not contained in given list.
  id_not_in: [ID!]
  # All values less than the given value.
  id_lt: ID
  # All values less than or equal the given value.
  id_lte: ID
  # All values greater than the given value.
  id_gt: ID
  # All values greater than or equal the given value.
  id_gte: ID
  # All values containing the given string.
  id_contains: ID
  # All values not containing the given string.
  id_not_contains: ID
  # All values starting with the given string.
  id_starts_with: ID
  # All values not starting with the given string.
  id_not_starts_with: ID
  # All values ending with the given string.
  id_ends_with: ID
  # All values not ending with the given string.
  id_not_ends_with: ID
  gold: String
  # All values that are not equal to given value.
  gold_not: String
  # All values that are contained in given list.
  gold_in: [String!]
  # All values that are not contained in given list.
  gold_not_in: [String!]
  # All values less than the given value.
  gold_lt: String
  # All values less than or equal the given value.
  gold_lte: String
  # All values greater than the given value.
  gold_gt: String
  # All values greater than or equal the given value.
  gold_gte: String
  # All values containing the given string.
  gold_contains: String
  # All values not containing the given string.
  gold_not_contains: String
  # All values starting with the given string.
  gold_starts_with: String
  # All values not starting with the given string.
  gold_not_starts_with: String
  # All values ending with the given string.
  gold_ends_with: String
  # All values not ending with the given string.
  gold_not_ends_with: String
  lime: String
  # All values that are not equal to given value.
  lime_not: String
  # All values that are contained in given list.
  lime_in: [String!]
  # All values that are not contained in given list.
  lime_not_in: [String!]
  # All values less than the given value.
  lime_lt: String
  # All values less than or equal the given value.
  lime_lte: String
  # All values greater than the given value.
  lime_gt: String
  # All values greater than or equal the given value.
  lime_gte: String
  # All values containing the given string.
  lime_contains: String
  # All values not containing the given string.
  lime_not_contains: String
  # All values starting with the given string.
  lime_starts_with: String
  # All values not starting with the given string.
  lime_not_starts_with: String
  # All values ending with the given string.
  lime_ends_with: String
  # All values not ending with the given string.
  lime_not_ends_with: String
  azure: Int
  # All values that are not equal to given value.
  azure_not: Int
  # All values that are contained in given list.
  azure_in: [Int!]
  # All values that are not contained in given list.
  azure_not_in: [Int!]
  # All values less than the given value.
  azure_lt: Int
  # All values less than or equal the given value.
  azure_lte: Int
  # All values greater than the given value.
  azure_gt: Int
  # All values greater than or equal the given value.
  azure_gte: Int
  tan: String
  # All values that are not equal to given value.
  tan_not: String
  # All values that are contained in given list.
  tan_in: [String!]
  # All values that are not contained in given list.
  tan_not_in: [String!]
  # All values less than the given value.
  tan_lt: String
  # All values less than or equal the given value.
  tan_lte: String
  # All values greater than the given value.
  tan_gt: String
  # All values greater than or equal the given value.
  tan_gte: String
  # All values containing the given string.
  tan_contains: String
  # All values not containing the given string.
  tan_not_contains: String
  # All values starting with the given string.
  tan_starts_with: String
  # All values not starting with the given string.
  tan_not_starts_with: String
  # All values ending with the given string.
  tan_ends_with: String
  # All values not ending with the given string.
  tan_not_ends_with: String
  green: String
  # All values that are not equal to given value.
  green_not: String
  # All values that are contained in given list.
  green_in: [String!]
  # All values that are not contained in given list.
  green_not_in: [String!]
  # All values less than the given value.
  green_lt: String
  # All values less than or equal the given value.
  green_lte: String
  # All values greater than the given value.
  green_gt: String
  # All values greater than or equal the given value.
  green_gte: String
  # All values containing the given string.
  green_contains: String
  # All values not containing the given string.
  green_not_contains: String
  # All values starting with the given string.
  green_starts_with: String
  # All values not starting with the given string.
  green_not_starts_with: String
  # All values ending with the given string.
  green_ends_with: String
  # All values not ending with the given string.
  green_not_ends_with: String
  yellow_every: VoyatouchWhereInput
  yellow_some: VoyatouchWhereInput
  yellow_none: VoyatouchWhereInput
}

input BigtaxWhereUniqueInput {
  id: ID
  gold: String
}

enum Blick {
  IPSA
  EXPLICABO
  QUI
  IN
}

type Color implements Node {
  updatedAt: DateTime!
  createdAt: DateTime!
  id: ID!
}

# A connection to a list of items.
type ColorConnection {
  # Information to aid in pagination.
  pageInfo: PageInfo!
  # A list of edges.
  edges: [ColorEdge]!
  aggregate: AggregateColor!
}

# An edge in a connection.
type ColorEdge {
  # The item at the end of the edge.
  node: Color!
  # A cursor for use in pagination.
  cursor: String!
}

enum ColorOrderByInput {
  updatedAt_ASC
  updatedAt_DESC
  createdAt_ASC
  createdAt_DESC
  id_ASC
  id_DESC
}

type ColorPreviousValues {
  updatedAt: DateTime!
  createdAt: DateTime!
  id: ID!
}

type ColorSubscriptionPayload {
  mutation: MutationType!
  node: Color
  updatedFields: [String!]
  previousValues: ColorPreviousValues
}

input ColorSubscriptionWhereInput {
  # Logical AND on all given filters.
  AND: [ColorSubscriptionWhereInput!]
  # Logical OR on all given filters.
  OR: [ColorSubscriptionWhereInput!]
  # Logical NOT on all given filters combined by AND.
  NOT: [ColorSubscriptionWhereInput!]
  # The subscription event gets dispatched when it's listed in mutation_in
  mutation_in: [MutationType!]
  # The subscription event gets only dispatched when one of the updated fields names is included in this list
  updatedFields_contains: String
  # The subscription event gets only dispatched when all of the field names included in this list have been updated
  updatedFields_contains_every: [String!]
  # The subscription event gets only dispatched when some of the field names included in this list have been updated
  updatedFields_contains_some: [String!]
  node: ColorWhereInput
}

input ColorWhereInput {
  # Logical AND on all given filters.
  AND: [ColorWhereInput!]
  # Logical OR on all given filters.
  OR: [ColorWhereInput!]
  # Logical NOT on all given filters combined by AND.
  NOT: [ColorWhereInput!]
  updatedAt: DateTime
  # All values that are not equal to given value.
  updatedAt_not: DateTime
  # All values that are contained in given list.
  updatedAt_in: [DateTime!]
  # All values that are not contained in given list.
  updatedAt_not_in: [DateTime!]
  # All values less than the given value.
  updatedAt_lt: DateTime
  # All values less than or equal the given value.
  updatedAt_lte: DateTime
  # All values greater than the given value.
  updatedAt_gt: DateTime
  # All values greater than or equal the given value.
  updatedAt_gte: DateTime
  createdAt: DateTime
  # All values that are not equal to given value.
  createdAt_not: DateTime
  # All values that are contained in given list.
  createdAt_in: [DateTime!]
  # All values that are not contained in given list.
  createdAt_not_in: [DateTime!]
  # All values less than the given value.
  createdAt_lt: DateTime
  # All values less than or equal the given value.
  createdAt_lte: DateTime
  # All values greater than the given value.
  createdAt_gt: DateTime
  # All values greater than or equal the given value.
  createdAt_gte: DateTime
  id: ID
  # All values that are not equal to given value.
  id_not: ID
  # All values that are contained in given list.
  id_in: [ID!]
  # All values that are not contained in given list.
  id_not_in: [ID!]
  # All values less than the given value.
  id_lt: ID
  # All values less than or equal the given value.
  id_lte: ID
  # All values greater than the given value.
  id_gt: ID
  # All values greater than or equal the given value.
  id_gte: ID
  # All values containing the given string.
  id_contains: ID
  # All values not containing the given string.
  id_not_contains: ID
  # All values starting with the given string.
  id_starts_with: ID
  # All values not starting with the given string.
  id_not_starts_with: ID
  # All values ending with the given string.
  id_ends_with: ID
  # All values not ending with the given string.
  id_not_ends_with: ID
}

input ColorWhereUniqueInput {
  id: ID
}

enum Connelly {
  ZERO
  ONE
  TWO
}

type Daltfresh implements Node {
  status: Status!
  updatedAt: DateTime!
  createdAt: DateTime!
  id: ID!
  maroon: Asset
  lime: String!
  orchid: String!
  tan: String
  plum: String
  grey: Lotlux
  ivory: Boolean
}

# A connection to a list of items.
type DaltfreshConnection {
  # Information to aid in pagination.
  pageInfo: PageInfo!
  # A list of edges.
  edges: [DaltfreshEdge]!
  aggregate: AggregateDaltfresh!
}

input DaltfreshCreateInput {
  status: Status
  lime: String!
  orchid: String!
  tan: String
  plum: String
  ivory: Boolean
  maroon: AssetCreateOneWithoutMaroonDaltfreshInput
  grey: LotluxCreateOneWithoutSilverInput
}

input DaltfreshCreateManyWithoutGreyInput {
  create: [DaltfreshCreateWithoutGreyInput!]
  connect: [DaltfreshWhereUniqueInput!]
}

input DaltfreshCreateManyWithoutMaroonInput {
  create: [DaltfreshCreateWithoutMaroonInput!]
  connect: [DaltfreshWhereUniqueInput!]
}

input DaltfreshCreateWithoutGreyInput {
  status: Status
  lime: String!
  orchid: String!
  tan: String
  plum: String
  ivory: Boolean
  maroon: AssetCreateOneWithoutMaroonDaltfreshInput
}

input DaltfreshCreateWithoutMaroonInput {
  status: Status
  lime: String!
  orchid: String!
  tan: String
  plum: String
  ivory: Boolean
  grey: LotluxCreateOneWithoutSilverInput
}

# An edge in a connection.
type DaltfreshEdge {
  # The item at the end of the edge.
  node: Daltfresh!
  # A cursor for use in pagination.
  cursor: String!
}

enum DaltfreshOrderByInput {
  status_ASC
  status_DESC
  updatedAt_ASC
  updatedAt_DESC
  createdAt_ASC
  createdAt_DESC
  id_ASC
  id_DESC
  lime_ASC
  lime_DESC
  orchid_ASC
  orchid_DESC
  tan_ASC
  tan_DESC
  plum_ASC
  plum_DESC
  ivory_ASC
  ivory_DESC
}

type DaltfreshPreviousValues {
  status: Status!
  updatedAt: DateTime!
  createdAt: DateTime!
  id: ID!
  lime: String!
  orchid: String!
  tan: String
  plum: String
  ivory: Boolean
}

input DaltfreshScalarWhereInput {
  # Logical AND on all given filters.
  AND: [DaltfreshScalarWhereInput!]
  # Logical OR on all given filters.
  OR: [DaltfreshScalarWhereInput!]
  # Logical NOT on all given filters combined by AND.
  NOT: [DaltfreshScalarWhereInput!]
  status: Status
  # All values that are not equal to given value.
  status_not: Status
  # All values that are contained in given list.
  status_in: [Status!]
  # All values that are not contained in given list.
  status_not_in: [Status!]
  updatedAt: DateTime
  # All values that are not equal to given value.
  updatedAt_not: DateTime
  # All values that are contained in given list.
  updatedAt_in: [DateTime!]
  # All values that are not contained in given list.
  updatedAt_not_in: [DateTime!]
  # All values less than the given value.
  updatedAt_lt: DateTime
  # All values less than or equal the given value.
  updatedAt_lte: DateTime
  # All values greater than the given value.
  updatedAt_gt: DateTime
  # All values greater than or equal the given value.
  updatedAt_gte: DateTime
  createdAt: DateTime
  # All values that are not equal to given value.
  createdAt_not: DateTime
  # All values that are contained in given list.
  createdAt_in: [DateTime!]
  # All values that are not contained in given list.
  createdAt_not_in: [DateTime!]
  # All values less than the given value.
  createdAt_lt: DateTime
  # All values less than or equal the given value.
  createdAt_lte: DateTime
  # All values greater than the given value.
  createdAt_gt: DateTime
  # All values greater than or equal the given value.
  createdAt_gte: DateTime
  id: ID
  # All values that are not equal to given value.
  id_not: ID
  # All values that are contained in given list.
  id_in: [ID!]
  # All values that are not contained in given list.
  id_not_in: [ID!]
  # All values less than the given value.
  id_lt: ID
  # All values less than or equal the given value.
  id_lte: ID
  # All values greater than the given value.
  id_gt: ID
  # All values greater than or equal the given value.
  id_gte: ID
  # All values containing the given string.
  id_contains: ID
  # All values not containing the given string.
  id_not_contains: ID
  # All values starting with the given string.
  id_starts_with: ID
  # All values not starting with the given string.
  id_not_starts_with: ID
  # All values ending with the given string.
  id_ends_with: ID
  # All values not ending with the given string.
  id_not_ends_with: ID
  lime: String
  # All values that are not equal to given value.
  lime_not: String
  # All values that are contained in given list.
  lime_in: [String!]
  # All values that are not contained in given list.
  lime_not_in: [String!]
  # All values less than the given value.
  lime_lt: String
  # All values less than or equal the given value.
  lime_lte: String
  # All values greater than the given value.
  lime_gt: String
  # All values greater than or equal the given value.
  lime_gte: String
  # All values containing the given string.
  lime_contains: String
  # All values not containing the given string.
  lime_not_contains: String
  # All values starting with the given string.
  lime_starts_with: String
  # All values not starting with the given string.
  lime_not_starts_with: String
  # All values ending with the given string.
  lime_ends_with: String
  # All values not ending with the given string.
  lime_not_ends_with: String
  orchid: String
  # All values that are not equal to given value.
  orchid_not: String
  # All values that are contained in given list.
  orchid_in: [String!]
  # All values that are not contained in given list.
  orchid_not_in: [String!]
  # All values less than the given value.
  orchid_lt: String
  # All values less than or equal the given value.
  orchid_lte: String
  # All values greater than the given value.
  orchid_gt: String
  # All values greater than or equal the given value.
  orchid_gte: String
  # All values containing the given string.
  orchid_contains: String
  # All values not containing the given string.
  orchid_not_contains: String
  # All values starting with the given string.
  orchid_starts_with: String
  # All values not starting with the given string.
  orchid_not_starts_with: String
  # All values ending with the given string.
  orchid_ends_with: String
  # All values not ending with the given string.
  orchid_not_ends_with: String
  tan: String
  # All values that are not equal to given value.
  tan_not: String
  # All values that are contained in given list.
  tan_in: [String!]
  # All values that are not contained in given list.
  tan_not_in: [String!]
  # All values less than the given value.
  tan_lt: String
  # All values less than or equal the given value.
  tan_lte: String
  # All values greater than the given value.
  tan_gt: String
  # All values greater than or equal the given value.
  tan_gte: String
  # All values containing the given string.
  tan_contains: String
  # All values not containing the given string.
  tan_not_contains: String
  # All values starting with the given string.
  tan_starts_with: String
  # All values not starting with the given string.
  tan_not_starts_with: String
  # All values ending with the given string.
  tan_ends_with: String
  # All values not ending with the given string.
  tan_not_ends_with: String
  plum: String
  # All values that are not equal to given value.
  plum_not: String
  # All values that are contained in given list.
  plum_in: [String!]
  # All values that are not contained in given list.
  plum_not_in: [String!]
  # All values less than the given value.
  plum_lt: String
  # All values less than or equal the given value.
  plum_lte: String
  # All values greater than the given value.
  plum_gt: String
  # All values greater than or equal the given value.
  plum_gte: String
  # All values containing the given string.
  plum_contains: String
  # All values not containing the given string.
  plum_not_contains: String
  # All values starting with the given string.
  plum_starts_with: String
  # All values not starting with the given string.
  plum_not_starts_with: String
  # All values ending with the given string.
  plum_ends_with: String
  # All values not ending with the given string.
  plum_not_ends_with: String
  ivory: Boolean
  # All values that are not equal to given value.
  ivory_not: Boolean
}

type DaltfreshSubscriptionPayload {
  mutation: MutationType!
  node: Daltfresh
  updatedFields: [String!]
  previousValues: DaltfreshPreviousValues
}

input DaltfreshSubscriptionWhereInput {
  # Logical AND on all given filters.
  AND: [DaltfreshSubscriptionWhereInput!]
  # Logical OR on all given filters.
  OR: [DaltfreshSubscriptionWhereInput!]
  # Logical NOT on all given filters combined by AND.
  NOT: [DaltfreshSubscriptionWhereInput!]
  # The subscription event gets dispatched when it's listed in mutation_in
  mutation_in: [MutationType!]
  # The subscription event gets only dispatched when one of the updated fields names is included in this list
  updatedFields_contains: String
  # The subscription event gets only dispatched when all of the field names included in this list have been updated
  updatedFields_contains_every: [String!]
  # The subscription event gets only dispatched when some of the field names included in this list have been updated
  updatedFields_contains_some: [String!]
  node: DaltfreshWhereInput
}

input DaltfreshUpdateInput {
  status: Status
  lime: String
  orchid: String
  tan: String
  plum: String
  ivory: Boolean
  maroon: AssetUpdateOneWithoutMaroonDaltfreshInput
  grey: LotluxUpdateOneWithoutSilverInput
}

input DaltfreshUpdateManyDataInput {
  status: Status
  lime: String
  orchid: String
  tan: String
  plum: String
  ivory: Boolean
}

input DaltfreshUpdateManyMutationInput {
  status: Status
  lime: String
  orchid: String
  tan: String
  plum: String
  ivory: Boolean
}

input DaltfreshUpdateManyWithoutGreyInput {
  create: [DaltfreshCreateWithoutGreyInput!]
  connect: [DaltfreshWhereUniqueInput!]
  set: [DaltfreshWhereUniqueInput!]
  disconnect: [DaltfreshWhereUniqueInput!]
  delete: [DaltfreshWhereUniqueInput!]
  update: [DaltfreshUpdateWithWhereUniqueWithoutGreyInput!]
  updateMany: [DaltfreshUpdateManyWithWhereNestedInput!]
  deleteMany: [DaltfreshScalarWhereInput!]
  upsert: [DaltfreshUpsertWithWhereUniqueWithoutGreyInput!]
}

input DaltfreshUpdateManyWithoutMaroonInput {
  create: [DaltfreshCreateWithoutMaroonInput!]
  connect: [DaltfreshWhereUniqueInput!]
  set: [DaltfreshWhereUniqueInput!]
  disconnect: [DaltfreshWhereUniqueInput!]
  delete: [DaltfreshWhereUniqueInput!]
  update: [DaltfreshUpdateWithWhereUniqueWithoutMaroonInput!]
  updateMany: [DaltfreshUpdateManyWithWhereNestedInput!]
  deleteMany: [DaltfreshScalarWhereInput!]
  upsert: [DaltfreshUpsertWithWhereUniqueWithoutMaroonInput!]
}

input DaltfreshUpdateManyWithWhereNestedInput {
  where: DaltfreshScalarWhereInput!
  data: DaltfreshUpdateManyDataInput!
}

input DaltfreshUpdateWithoutGreyDataInput {
  status: Status
  lime: String
  orchid: String
  tan: String
  plum: String
  ivory: Boolean
  maroon: AssetUpdateOneWithoutMaroonDaltfreshInput
}

input DaltfreshUpdateWithoutMaroonDataInput {
  status: Status
  lime: String
  orchid: String
  tan: String
  plum: String
  ivory: Boolean
  grey: LotluxUpdateOneWithoutSilverInput
}

input DaltfreshUpdateWithWhereUniqueWithoutGreyInput {
  where: DaltfreshWhereUniqueInput!
  data: DaltfreshUpdateWithoutGreyDataInput!
}

input DaltfreshUpdateWithWhereUniqueWithoutMaroonInput {
  where: DaltfreshWhereUniqueInput!
  data: DaltfreshUpdateWithoutMaroonDataInput!
}

input DaltfreshUpsertWithWhereUniqueWithoutGreyInput {
  where: DaltfreshWhereUniqueInput!
  update: DaltfreshUpdateWithoutGreyDataInput!
  create: DaltfreshCreateWithoutGreyInput!
}

input DaltfreshUpsertWithWhereUniqueWithoutMaroonInput {
  where: DaltfreshWhereUniqueInput!
  update: DaltfreshUpdateWithoutMaroonDataInput!
  create: DaltfreshCreateWithoutMaroonInput!
}

input DaltfreshWhereInput {
  # Logical AND on all given filters.
  AND: [DaltfreshWhereInput!]
  # Logical OR on all given filters.
  OR: [DaltfreshWhereInput!]
  # Logical NOT on all given filters combined by AND.
  NOT: [DaltfreshWhereInput!]
  status: Status
  # All values that are not equal to given value.
  status_not: Status
  # All values that are contained in given list.
  status_in: [Status!]
  # All values that are not contained in given list.
  status_not_in: [Status!]
  updatedAt: DateTime
  # All values that are not equal to given value.
  updatedAt_not: DateTime
  # All values that are contained in given list.
  updatedAt_in: [DateTime!]
  # All values that are not contained in given list.
  updatedAt_not_in: [DateTime!]
  # All values less than the given value.
  updatedAt_lt: DateTime
  # All values less than or equal the given value.
  updatedAt_lte: DateTime
  # All values greater than the given value.
  updatedAt_gt: DateTime
  # All values greater than or equal the given value.
  updatedAt_gte: DateTime
  createdAt: DateTime
  # All values that are not equal to given value.
  createdAt_not: DateTime
  # All values that are contained in given list.
  createdAt_in: [DateTime!]
  # All values that are not contained in given list.
  createdAt_not_in: [DateTime!]
  # All values less than the given value.
  createdAt_lt: DateTime
  # All values less than or equal the given value.
  createdAt_lte: DateTime
  # All values greater than the given value.
  createdAt_gt: DateTime
  # All values greater than or equal the given value.
  createdAt_gte: DateTime
  id: ID
  # All values that are not equal to given value.
  id_not: ID
  # All values that are contained in given list.
  id_in: [ID!]
  # All values that are not contained in given list.
  id_not_in: [ID!]
  # All values less than the given value.
  id_lt: ID
  # All values less than or equal the given value.
  id_lte: ID
  # All values greater than the given value.
  id_gt: ID
  # All values greater than or equal the given value.
  id_gte: ID
  # All values containing the given string.
  id_contains: ID
  # All values not containing the given string.
  id_not_contains: ID
  # All values starting with the given string.
  id_starts_with: ID
  # All values not starting with the given string.
  id_not_starts_with: ID
  # All values ending with the given string.
  id_ends_with: ID
  # All values not ending with the given string.
  id_not_ends_with: ID
  lime: String
  # All values that are not equal to given value.
  lime_not: String
  # All values that are contained in given list.
  lime_in: [String!]
  # All values that are not contained in given list.
  lime_not_in: [String!]
  # All values less than the given value.
  lime_lt: String
  # All values less than or equal the given value.
  lime_lte: String
  # All values greater than the given value.
  lime_gt: String
  # All values greater than or equal the given value.
  lime_gte: String
  # All values containing the given string.
  lime_contains: String
  # All values not containing the given string.
  lime_not_contains: String
  # All values starting with the given string.
  lime_starts_with: String
  # All values not starting with the given string.
  lime_not_starts_with: String
  # All values ending with the given string.
  lime_ends_with: String
  # All values not ending with the given string.
  lime_not_ends_with: String
  orchid: String
  # All values that are not equal to given value.
  orchid_not: String
  # All values that are contained in given list.
  orchid_in: [String!]
  # All values that are not contained in given list.
  orchid_not_in: [String!]
  # All values less than the given value.
  orchid_lt: String
  # All values less than or equal the given value.
  orchid_lte: String
  # All values greater than the given value.
  orchid_gt: String
  # All values greater than or equal the given value.
  orchid_gte: String
  # All values containing the given string.
  orchid_contains: String
  # All values not containing the given string.
  orchid_not_contains: String
  # All values starting with the given string.
  orchid_starts_with: String
  # All values not starting with the given string.
  orchid_not_starts_with: String
  # All values ending with the given string.
  orchid_ends_with: String
  # All values not ending with the given string.
  orchid_not_ends_with: String
  tan: String
  # All values that are not equal to given value.
  tan_not: String
  # All values that are contained in given list.
  tan_in: [String!]
  # All values that are not contained in given list.
  tan_not_in: [String!]
  # All values less than the given value.
  tan_lt: String
  # All values less than or equal the given value.
  tan_lte: String
  # All values greater than the given value.
  tan_gt: String
  # All values greater than or equal the given value.
  tan_gte: String
  # All values containing the given string.
  tan_contains: String
  # All values not containing the given string.
  tan_not_contains: String
  # All values starting with the given string.
  tan_starts_with: String
  # All values not starting with the given string.
  tan_not_starts_with: String
  # All values ending with the given string.
  tan_ends_with: String
  # All values not ending with the given string.
  tan_not_ends_with: String
  plum: String
  # All values that are not equal to given value.
  plum_not: String
  # All values that are contained in given list.
  plum_in: [String!]
  # All values that are not contained in given list.
  plum_not_in: [String!]
  # All values less than the given value.
  plum_lt: String
  # All values less than or equal the given value.
  plum_lte: String
  # All values greater than the given value.
  plum_gt: String
  # All values greater than or equal the given value.
  plum_gte: String
  # All values containing the given string.
  plum_contains: String
  # All values not containing the given string.
  plum_not_contains: String
  # All values starting with the given string.
  plum_starts_with: String
  # All values not starting with the given string.
  plum_not_starts_with: String
  # All values ending with the given string.
  plum_ends_with: String
  # All values not ending with the given string.
  plum_not_ends_with: String
  ivory: Boolean
  # All values that are not equal to given value.
  ivory_not: Boolean
  maroon: AssetWhereInput
  grey: LotluxWhereInput
}

input DaltfreshWhereUniqueInput {
  id: ID
}

scalar DateTime

enum Daugherty {
  ZERO
  ONE
  TWO
  THREE
  FOUR
  FIVE
  SIX
  SEVEN
  EIGHT
  NINE
  TEN
  ELEVEN
  TWELVE
  THIRTEEN
  FOURTEEN
  FIFTEEN
  SIXTEEN
  SEVENTEEN
  EIGHTEEN
  NINETEEN
  TWENTY
  TWENTY_ONE
  TWENTY_TWO
  TWENTY_THREE
  TWENTY_FOUR
  TWENTY_FIVE
  TWENTY_SIX
  TWENTY_SEVEN
}

enum DocumentFileTypes {
  jpg
  odp
  ods
  odt
  png
  svg
  txt
  webp
  docx
  html
  pdf
  doc
  xlsx
  xls
  pptx
  ppt
}

input DocumentOutputInput {
  # Transforms a document into a desired file type.
  # See this matrix for format support:
  #
  # PDF:	jpg, odp, ods, odt, png, svg, txt, and webp
  # DOC:	docx, html, jpg, odt, pdf, png, svg, txt, and webp
  # DOCX:	doc, html, jpg, odt, pdf, png, svg, txt, and webp
  # ODT:	doc, docx, html, jpg, pdf, png, svg, txt, and webp
  # XLS:	jpg, pdf, ods, png, svg, xlsx, and webp
  # XLSX:	jpg, pdf, ods, png, svg, xls, and webp
  # ODS:	jpg, pdf, png, xls, svg, xlsx, and webp
  # PPT:	jpg, odp, pdf, png, svg, pptx, and webp
  # PPTX:	jpg, odp, pdf, png, svg, ppt, and webp
  # ODP:	jpg, pdf, png, ppt, svg, pptx, and webp
  # BMP:	jpg, odp, ods, odt, pdf, png, svg, and webp
  # GIF:	jpg, odp, ods, odt, pdf, png, svg, and webp
  # JPG:	jpg, odp, ods, odt, pdf, png, svg, and webp
  # PNG:	jpg, odp, ods, odt, pdf, png, svg, and webp
  # WEBP:	jpg, odp, ods, odt, pdf, png, svg, and webp
  # TIFF:	jpg, odp, ods, odt, pdf, png, svg, and webp
  # AI:	    jpg, odp, ods, odt, pdf, png, svg, and webp
  # PSD:	jpg, odp, ods, odt, pdf, png, svg, and webp
  # SVG:	jpg, odp, ods, odt, pdf, png, and webp
  # HTML:	jpg, odt, pdf, svg, txt, and webp
  # TXT:	jpg, html, odt, pdf, svg, and webp
  format: DocumentFileTypes
}

# Transformations for Documents
input DocumentTransformationInput {
  # Changes the output for the file.
  output: DocumentOutputInput
}

enum Harris {
  ZERO
  ONE
  TWO
  THREE
  FOUR
  FIVE
  SIX
  SEVEN
  EIGHT
  NINE
  TEN
  ELEVEN
  TWELVE
  THIRTEEN
}

type Hatity implements Node {
  status: Status!
  updatedAt: DateTime!
  createdAt: DateTime!
  id: ID!
  orchid: String
  purple: String!
  grey: Boolean
  turquoise(
    where: RedholdWhereInput
    orderBy: RedholdOrderByInput
    skip: Int
    after: String
    before: String
    first: Int
    last: Int
  ): [Redhold!]
  white: Connelly!
  cyan: String
  gold: String
  plum: String
  magenta: String
}

# A connection to a list of items.
type HatityConnection {
  # Information to aid in pagination.
  pageInfo: PageInfo!
  # A list of edges.
  edges: [HatityEdge]!
  aggregate: AggregateHatity!
}

input HatityCreateInput {
  status: Status
  orchid: String
  purple: String!
  grey: Boolean
  white: Connelly!
  cyan: String
  gold: String
  plum: String
  magenta: String
  turquoise: RedholdCreateManyWithoutOliveInput
}

input HatityCreateOneWithoutTurquoiseInput {
  create: HatityCreateWithoutTurquoiseInput
  connect: HatityWhereUniqueInput
}

input HatityCreateWithoutTurquoiseInput {
  status: Status
  orchid: String
  purple: String!
  grey: Boolean
  white: Connelly!
  cyan: String
  gold: String
  plum: String
  magenta: String
}

# An edge in a connection.
type HatityEdge {
  # The item at the end of the edge.
  node: Hatity!
  # A cursor for use in pagination.
  cursor: String!
}

enum HatityOrderByInput {
  status_ASC
  status_DESC
  updatedAt_ASC
  updatedAt_DESC
  createdAt_ASC
  createdAt_DESC
  id_ASC
  id_DESC
  orchid_ASC
  orchid_DESC
  purple_ASC
  purple_DESC
  grey_ASC
  grey_DESC
  white_ASC
  white_DESC
  cyan_ASC
  cyan_DESC
  gold_ASC
  gold_DESC
  plum_ASC
  plum_DESC
  magenta_ASC
  magenta_DESC
}

type HatityPreviousValues {
  status: Status!
  updatedAt: DateTime!
  createdAt: DateTime!
  id: ID!
  orchid: String
  purple: String!
  grey: Boolean
  white: Connelly!
  cyan: String
  gold: String
  plum: String
  magenta: String
}

type HatitySubscriptionPayload {
  mutation: MutationType!
  node: Hatity
  updatedFields: [String!]
  previousValues: HatityPreviousValues
}

input HatitySubscriptionWhereInput {
  # Logical AND on all given filters.
  AND: [HatitySubscriptionWhereInput!]
  # Logical OR on all given filters.
  OR: [HatitySubscriptionWhereInput!]
  # Logical NOT on all given filters combined by AND.
  NOT: [HatitySubscriptionWhereInput!]
  # The subscription event gets dispatched when it's listed in mutation_in
  mutation_in: [MutationType!]
  # The subscription event gets only dispatched when one of the updated fields names is included in this list
  updatedFields_contains: String
  # The subscription event gets only dispatched when all of the field names included in this list have been updated
  updatedFields_contains_every: [String!]
  # The subscription event gets only dispatched when some of the field names included in this list have been updated
  updatedFields_contains_some: [String!]
  node: HatityWhereInput
}

input HatityUpdateInput {
  status: Status
  orchid: String
  purple: String
  grey: Boolean
  white: Connelly
  cyan: String
  gold: String
  plum: String
  magenta: String
  turquoise: RedholdUpdateManyWithoutOliveInput
}

input HatityUpdateManyMutationInput {
  status: Status
  orchid: String
  purple: String
  grey: Boolean
  white: Connelly
  cyan: String
  gold: String
  plum: String
  magenta: String
}

input HatityUpdateOneWithoutTurquoiseInput {
  create: HatityCreateWithoutTurquoiseInput
  connect: HatityWhereUniqueInput
  disconnect: Boolean
  delete: Boolean
  update: HatityUpdateWithoutTurquoiseDataInput
  upsert: HatityUpsertWithoutTurquoiseInput
}

input HatityUpdateWithoutTurquoiseDataInput {
  status: Status
  orchid: String
  purple: String
  grey: Boolean
  white: Connelly
  cyan: String
  gold: String
  plum: String
  magenta: String
}

input HatityUpsertWithoutTurquoiseInput {
  update: HatityUpdateWithoutTurquoiseDataInput!
  create: HatityCreateWithoutTurquoiseInput!
}

input HatityWhereInput {
  # Logical AND on all given filters.
  AND: [HatityWhereInput!]
  # Logical OR on all given filters.
  OR: [HatityWhereInput!]
  # Logical NOT on all given filters combined by AND.
  NOT: [HatityWhereInput!]
  status: Status
  # All values that are not equal to given value.
  status_not: Status
  # All values that are contained in given list.
  status_in: [Status!]
  # All values that are not contained in given list.
  status_not_in: [Status!]
  updatedAt: DateTime
  # All values that are not equal to given value.
  updatedAt_not: DateTime
  # All values that are contained in given list.
  updatedAt_in: [DateTime!]
  # All values that are not contained in given list.
  updatedAt_not_in: [DateTime!]
  # All values less than the given value.
  updatedAt_lt: DateTime
  # All values less than or equal the given value.
  updatedAt_lte: DateTime
  # All values greater than the given value.
  updatedAt_gt: DateTime
  # All values greater than or equal the given value.
  updatedAt_gte: DateTime
  createdAt: DateTime
  # All values that are not equal to given value.
  createdAt_not: DateTime
  # All values that are contained in given list.
  createdAt_in: [DateTime!]
  # All values that are not contained in given list.
  createdAt_not_in: [DateTime!]
  # All values less than the given value.
  createdAt_lt: DateTime
  # All values less than or equal the given value.
  createdAt_lte: DateTime
  # All values greater than the given value.
  createdAt_gt: DateTime
  # All values greater than or equal the given value.
  createdAt_gte: DateTime
  id: ID
  # All values that are not equal to given value.
  id_not: ID
  # All values that are contained in given list.
  id_in: [ID!]
  # All values that are not contained in given list.
  id_not_in: [ID!]
  # All values less than the given value.
  id_lt: ID
  # All values less than or equal the given value.
  id_lte: ID
  # All values greater than the given value.
  id_gt: ID
  # All values greater than or equal the given value.
  id_gte: ID
  # All values containing the given string.
  id_contains: ID
  # All values not containing the given string.
  id_not_contains: ID
  # All values starting with the given string.
  id_starts_with: ID
  # All values not starting with the given string.
  id_not_starts_with: ID
  # All values ending with the given string.
  id_ends_with: ID
  # All values not ending with the given string.
  id_not_ends_with: ID
  orchid: String
  # All values that are not equal to given value.
  orchid_not: String
  # All values that are contained in given list.
  orchid_in: [String!]
  # All values that are not contained in given list.
  orchid_not_in: [String!]
  # All values less than the given value.
  orchid_lt: String
  # All values less than or equal the given value.
  orchid_lte: String
  # All values greater than the given value.
  orchid_gt: String
  # All values greater than or equal the given value.
  orchid_gte: String
  # All values containing the given string.
  orchid_contains: String
  # All values not containing the given string.
  orchid_not_contains: String
  # All values starting with the given string.
  orchid_starts_with: String
  # All values not starting with the given string.
  orchid_not_starts_with: String
  # All values ending with the given string.
  orchid_ends_with: String
  # All values not ending with the given string.
  orchid_not_ends_with: String
  purple: String
  # All values that are not equal to given value.
  purple_not: String
  # All values that are contained in given list.
  purple_in: [String!]
  # All values that are not contained in given list.
  purple_not_in: [String!]
  # All values less than the given value.
  purple_lt: String
  # All values less than or equal the given value.
  purple_lte: String
  # All values greater than the given value.
  purple_gt: String
  # All values greater than or equal the given value.
  purple_gte: String
  # All values containing the given string.
  purple_contains: String
  # All values not containing the given string.
  purple_not_contains: String
  # All values starting with the given string.
  purple_starts_with: String
  # All values not starting with the given string.
  purple_not_starts_with: String
  # All values ending with the given string.
  purple_ends_with: String
  # All values not ending with the given string.
  purple_not_ends_with: String
  grey: Boolean
  # All values that are not equal to given value.
  grey_not: Boolean
  white: Connelly
  # All values that are not equal to given value.
  white_not: Connelly
  # All values that are contained in given list.
  white_in: [Connelly!]
  # All values that are not contained in given list.
  white_not_in: [Connelly!]
  cyan: String
  # All values that are not equal to given value.
  cyan_not: String
  # All values that are contained in given list.
  cyan_in: [String!]
  # All values that are not contained in given list.
  cyan_not_in: [String!]
  # All values less than the given value.
  cyan_lt: String
  # All values less than or equal the given value.
  cyan_lte: String
  # All values greater than the given value.
  cyan_gt: String
  # All values greater than or equal the given value.
  cyan_gte: String
  # All values containing the given string.
  cyan_contains: String
  # All values not containing the given string.
  cyan_not_contains: String
  # All values starting with the given string.
  cyan_starts_with: String
  # All values not starting with the given string.
  cyan_not_starts_with: String
  # All values ending with the given string.
  cyan_ends_with: String
  # All values not ending with the given string.
  cyan_not_ends_with: String
  gold: String
  # All values that are not equal to given value.
  gold_not: String
  # All values that are contained in given list.
  gold_in: [String!]
  # All values that are not contained in given list.
  gold_not_in: [String!]
  # All values less than the given value.
  gold_lt: String
  # All values less than or equal the given value.
  gold_lte: String
  # All values greater than the given value.
  gold_gt: String
  # All values greater than or equal the given value.
  gold_gte: String
  # All values containing the given string.
  gold_contains: String
  # All values not containing the given string.
  gold_not_contains: String
  # All values starting with the given string.
  gold_starts_with: String
  # All values not starting with the given string.
  gold_not_starts_with: String
  # All values ending with the given string.
  gold_ends_with: String
  # All values not ending with the given string.
  gold_not_ends_with: String
  plum: String
  # All values that are not equal to given value.
  plum_not: String
  # All values that are contained in given list.
  plum_in: [String!]
  # All values that are not contained in given list.
  plum_not_in: [String!]
  # All values less than the given value.
  plum_lt: String
  # All values less than or equal the given value.
  plum_lte: String
  # All values greater than the given value.
  plum_gt: String
  # All values greater than or equal the given value.
  plum_gte: String
  # All values containing the given string.
  plum_contains: String
  # All values not containing the given string.
  plum_not_contains: String
  # All values starting with the given string.
  plum_starts_with: String
  # All values not starting with the given string.
  plum_not_starts_with: String
  # All values ending with the given string.
  plum_ends_with: String
  # All values not ending with the given string.
  plum_not_ends_with: String
  magenta: String
  # All values that are not equal to given value.
  magenta_not: String
  # All values that are contained in given list.
  magenta_in: [String!]
  # All values that are not contained in given list.
  magenta_not_in: [String!]
  # All values less than the given value.
  magenta_lt: String
  # All values less than or equal the given value.
  magenta_lte: String
  # All values greater than the given value.
  magenta_gt: String
  # All values greater than or equal the given value.
  magenta_gte: String
  # All values containing the given string.
  magenta_contains: String
  # All values not containing the given string.
  magenta_not_contains: String
  # All values starting with the given string.
  magenta_starts_with: String
  # All values not starting with the given string.
  magenta_not_starts_with: String
  # All values ending with the given string.
  magenta_ends_with: String
  # All values not ending with the given string.
  magenta_not_ends_with: String
  turquoise_every: RedholdWhereInput
  turquoise_some: RedholdWhereInput
  turquoise_none: RedholdWhereInput
}

input HatityWhereUniqueInput {
  id: ID
  purple: String
}

enum ImageFit {
  # Resizes the image to fit within the specified parameters without distorting, cropping, or changing the aspect ratio.
  clip
  # Resizes the image to fit the specified parameters exactly by removing any
  # parts of the image that don't fit within the boundaries.
  crop
  # Resizes the image to fit the specified parameters exactly by scaling the image
  # to the desired size. The aspect ratio of the image is not respected and the
  # image can be distorted using this method.
  scale
  # Resizes the image to fit within the parameters, but as opposed to 'fit:clip'
  # will not scale the image if the image is smaller than the output size.
  max
}

input ImageResizeInput {
  # The width in pixels to resize the image to. The value must be an integer from 1 to 10000.
  width: Int
  # The height in pixels to resize the image to. The value must be an integer from 1 to 10000.
  height: Int
  # The default value for the fit parameter is fit:clip.
  fit: ImageFit
}

# Transformations for Images
input ImageTransformationInput {
  # Resizes the image
  resize: ImageResizeInput
}

type Job implements Node {
  status: Status!
  updatedAt: DateTime!
  createdAt: DateTime!
  id: ID!
  gold: String
  purple: String
  red: Int
  tan: Zoolab
}

# A connection to a list of items.
type JobConnection {
  # Information to aid in pagination.
  pageInfo: PageInfo!
  # A list of edges.
  edges: [JobEdge]!
  aggregate: AggregateJob!
}

input JobCreateInput {
  status: Status
  gold: String
  purple: String
  red: Int
  tan: ZoolabCreateOneWithoutTanInput
}

input JobCreateManyWithoutTanInput {
  create: [JobCreateWithoutTanInput!]
  connect: [JobWhereUniqueInput!]
}

input JobCreateWithoutTanInput {
  status: Status
  gold: String
  purple: String
  red: Int
}

# An edge in a connection.
type JobEdge {
  # The item at the end of the edge.
  node: Job!
  # A cursor for use in pagination.
  cursor: String!
}

enum JobOrderByInput {
  status_ASC
  status_DESC
  updatedAt_ASC
  updatedAt_DESC
  createdAt_ASC
  createdAt_DESC
  id_ASC
  id_DESC
  gold_ASC
  gold_DESC
  purple_ASC
  purple_DESC
  red_ASC
  red_DESC
}

type JobPreviousValues {
  status: Status!
  updatedAt: DateTime!
  createdAt: DateTime!
  id: ID!
  gold: String
  purple: String
  red: Int
}

input JobScalarWhereInput {
  # Logical AND on all given filters.
  AND: [JobScalarWhereInput!]
  # Logical OR on all given filters.
  OR: [JobScalarWhereInput!]
  # Logical NOT on all given filters combined by AND.
  NOT: [JobScalarWhereInput!]
  status: Status
  # All values that are not equal to given value.
  status_not: Status
  # All values that are contained in given list.
  status_in: [Status!]
  # All values that are not contained in given list.
  status_not_in: [Status!]
  updatedAt: DateTime
  # All values that are not equal to given value.
  updatedAt_not: DateTime
  # All values that are contained in given list.
  updatedAt_in: [DateTime!]
  # All values that are not contained in given list.
  updatedAt_not_in: [DateTime!]
  # All values less than the given value.
  updatedAt_lt: DateTime
  # All values less than or equal the given value.
  updatedAt_lte: DateTime
  # All values greater than the given value.
  updatedAt_gt: DateTime
  # All values greater than or equal the given value.
  updatedAt_gte: DateTime
  createdAt: DateTime
  # All values that are not equal to given value.
  createdAt_not: DateTime
  # All values that are contained in given list.
  createdAt_in: [DateTime!]
  # All values that are not contained in given list.
  createdAt_not_in: [DateTime!]
  # All values less than the given value.
  createdAt_lt: DateTime
  # All values less than or equal the given value.
  createdAt_lte: DateTime
  # All values greater than the given value.
  createdAt_gt: DateTime
  # All values greater than or equal the given value.
  createdAt_gte: DateTime
  id: ID
  # All values that are not equal to given value.
  id_not: ID
  # All values that are contained in given list.
  id_in: [ID!]
  # All values that are not contained in given list.
  id_not_in: [ID!]
  # All values less than the given value.
  id_lt: ID
  # All values less than or equal the given value.
  id_lte: ID
  # All values greater than the given value.
  id_gt: ID
  # All values greater than or equal the given value.
  id_gte: ID
  # All values containing the given string.
  id_contains: ID
  # All values not containing the given string.
  id_not_contains: ID
  # All values starting with the given string.
  id_starts_with: ID
  # All values not starting with the given string.
  id_not_starts_with: ID
  # All values ending with the given string.
  id_ends_with: ID
  # All values not ending with the given string.
  id_not_ends_with: ID
  gold: String
  # All values that are not equal to given value.
  gold_not: String
  # All values that are contained in given list.
  gold_in: [String!]
  # All values that are not contained in given list.
  gold_not_in: [String!]
  # All values less than the given value.
  gold_lt: String
  # All values less than or equal the given value.
  gold_lte: String
  # All values greater than the given value.
  gold_gt: String
  # All values greater than or equal the given value.
  gold_gte: String
  # All values containing the given string.
  gold_contains: String
  # All values not containing the given string.
  gold_not_contains: String
  # All values starting with the given string.
  gold_starts_with: String
  # All values not starting with the given string.
  gold_not_starts_with: String
  # All values ending with the given string.
  gold_ends_with: String
  # All values not ending with the given string.
  gold_not_ends_with: String
  purple: String
  # All values that are not equal to given value.
  purple_not: String
  # All values that are contained in given list.
  purple_in: [String!]
  # All values that are not contained in given list.
  purple_not_in: [String!]
  # All values less than the given value.
  purple_lt: String
  # All values less than or equal the given value.
  purple_lte: String
  # All values greater than the given value.
  purple_gt: String
  # All values greater than or equal the given value.
  purple_gte: String
  # All values containing the given string.
  purple_contains: String
  # All values not containing the given string.
  purple_not_contains: String
  # All values starting with the given string.
  purple_starts_with: String
  # All values not starting with the given string.
  purple_not_starts_with: String
  # All values ending with the given string.
  purple_ends_with: String
  # All values not ending with the given string.
  purple_not_ends_with: String
  red: Int
  # All values that are not equal to given value.
  red_not: Int
  # All values that are contained in given list.
  red_in: [Int!]
  # All values that are not contained in given list.
  red_not_in: [Int!]
  # All values less than the given value.
  red_lt: Int
  # All values less than or equal the given value.
  red_lte: Int
  # All values greater than the given value.
  red_gt: Int
  # All values greater than or equal the given value.
  red_gte: Int
}

type JobSubscriptionPayload {
  mutation: MutationType!
  node: Job
  updatedFields: [String!]
  previousValues: JobPreviousValues
}

input JobSubscriptionWhereInput {
  # Logical AND on all given filters.
  AND: [JobSubscriptionWhereInput!]
  # Logical OR on all given filters.
  OR: [JobSubscriptionWhereInput!]
  # Logical NOT on all given filters combined by AND.
  NOT: [JobSubscriptionWhereInput!]
  # The subscription event gets dispatched when it's listed in mutation_in
  mutation_in: [MutationType!]
  # The subscription event gets only dispatched when one of the updated fields names is included in this list
  updatedFields_contains: String
  # The subscription event gets only dispatched when all of the field names included in this list have been updated
  updatedFields_contains_every: [String!]
  # The subscription event gets only dispatched when some of the field names included in this list have been updated
  updatedFields_contains_some: [String!]
  node: JobWhereInput
}

input JobUpdateInput {
  status: Status
  gold: String
  purple: String
  red: Int
  tan: ZoolabUpdateOneWithoutTanInput
}

input JobUpdateManyDataInput {
  status: Status
  gold: String
  purple: String
  red: Int
}

input JobUpdateManyMutationInput {
  status: Status
  gold: String
  purple: String
  red: Int
}

input JobUpdateManyWithoutTanInput {
  create: [JobCreateWithoutTanInput!]
  connect: [JobWhereUniqueInput!]
  set: [JobWhereUniqueInput!]
  disconnect: [JobWhereUniqueInput!]
  delete: [JobWhereUniqueInput!]
  update: [JobUpdateWithWhereUniqueWithoutTanInput!]
  updateMany: [JobUpdateManyWithWhereNestedInput!]
  deleteMany: [JobScalarWhereInput!]
  upsert: [JobUpsertWithWhereUniqueWithoutTanInput!]
}

input JobUpdateManyWithWhereNestedInput {
  where: JobScalarWhereInput!
  data: JobUpdateManyDataInput!
}

input JobUpdateWithoutTanDataInput {
  status: Status
  gold: String
  purple: String
  red: Int
}

input JobUpdateWithWhereUniqueWithoutTanInput {
  where: JobWhereUniqueInput!
  data: JobUpdateWithoutTanDataInput!
}

input JobUpsertWithWhereUniqueWithoutTanInput {
  where: JobWhereUniqueInput!
  update: JobUpdateWithoutTanDataInput!
  create: JobCreateWithoutTanInput!
}

input JobWhereInput {
  # Logical AND on all given filters.
  AND: [JobWhereInput!]
  # Logical OR on all given filters.
  OR: [JobWhereInput!]
  # Logical NOT on all given filters combined by AND.
  NOT: [JobWhereInput!]
  status: Status
  # All values that are not equal to given value.
  status_not: Status
  # All values that are contained in given list.
  status_in: [Status!]
  # All values that are not contained in given list.
  status_not_in: [Status!]
  updatedAt: DateTime
  # All values that are not equal to given value.
  updatedAt_not: DateTime
  # All values that are contained in given list.
  updatedAt_in: [DateTime!]
  # All values that are not contained in given list.
  updatedAt_not_in: [DateTime!]
  # All values less than the given value.
  updatedAt_lt: DateTime
  # All values less than or equal the given value.
  updatedAt_lte: DateTime
  # All values greater than the given value.
  updatedAt_gt: DateTime
  # All values greater than or equal the given value.
  updatedAt_gte: DateTime
  createdAt: DateTime
  # All values that are not equal to given value.
  createdAt_not: DateTime
  # All values that are contained in given list.
  createdAt_in: [DateTime!]
  # All values that are not contained in given list.
  createdAt_not_in: [DateTime!]
  # All values less than the given value.
  createdAt_lt: DateTime
  # All values less than or equal the given value.
  createdAt_lte: DateTime
  # All values greater than the given value.
  createdAt_gt: DateTime
  # All values greater than or equal the given value.
  createdAt_gte: DateTime
  id: ID
  # All values that are not equal to given value.
  id_not: ID
  # All values that are contained in given list.
  id_in: [ID!]
  # All values that are not contained in given list.
  id_not_in: [ID!]
  # All values less than the given value.
  id_lt: ID
  # All values less than or equal the given value.
  id_lte: ID
  # All values greater than the given value.
  id_gt: ID
  # All values greater than or equal the given value.
  id_gte: ID
  # All values containing the given string.
  id_contains: ID
  # All values not containing the given string.
  id_not_contains: ID
  # All values starting with the given string.
  id_starts_with: ID
  # All values not starting with the given string.
  id_not_starts_with: ID
  # All values ending with the given string.
  id_ends_with: ID
  # All values not ending with the given string.
  id_not_ends_with: ID
  gold: String
  # All values that are not equal to given value.
  gold_not: String
  # All values that are contained in given list.
  gold_in: [String!]
  # All values that are not contained in given list.
  gold_not_in: [String!]
  # All values less than the given value.
  gold_lt: String
  # All values less than or equal the given value.
  gold_lte: String
  # All values greater than the given value.
  gold_gt: String
  # All values greater than or equal the given value.
  gold_gte: String
  # All values containing the given string.
  gold_contains: String
  # All values not containing the given string.
  gold_not_contains: String
  # All values starting with the given string.
  gold_starts_with: String
  # All values not starting with the given string.
  gold_not_starts_with: String
  # All values ending with the given string.
  gold_ends_with: String
  # All values not ending with the given string.
  gold_not_ends_with: String
  purple: String
  # All values that are not equal to given value.
  purple_not: String
  # All values that are contained in given list.
  purple_in: [String!]
  # All values that are not contained in given list.
  purple_not_in: [String!]
  # All values less than the given value.
  purple_lt: String
  # All values less than or equal the given value.
  purple_lte: String
  # All values greater than the given value.
  purple_gt: String
  # All values greater than or equal the given value.
  purple_gte: String
  # All values containing the given string.
  purple_contains: String
  # All values not containing the given string.
  purple_not_contains: String
  # All values starting with the given string.
  purple_starts_with: String
  # All values not starting with the given string.
  purple_not_starts_with: String
  # All values ending with the given string.
  purple_ends_with: String
  # All values not ending with the given string.
  purple_not_ends_with: String
  red: Int
  # All values that are not equal to given value.
  red_not: Int
  # All values that are contained in given list.
  red_in: [Int!]
  # All values that are not contained in given list.
  red_not_in: [Int!]
  # All values less than the given value.
  red_lt: Int
  # All values less than or equal the given value.
  red_lte: Int
  # All values greater than the given value.
  red_gt: Int
  # All values greater than or equal the given value.
  red_gte: Int
  tan: ZoolabWhereInput
}

input JobWhereUniqueInput {
  id: ID
}

type Keylex implements Node {
  status: Status!
  updatedAt: DateTime!
  createdAt: DateTime!
  id: ID!
  ivory: DateTime
  tan: String!
}

# A connection to a list of items.
type KeylexConnection {
  # Information to aid in pagination.
  pageInfo: PageInfo!
  # A list of edges.
  edges: [KeylexEdge]!
  aggregate: AggregateKeylex!
}

input KeylexCreateInput {
  status: Status
  ivory: DateTime
  tan: String!
}

# An edge in a connection.
type KeylexEdge {
  # The item at the end of the edge.
  node: Keylex!
  # A cursor for use in pagination.
  cursor: String!
}

enum KeylexOrderByInput {
  status_ASC
  status_DESC
  updatedAt_ASC
  updatedAt_DESC
  createdAt_ASC
  createdAt_DESC
  id_ASC
  id_DESC
  ivory_ASC
  ivory_DESC
  tan_ASC
  tan_DESC
}

type KeylexPreviousValues {
  status: Status!
  updatedAt: DateTime!
  createdAt: DateTime!
  id: ID!
  ivory: DateTime
  tan: String!
}

type KeylexSubscriptionPayload {
  mutation: MutationType!
  node: Keylex
  updatedFields: [String!]
  previousValues: KeylexPreviousValues
}

input KeylexSubscriptionWhereInput {
  # Logical AND on all given filters.
  AND: [KeylexSubscriptionWhereInput!]
  # Logical OR on all given filters.
  OR: [KeylexSubscriptionWhereInput!]
  # Logical NOT on all given filters combined by AND.
  NOT: [KeylexSubscriptionWhereInput!]
  # The subscription event gets dispatched when it's listed in mutation_in
  mutation_in: [MutationType!]
  # The subscription event gets only dispatched when one of the updated fields names is included in this list
  updatedFields_contains: String
  # The subscription event gets only dispatched when all of the field names included in this list have been updated
  updatedFields_contains_every: [String!]
  # The subscription event gets only dispatched when some of the field names included in this list have been updated
  updatedFields_contains_some: [String!]
  node: KeylexWhereInput
}

input KeylexUpdateInput {
  status: Status
  ivory: DateTime
  tan: String
}

input KeylexUpdateManyMutationInput {
  status: Status
  ivory: DateTime
  tan: String
}

input KeylexWhereInput {
  # Logical AND on all given filters.
  AND: [KeylexWhereInput!]
  # Logical OR on all given filters.
  OR: [KeylexWhereInput!]
  # Logical NOT on all given filters combined by AND.
  NOT: [KeylexWhereInput!]
  status: Status
  # All values that are not equal to given value.
  status_not: Status
  # All values that are contained in given list.
  status_in: [Status!]
  # All values that are not contained in given list.
  status_not_in: [Status!]
  updatedAt: DateTime
  # All values that are not equal to given value.
  updatedAt_not: DateTime
  # All values that are contained in given list.
  updatedAt_in: [DateTime!]
  # All values that are not contained in given list.
  updatedAt_not_in: [DateTime!]
  # All values less than the given value.
  updatedAt_lt: DateTime
  # All values less than or equal the given value.
  updatedAt_lte: DateTime
  # All values greater than the given value.
  updatedAt_gt: DateTime
  # All values greater than or equal the given value.
  updatedAt_gte: DateTime
  createdAt: DateTime
  # All values that are not equal to given value.
  createdAt_not: DateTime
  # All values that are contained in given list.
  createdAt_in: [DateTime!]
  # All values that are not contained in given list.
  createdAt_not_in: [DateTime!]
  # All values less than the given value.
  createdAt_lt: DateTime
  # All values less than or equal the given value.
  createdAt_lte: DateTime
  # All values greater than the given value.
  createdAt_gt: DateTime
  # All values greater than or equal the given value.
  createdAt_gte: DateTime
  id: ID
  # All values that are not equal to given value.
  id_not: ID
  # All values that are contained in given list.
  id_in: [ID!]
  # All values that are not contained in given list.
  id_not_in: [ID!]
  # All values less than the given value.
  id_lt: ID
  # All values less than or equal the given value.
  id_lte: ID
  # All values greater than the given value.
  id_gt: ID
  # All values greater than or equal the given value.
  id_gte: ID
  # All values containing the given string.
  id_contains: ID
  # All values not containing the given string.
  id_not_contains: ID
  # All values starting with the given string.
  id_starts_with: ID
  # All values not starting with the given string.
  id_not_starts_with: ID
  # All values ending with the given string.
  id_ends_with: ID
  # All values not ending with the given string.
  id_not_ends_with: ID
  ivory: DateTime
  # All values that are not equal to given value.
  ivory_not: DateTime
  # All values that are contained in given list.
  ivory_in: [DateTime!]
  # All values that are not contained in given list.
  ivory_not_in: [DateTime!]
  # All values less than the given value.
  ivory_lt: DateTime
  # All values less than or equal the given value.
  ivory_lte: DateTime
  # All values greater than the given value.
  ivory_gt: DateTime
  # All values greater than or equal the given value.
  ivory_gte: DateTime
  tan: String
  # All values that are not equal to given value.
  tan_not: String
  # All values that are contained in given list.
  tan_in: [String!]
  # All values that are not contained in given list.
  tan_not_in: [String!]
  # All values less than the given value.
  tan_lt: String
  # All values less than or equal the given value.
  tan_lte: String
  # All values greater than the given value.
  tan_gt: String
  # All values greater than or equal the given value.
  tan_gte: String
  # All values containing the given string.
  tan_contains: String
  # All values not containing the given string.
  tan_not_contains: String
  # All values starting with the given string.
  tan_starts_with: String
  # All values not starting with the given string.
  tan_not_starts_with: String
  # All values ending with the given string.
  tan_ends_with: String
  # All values not ending with the given string.
  tan_not_ends_with: String
}

input KeylexWhereUniqueInput {
  id: ID
  ivory: DateTime
}

enum King {
  IN
  QUO
  PARIATUR
  FACILIS
  APERIAM
  EVENIET
  SAPIENTE
}

type Konklab implements Node {
  status: Status!
  updatedAt: DateTime!
  createdAt: DateTime!
  id: ID!
  cyan: String
  ivory: String
  yellow: Muller!
  red: String!
}

# A connection to a list of items.
type KonklabConnection {
  # Information to aid in pagination.
  pageInfo: PageInfo!
  # A list of edges.
  edges: [KonklabEdge]!
  aggregate: AggregateKonklab!
}

input KonklabCreateInput {
  status: Status
  cyan: String
  ivory: String
  yellow: Muller!
  red: String!
}

# An edge in a connection.
type KonklabEdge {
  # The item at the end of the edge.
  node: Konklab!
  # A cursor for use in pagination.
  cursor: String!
}

enum KonklabOrderByInput {
  status_ASC
  status_DESC
  updatedAt_ASC
  updatedAt_DESC
  createdAt_ASC
  createdAt_DESC
  id_ASC
  id_DESC
  cyan_ASC
  cyan_DESC
  ivory_ASC
  ivory_DESC
  yellow_ASC
  yellow_DESC
  red_ASC
  red_DESC
}

type KonklabPreviousValues {
  status: Status!
  updatedAt: DateTime!
  createdAt: DateTime!
  id: ID!
  cyan: String
  ivory: String
  yellow: Muller!
  red: String!
}

type KonklabSubscriptionPayload {
  mutation: MutationType!
  node: Konklab
  updatedFields: [String!]
  previousValues: KonklabPreviousValues
}

input KonklabSubscriptionWhereInput {
  # Logical AND on all given filters.
  AND: [KonklabSubscriptionWhereInput!]
  # Logical OR on all given filters.
  OR: [KonklabSubscriptionWhereInput!]
  # Logical NOT on all given filters combined by AND.
  NOT: [KonklabSubscriptionWhereInput!]
  # The subscription event gets dispatched when it's listed in mutation_in
  mutation_in: [MutationType!]
  # The subscription event gets only dispatched when one of the updated fields names is included in this list
  updatedFields_contains: String
  # The subscription event gets only dispatched when all of the field names included in this list have been updated
  updatedFields_contains_every: [String!]
  # The subscription event gets only dispatched when some of the field names included in this list have been updated
  updatedFields_contains_some: [String!]
  node: KonklabWhereInput
}

input KonklabUpdateInput {
  status: Status
  cyan: String
  ivory: String
  yellow: Muller
  red: String
}

input KonklabUpdateManyMutationInput {
  status: Status
  cyan: String
  ivory: String
  yellow: Muller
  red: String
}

input KonklabWhereInput {
  # Logical AND on all given filters.
  AND: [KonklabWhereInput!]
  # Logical OR on all given filters.
  OR: [KonklabWhereInput!]
  # Logical NOT on all given filters combined by AND.
  NOT: [KonklabWhereInput!]
  status: Status
  # All values that are not equal to given value.
  status_not: Status
  # All values that are contained in given list.
  status_in: [Status!]
  # All values that are not contained in given list.
  status_not_in: [Status!]
  updatedAt: DateTime
  # All values that are not equal to given value.
  updatedAt_not: DateTime
  # All values that are contained in given list.
  updatedAt_in: [DateTime!]
  # All values that are not contained in given list.
  updatedAt_not_in: [DateTime!]
  # All values less than the given value.
  updatedAt_lt: DateTime
  # All values less than or equal the given value.
  updatedAt_lte: DateTime
  # All values greater than the given value.
  updatedAt_gt: DateTime
  # All values greater than or equal the given value.
  updatedAt_gte: DateTime
  createdAt: DateTime
  # All values that are not equal to given value.
  createdAt_not: DateTime
  # All values that are contained in given list.
  createdAt_in: [DateTime!]
  # All values that are not contained in given list.
  createdAt_not_in: [DateTime!]
  # All values less than the given value.
  createdAt_lt: DateTime
  # All values less than or equal the given value.
  createdAt_lte: DateTime
  # All values greater than the given value.
  createdAt_gt: DateTime
  # All values greater than or equal the given value.
  createdAt_gte: DateTime
  id: ID
  # All values that are not equal to given value.
  id_not: ID
  # All values that are contained in given list.
  id_in: [ID!]
  # All values that are not contained in given list.
  id_not_in: [ID!]
  # All values less than the given value.
  id_lt: ID
  # All values less than or equal the given value.
  id_lte: ID
  # All values greater than the given value.
  id_gt: ID
  # All values greater than or equal the given value.
  id_gte: ID
  # All values containing the given string.
  id_contains: ID
  # All values not containing the given string.
  id_not_contains: ID
  # All values starting with the given string.
  id_starts_with: ID
  # All values not starting with the given string.
  id_not_starts_with: ID
  # All values ending with the given string.
  id_ends_with: ID
  # All values not ending with the given string.
  id_not_ends_with: ID
  cyan: String
  # All values that are not equal to given value.
  cyan_not: String
  # All values that are contained in given list.
  cyan_in: [String!]
  # All values that are not contained in given list.
  cyan_not_in: [String!]
  # All values less than the given value.
  cyan_lt: String
  # All values less than or equal the given value.
  cyan_lte: String
  # All values greater than the given value.
  cyan_gt: String
  # All values greater than or equal the given value.
  cyan_gte: String
  # All values containing the given string.
  cyan_contains: String
  # All values not containing the given string.
  cyan_not_contains: String
  # All values starting with the given string.
  cyan_starts_with: String
  # All values not starting with the given string.
  cyan_not_starts_with: String
  # All values ending with the given string.
  cyan_ends_with: String
  # All values not ending with the given string.
  cyan_not_ends_with: String
  ivory: String
  # All values that are not equal to given value.
  ivory_not: String
  # All values that are contained in given list.
  ivory_in: [String!]
  # All values that are not contained in given list.
  ivory_not_in: [String!]
  # All values less than the given value.
  ivory_lt: String
  # All values less than or equal the given value.
  ivory_lte: String
  # All values greater than the given value.
  ivory_gt: String
  # All values greater than or equal the given value.
  ivory_gte: String
  # All values containing the given string.
  ivory_contains: String
  # All values not containing the given string.
  ivory_not_contains: String
  # All values starting with the given string.
  ivory_starts_with: String
  # All values not starting with the given string.
  ivory_not_starts_with: String
  # All values ending with the given string.
  ivory_ends_with: String
  # All values not ending with the given string.
  ivory_not_ends_with: String
  yellow: Muller
  # All values that are not equal to given value.
  yellow_not: Muller
  # All values that are contained in given list.
  yellow_in: [Muller!]
  # All values that are not contained in given list.
  yellow_not_in: [Muller!]
  red: String
  # All values that are not equal to given value.
  red_not: String
  # All values that are contained in given list.
  red_in: [String!]
  # All values that are not contained in given list.
  red_not_in: [String!]
  # All values less than the given value.
  red_lt: String
  # All values less than or equal the given value.
  red_lte: String
  # All values greater than the given value.
  red_gt: String
  # All values greater than or equal the given value.
  red_gte: String
  # All values containing the given string.
  red_contains: String
  # All values not containing the given string.
  red_not_contains: String
  # All values starting with the given string.
  red_starts_with: String
  # All values not starting with the given string.
  red_not_starts_with: String
  # All values ending with the given string.
  red_ends_with: String
  # All values not ending with the given string.
  red_not_ends_with: String
}

input KonklabWhereUniqueInput {
  id: ID
  yellow: Muller
}

type Konklux implements Node {
  status: Status!
  updatedAt: DateTime!
  createdAt: DateTime!
  id: ID!
  maroon: String
  azure: String!
}

# A connection to a list of items.
type KonkluxConnection {
  # Information to aid in pagination.
  pageInfo: PageInfo!
  # A list of edges.
  edges: [KonkluxEdge]!
  aggregate: AggregateKonklux!
}

input KonkluxCreateInput {
  status: Status
  maroon: String
  azure: String!
}

# An edge in a connection.
type KonkluxEdge {
  # The item at the end of the edge.
  node: Konklux!
  # A cursor for use in pagination.
  cursor: String!
}

enum KonkluxOrderByInput {
  status_ASC
  status_DESC
  updatedAt_ASC
  updatedAt_DESC
  createdAt_ASC
  createdAt_DESC
  id_ASC
  id_DESC
  maroon_ASC
  maroon_DESC
  azure_ASC
  azure_DESC
}

type KonkluxPreviousValues {
  status: Status!
  updatedAt: DateTime!
  createdAt: DateTime!
  id: ID!
  maroon: String
  azure: String!
}

type KonkluxSubscriptionPayload {
  mutation: MutationType!
  node: Konklux
  updatedFields: [String!]
  previousValues: KonkluxPreviousValues
}

input KonkluxSubscriptionWhereInput {
  # Logical AND on all given filters.
  AND: [KonkluxSubscriptionWhereInput!]
  # Logical OR on all given filters.
  OR: [KonkluxSubscriptionWhereInput!]
  # Logical NOT on all given filters combined by AND.
  NOT: [KonkluxSubscriptionWhereInput!]
  # The subscription event gets dispatched when it's listed in mutation_in
  mutation_in: [MutationType!]
  # The subscription event gets only dispatched when one of the updated fields names is included in this list
  updatedFields_contains: String
  # The subscription event gets only dispatched when all of the field names included in this list have been updated
  updatedFields_contains_every: [String!]
  # The subscription event gets only dispatched when some of the field names included in this list have been updated
  updatedFields_contains_some: [String!]
  node: KonkluxWhereInput
}

input KonkluxUpdateInput {
  status: Status
  maroon: String
  azure: String
}

input KonkluxUpdateManyMutationInput {
  status: Status
  maroon: String
  azure: String
}

input KonkluxWhereInput {
  # Logical AND on all given filters.
  AND: [KonkluxWhereInput!]
  # Logical OR on all given filters.
  OR: [KonkluxWhereInput!]
  # Logical NOT on all given filters combined by AND.
  NOT: [KonkluxWhereInput!]
  status: Status
  # All values that are not equal to given value.
  status_not: Status
  # All values that are contained in given list.
  status_in: [Status!]
  # All values that are not contained in given list.
  status_not_in: [Status!]
  updatedAt: DateTime
  # All values that are not equal to given value.
  updatedAt_not: DateTime
  # All values that are contained in given list.
  updatedAt_in: [DateTime!]
  # All values that are not contained in given list.
  updatedAt_not_in: [DateTime!]
  # All values less than the given value.
  updatedAt_lt: DateTime
  # All values less than or equal the given value.
  updatedAt_lte: DateTime
  # All values greater than the given value.
  updatedAt_gt: DateTime
  # All values greater than or equal the given value.
  updatedAt_gte: DateTime
  createdAt: DateTime
  # All values that are not equal to given value.
  createdAt_not: DateTime
  # All values that are contained in given list.
  createdAt_in: [DateTime!]
  # All values that are not contained in given list.
  createdAt_not_in: [DateTime!]
  # All values less than the given value.
  createdAt_lt: DateTime
  # All values less than or equal the given value.
  createdAt_lte: DateTime
  # All values greater than the given value.
  createdAt_gt: DateTime
  # All values greater than or equal the given value.
  createdAt_gte: DateTime
  id: ID
  # All values that are not equal to given value.
  id_not: ID
  # All values that are contained in given list.
  id_in: [ID!]
  # All values that are not contained in given list.
  id_not_in: [ID!]
  # All values less than the given value.
  id_lt: ID
  # All values less than or equal the given value.
  id_lte: ID
  # All values greater than the given value.
  id_gt: ID
  # All values greater than or equal the given value.
  id_gte: ID
  # All values containing the given string.
  id_contains: ID
  # All values not containing the given string.
  id_not_contains: ID
  # All values starting with the given string.
  id_starts_with: ID
  # All values not starting with the given string.
  id_not_starts_with: ID
  # All values ending with the given string.
  id_ends_with: ID
  # All values not ending with the given string.
  id_not_ends_with: ID
  maroon: String
  # All values that are not equal to given value.
  maroon_not: String
  # All values that are contained in given list.
  maroon_in: [String!]
  # All values that are not contained in given list.
  maroon_not_in: [String!]
  # All values less than the given value.
  maroon_lt: String
  # All values less than or equal the given value.
  maroon_lte: String
  # All values greater than the given value.
  maroon_gt: String
  # All values greater than or equal the given value.
  maroon_gte: String
  # All values containing the given string.
  maroon_contains: String
  # All values not containing the given string.
  maroon_not_contains: String
  # All values starting with the given string.
  maroon_starts_with: String
  # All values not starting with the given string.
  maroon_not_starts_with: String
  # All values ending with the given string.
  maroon_ends_with: String
  # All values not ending with the given string.
  maroon_not_ends_with: String
  azure: String
  # All values that are not equal to given value.
  azure_not: String
  # All values that are contained in given list.
  azure_in: [String!]
  # All values that are not contained in given list.
  azure_not_in: [String!]
  # All values less than the given value.
  azure_lt: String
  # All values less than or equal the given value.
  azure_lte: String
  # All values greater than the given value.
  azure_gt: String
  # All values greater than or equal the given value.
  azure_gte: String
  # All values containing the given string.
  azure_contains: String
  # All values not containing the given string.
  azure_not_contains: String
  # All values starting with the given string.
  azure_starts_with: String
  # All values not starting with the given string.
  azure_not_starts_with: String
  # All values ending with the given string.
  azure_ends_with: String
  # All values not ending with the given string.
  azure_not_ends_with: String
}

input KonkluxWhereUniqueInput {
  id: ID
  maroon: String
}

type Latlux implements Node {
  status: Status!
  updatedAt: DateTime!
  createdAt: DateTime!
  id: ID!
  tan: Morissette
}

# A connection to a list of items.
type LatluxConnection {
  # Information to aid in pagination.
  pageInfo: PageInfo!
  # A list of edges.
  edges: [LatluxEdge]!
  aggregate: AggregateLatlux!
}

input LatluxCreateInput {
  status: Status
  tan: Morissette
}

# An edge in a connection.
type LatluxEdge {
  # The item at the end of the edge.
  node: Latlux!
  # A cursor for use in pagination.
  cursor: String!
}

enum LatluxOrderByInput {
  status_ASC
  status_DESC
  updatedAt_ASC
  updatedAt_DESC
  createdAt_ASC
  createdAt_DESC
  id_ASC
  id_DESC
  tan_ASC
  tan_DESC
}

type LatluxPreviousValues {
  status: Status!
  updatedAt: DateTime!
  createdAt: DateTime!
  id: ID!
  tan: Morissette
}

type LatluxSubscriptionPayload {
  mutation: MutationType!
  node: Latlux
  updatedFields: [String!]
  previousValues: LatluxPreviousValues
}

input LatluxSubscriptionWhereInput {
  # Logical AND on all given filters.
  AND: [LatluxSubscriptionWhereInput!]
  # Logical OR on all given filters.
  OR: [LatluxSubscriptionWhereInput!]
  # Logical NOT on all given filters combined by AND.
  NOT: [LatluxSubscriptionWhereInput!]
  # The subscription event gets dispatched when it's listed in mutation_in
  mutation_in: [MutationType!]
  # The subscription event gets only dispatched when one of the updated fields names is included in this list
  updatedFields_contains: String
  # The subscription event gets only dispatched when all of the field names included in this list have been updated
  updatedFields_contains_every: [String!]
  # The subscription event gets only dispatched when some of the field names included in this list have been updated
  updatedFields_contains_some: [String!]
  node: LatluxWhereInput
}

input LatluxUpdateInput {
  status: Status
  tan: Morissette
}

input LatluxUpdateManyMutationInput {
  status: Status
  tan: Morissette
}

input LatluxWhereInput {
  # Logical AND on all given filters.
  AND: [LatluxWhereInput!]
  # Logical OR on all given filters.
  OR: [LatluxWhereInput!]
  # Logical NOT on all given filters combined by AND.
  NOT: [LatluxWhereInput!]
  status: Status
  # All values that are not equal to given value.
  status_not: Status
  # All values that are contained in given list.
  status_in: [Status!]
  # All values that are not contained in given list.
  status_not_in: [Status!]
  updatedAt: DateTime
  # All values that are not equal to given value.
  updatedAt_not: DateTime
  # All values that are contained in given list.
  updatedAt_in: [DateTime!]
  # All values that are not contained in given list.
  updatedAt_not_in: [DateTime!]
  # All values less than the given value.
  updatedAt_lt: DateTime
  # All values less than or equal the given value.
  updatedAt_lte: DateTime
  # All values greater than the given value.
  updatedAt_gt: DateTime
  # All values greater than or equal the given value.
  updatedAt_gte: DateTime
  createdAt: DateTime
  # All values that are not equal to given value.
  createdAt_not: DateTime
  # All values that are contained in given list.
  createdAt_in: [DateTime!]
  # All values that are not contained in given list.
  createdAt_not_in: [DateTime!]
  # All values less than the given value.
  createdAt_lt: DateTime
  # All values less than or equal the given value.
  createdAt_lte: DateTime
  # All values greater than the given value.
  createdAt_gt: DateTime
  # All values greater than or equal the given value.
  createdAt_gte: DateTime
  id: ID
  # All values that are not equal to given value.
  id_not: ID
  # All values that are contained in given list.
  id_in: [ID!]
  # All values that are not contained in given list.
  id_not_in: [ID!]
  # All values less than the given value.
  id_lt: ID
  # All values less than or equal the given value.
  id_lte: ID
  # All values greater than the given value.
  id_gt: ID
  # All values greater than or equal the given value.
  id_gte: ID
  # All values containing the given string.
  id_contains: ID
  # All values not containing the given string.
  id_not_contains: ID
  # All values starting with the given string.
  id_starts_with: ID
  # All values not starting with the given string.
  id_not_starts_with: ID
  # All values ending with the given string.
  id_ends_with: ID
  # All values not ending with the given string.
  id_not_ends_with: ID
  tan: Morissette
  # All values that are not equal to given value.
  tan_not: Morissette
  # All values that are contained in given list.
  tan_in: [Morissette!]
  # All values that are not contained in given list.
  tan_not_in: [Morissette!]
}

input LatluxWhereUniqueInput {
  id: ID
}

enum Locale {
  EN
}

type Location implements Node {
  updatedAt: DateTime!
  createdAt: DateTime!
  id: ID!
}

# A connection to a list of items.
type LocationConnection {
  # Information to aid in pagination.
  pageInfo: PageInfo!
  # A list of edges.
  edges: [LocationEdge]!
  aggregate: AggregateLocation!
}

# An edge in a connection.
type LocationEdge {
  # The item at the end of the edge.
  node: Location!
  # A cursor for use in pagination.
  cursor: String!
}

enum LocationOrderByInput {
  updatedAt_ASC
  updatedAt_DESC
  createdAt_ASC
  createdAt_DESC
  id_ASC
  id_DESC
}

type LocationPreviousValues {
  updatedAt: DateTime!
  createdAt: DateTime!
  id: ID!
}

type LocationSubscriptionPayload {
  mutation: MutationType!
  node: Location
  updatedFields: [String!]
  previousValues: LocationPreviousValues
}

input LocationSubscriptionWhereInput {
  # Logical AND on all given filters.
  AND: [LocationSubscriptionWhereInput!]
  # Logical OR on all given filters.
  OR: [LocationSubscriptionWhereInput!]
  # Logical NOT on all given filters combined by AND.
  NOT: [LocationSubscriptionWhereInput!]
  # The subscription event gets dispatched when it's listed in mutation_in
  mutation_in: [MutationType!]
  # The subscription event gets only dispatched when one of the updated fields names is included in this list
  updatedFields_contains: String
  # The subscription event gets only dispatched when all of the field names included in this list have been updated
  updatedFields_contains_every: [String!]
  # The subscription event gets only dispatched when some of the field names included in this list have been updated
  updatedFields_contains_some: [String!]
  node: LocationWhereInput
}

input LocationWhereInput {
  # Logical AND on all given filters.
  AND: [LocationWhereInput!]
  # Logical OR on all given filters.
  OR: [LocationWhereInput!]
  # Logical NOT on all given filters combined by AND.
  NOT: [LocationWhereInput!]
  updatedAt: DateTime
  # All values that are not equal to given value.
  updatedAt_not: DateTime
  # All values that are contained in given list.
  updatedAt_in: [DateTime!]
  # All values that are not contained in given list.
  updatedAt_not_in: [DateTime!]
  # All values less than the given value.
  updatedAt_lt: DateTime
  # All values less than or equal the given value.
  updatedAt_lte: DateTime
  # All values greater than the given value.
  updatedAt_gt: DateTime
  # All values greater than or equal the given value.
  updatedAt_gte: DateTime
  createdAt: DateTime
  # All values that are not equal to given value.
  createdAt_not: DateTime
  # All values that are contained in given list.
  createdAt_in: [DateTime!]
  # All values that are not contained in given list.
  createdAt_not_in: [DateTime!]
  # All values less than the given value.
  createdAt_lt: DateTime
  # All values less than or equal the given value.
  createdAt_lte: DateTime
  # All values greater than the given value.
  createdAt_gt: DateTime
  # All values greater than or equal the given value.
  createdAt_gte: DateTime
  id: ID
  # All values that are not equal to given value.
  id_not: ID
  # All values that are contained in given list.
  id_in: [ID!]
  # All values that are not contained in given list.
  id_not_in: [ID!]
  # All values less than the given value.
  id_lt: ID
  # All values less than or equal the given value.
  id_lte: ID
  # All values greater than the given value.
  id_gt: ID
  # All values greater than or equal the given value.
  id_gte: ID
  # All values containing the given string.
  id_contains: ID
  # All values not containing the given string.
  id_not_contains: ID
  # All values starting with the given string.
  id_starts_with: ID
  # All values not starting with the given string.
  id_not_starts_with: ID
  # All values ending with the given string.
  id_ends_with: ID
  # All values not ending with the given string.
  id_not_ends_with: ID
}

input LocationWhereUniqueInput {
  id: ID
}

# The `Long` scalar type
# represents non-fractional signed whole numeric values.
# Long can represent values between -(2^63) and 2^63 - 1.
scalar Long

type Lotlux implements Node {
  status: Status!
  updatedAt: DateTime!
  createdAt: DateTime!
  id: ID!
  olive: String!
  tan: String
  lavender: String
  silver(
    where: DaltfreshWhereInput
    orderBy: DaltfreshOrderByInput
    skip: Int
    after: String
    before: String
    first: Int
    last: Int
  ): [Daltfresh!]
  azure: Sonsing
  plum: Sonsing
}

# A connection to a list of items.
type LotluxConnection {
  # Information to aid in pagination.
  pageInfo: PageInfo!
  # A list of edges.
  edges: [LotluxEdge]!
  aggregate: AggregateLotlux!
}

input LotluxCreateInput {
  status: Status
  olive: String!
  tan: String
  lavender: String
  silver: DaltfreshCreateManyWithoutGreyInput
  azure: SonsingCreateOneWithoutGoldInput
  plum: SonsingCreateOneWithoutOrchidInput
}

input LotluxCreateOneWithoutAzureInput {
  create: LotluxCreateWithoutAzureInput
  connect: LotluxWhereUniqueInput
}

input LotluxCreateOneWithoutPlumInput {
  create: LotluxCreateWithoutPlumInput
  connect: LotluxWhereUniqueInput
}

input LotluxCreateOneWithoutSilverInput {
  create: LotluxCreateWithoutSilverInput
  connect: LotluxWhereUniqueInput
}

input LotluxCreateWithoutAzureInput {
  status: Status
  olive: String!
  tan: String
  lavender: String
  silver: DaltfreshCreateManyWithoutGreyInput
  plum: SonsingCreateOneWithoutOrchidInput
}

input LotluxCreateWithoutPlumInput {
  status: Status
  olive: String!
  tan: String
  lavender: String
  silver: DaltfreshCreateManyWithoutGreyInput
  azure: SonsingCreateOneWithoutGoldInput
}

input LotluxCreateWithoutSilverInput {
  status: Status
  olive: String!
  tan: String
  lavender: String
  azure: SonsingCreateOneWithoutGoldInput
  plum: SonsingCreateOneWithoutOrchidInput
}

# An edge in a connection.
type LotluxEdge {
  # The item at the end of the edge.
  node: Lotlux!
  # A cursor for use in pagination.
  cursor: String!
}

enum LotluxOrderByInput {
  status_ASC
  status_DESC
  updatedAt_ASC
  updatedAt_DESC
  createdAt_ASC
  createdAt_DESC
  id_ASC
  id_DESC
  olive_ASC
  olive_DESC
  tan_ASC
  tan_DESC
  lavender_ASC
  lavender_DESC
}

type LotluxPreviousValues {
  status: Status!
  updatedAt: DateTime!
  createdAt: DateTime!
  id: ID!
  olive: String!
  tan: String
  lavender: String
}

type LotluxSubscriptionPayload {
  mutation: MutationType!
  node: Lotlux
  updatedFields: [String!]
  previousValues: LotluxPreviousValues
}

input LotluxSubscriptionWhereInput {
  # Logical AND on all given filters.
  AND: [LotluxSubscriptionWhereInput!]
  # Logical OR on all given filters.
  OR: [LotluxSubscriptionWhereInput!]
  # Logical NOT on all given filters combined by AND.
  NOT: [LotluxSubscriptionWhereInput!]
  # The subscription event gets dispatched when it's listed in mutation_in
  mutation_in: [MutationType!]
  # The subscription event gets only dispatched when one of the updated fields names is included in this list
  updatedFields_contains: String
  # The subscription event gets only dispatched when all of the field names included in this list have been updated
  updatedFields_contains_every: [String!]
  # The subscription event gets only dispatched when some of the field names included in this list have been updated
  updatedFields_contains_some: [String!]
  node: LotluxWhereInput
}

input LotluxUpdateInput {
  status: Status
  olive: String
  tan: String
  lavender: String
  silver: DaltfreshUpdateManyWithoutGreyInput
  azure: SonsingUpdateOneWithoutGoldInput
  plum: SonsingUpdateOneWithoutOrchidInput
}

input LotluxUpdateManyMutationInput {
  status: Status
  olive: String
  tan: String
  lavender: String
}

input LotluxUpdateOneWithoutAzureInput {
  create: LotluxCreateWithoutAzureInput
  connect: LotluxWhereUniqueInput
  disconnect: Boolean
  delete: Boolean
  update: LotluxUpdateWithoutAzureDataInput
  upsert: LotluxUpsertWithoutAzureInput
}

input LotluxUpdateOneWithoutPlumInput {
  create: LotluxCreateWithoutPlumInput
  connect: LotluxWhereUniqueInput
  disconnect: Boolean
  delete: Boolean
  update: LotluxUpdateWithoutPlumDataInput
  upsert: LotluxUpsertWithoutPlumInput
}

input LotluxUpdateOneWithoutSilverInput {
  create: LotluxCreateWithoutSilverInput
  connect: LotluxWhereUniqueInput
  disconnect: Boolean
  delete: Boolean
  update: LotluxUpdateWithoutSilverDataInput
  upsert: LotluxUpsertWithoutSilverInput
}

input LotluxUpdateWithoutAzureDataInput {
  status: Status
  olive: String
  tan: String
  lavender: String
  silver: DaltfreshUpdateManyWithoutGreyInput
  plum: SonsingUpdateOneWithoutOrchidInput
}

input LotluxUpdateWithoutPlumDataInput {
  status: Status
  olive: String
  tan: String
  lavender: String
  silver: DaltfreshUpdateManyWithoutGreyInput
  azure: SonsingUpdateOneWithoutGoldInput
}

input LotluxUpdateWithoutSilverDataInput {
  status: Status
  olive: String
  tan: String
  lavender: String
  azure: SonsingUpdateOneWithoutGoldInput
  plum: SonsingUpdateOneWithoutOrchidInput
}

input LotluxUpsertWithoutAzureInput {
  update: LotluxUpdateWithoutAzureDataInput!
  create: LotluxCreateWithoutAzureInput!
}

input LotluxUpsertWithoutPlumInput {
  update: LotluxUpdateWithoutPlumDataInput!
  create: LotluxCreateWithoutPlumInput!
}

input LotluxUpsertWithoutSilverInput {
  update: LotluxUpdateWithoutSilverDataInput!
  create: LotluxCreateWithoutSilverInput!
}

input LotluxWhereInput {
  # Logical AND on all given filters.
  AND: [LotluxWhereInput!]
  # Logical OR on all given filters.
  OR: [LotluxWhereInput!]
  # Logical NOT on all given filters combined by AND.
  NOT: [LotluxWhereInput!]
  status: Status
  # All values that are not equal to given value.
  status_not: Status
  # All values that are contained in given list.
  status_in: [Status!]
  # All values that are not contained in given list.
  status_not_in: [Status!]
  updatedAt: DateTime
  # All values that are not equal to given value.
  updatedAt_not: DateTime
  # All values that are contained in given list.
  updatedAt_in: [DateTime!]
  # All values that are not contained in given list.
  updatedAt_not_in: [DateTime!]
  # All values less than the given value.
  updatedAt_lt: DateTime
  # All values less than or equal the given value.
  updatedAt_lte: DateTime
  # All values greater than the given value.
  updatedAt_gt: DateTime
  # All values greater than or equal the given value.
  updatedAt_gte: DateTime
  createdAt: DateTime
  # All values that are not equal to given value.
  createdAt_not: DateTime
  # All values that are contained in given list.
  createdAt_in: [DateTime!]
  # All values that are not contained in given list.
  createdAt_not_in: [DateTime!]
  # All values less than the given value.
  createdAt_lt: DateTime
  # All values less than or equal the given value.
  createdAt_lte: DateTime
  # All values greater than the given value.
  createdAt_gt: DateTime
  # All values greater than or equal the given value.
  createdAt_gte: DateTime
  id: ID
  # All values that are not equal to given value.
  id_not: ID
  # All values that are contained in given list.
  id_in: [ID!]
  # All values that are not contained in given list.
  id_not_in: [ID!]
  # All values less than the given value.
  id_lt: ID
  # All values less than or equal the given value.
  id_lte: ID
  # All values greater than the given value.
  id_gt: ID
  # All values greater than or equal the given value.
  id_gte: ID
  # All values containing the given string.
  id_contains: ID
  # All values not containing the given string.
  id_not_contains: ID
  # All values starting with the given string.
  id_starts_with: ID
  # All values not starting with the given string.
  id_not_starts_with: ID
  # All values ending with the given string.
  id_ends_with: ID
  # All values not ending with the given string.
  id_not_ends_with: ID
  olive: String
  # All values that are not equal to given value.
  olive_not: String
  # All values that are contained in given list.
  olive_in: [String!]
  # All values that are not contained in given list.
  olive_not_in: [String!]
  # All values less than the given value.
  olive_lt: String
  # All values less than or equal the given value.
  olive_lte: String
  # All values greater than the given value.
  olive_gt: String
  # All values greater than or equal the given value.
  olive_gte: String
  # All values containing the given string.
  olive_contains: String
  # All values not containing the given string.
  olive_not_contains: String
  # All values starting with the given string.
  olive_starts_with: String
  # All values not starting with the given string.
  olive_not_starts_with: String
  # All values ending with the given string.
  olive_ends_with: String
  # All values not ending with the given string.
  olive_not_ends_with: String
  tan: String
  # All values that are not equal to given value.
  tan_not: String
  # All values that are contained in given list.
  tan_in: [String!]
  # All values that are not contained in given list.
  tan_not_in: [String!]
  # All values less than the given value.
  tan_lt: String
  # All values less than or equal the given value.
  tan_lte: String
  # All values greater than the given value.
  tan_gt: String
  # All values greater than or equal the given value.
  tan_gte: String
  # All values containing the given string.
  tan_contains: String
  # All values not containing the given string.
  tan_not_contains: String
  # All values starting with the given string.
  tan_starts_with: String
  # All values not starting with the given string.
  tan_not_starts_with: String
  # All values ending with the given string.
  tan_ends_with: String
  # All values not ending with the given string.
  tan_not_ends_with: String
  lavender: String
  # All values that are not equal to given value.
  lavender_not: String
  # All values that are contained in given list.
  lavender_in: [String!]
  # All values that are not contained in given list.
  lavender_not_in: [String!]
  # All values less than the given value.
  lavender_lt: String
  # All values less than or equal the given value.
  lavender_lte: String
  # All values greater than the given value.
  lavender_gt: String
  # All values greater than or equal the given value.
  lavender_gte: String
  # All values containing the given string.
  lavender_contains: String
  # All values not containing the given string.
  lavender_not_contains: String
  # All values starting with the given string.
  lavender_starts_with: String
  # All values not starting with the given string.
  lavender_not_starts_with: String
  # All values ending with the given string.
  lavender_ends_with: String
  # All values not ending with the given string.
  lavender_not_ends_with: String
  silver_every: DaltfreshWhereInput
  silver_some: DaltfreshWhereInput
  silver_none: DaltfreshWhereInput
  azure: SonsingWhereInput
  plum: SonsingWhereInput
}

input LotluxWhereUniqueInput {
  id: ID
}

type Lotstring implements Node {
  status: Status!
  updatedAt: DateTime!
  createdAt: DateTime!
  id: ID!
  gold(
    where: AssetWhereInput
    orderBy: AssetOrderByInput
    skip: Int
    after: String
    before: String
    first: Int
    last: Int
  ): [Asset!]
  teal: String!
  purple: String!
  orchid: Harris
  white: String
}

# A connection to a list of items.
type LotstringConnection {
  # Information to aid in pagination.
  pageInfo: PageInfo!
  # A list of edges.
  edges: [LotstringEdge]!
  aggregate: AggregateLotstring!
}

input LotstringCreateInput {
  status: Status
  teal: String!
  purple: String!
  orchid: Harris
  white: String
  gold: AssetCreateManyWithoutGoldLotstringInput
}

input LotstringCreateManyWithoutGoldInput {
  create: [LotstringCreateWithoutGoldInput!]
  connect: [LotstringWhereUniqueInput!]
}

input LotstringCreateWithoutGoldInput {
  status: Status
  teal: String!
  purple: String!
  orchid: Harris
  white: String
}

# An edge in a connection.
type LotstringEdge {
  # The item at the end of the edge.
  node: Lotstring!
  # A cursor for use in pagination.
  cursor: String!
}

enum LotstringOrderByInput {
  status_ASC
  status_DESC
  updatedAt_ASC
  updatedAt_DESC
  createdAt_ASC
  createdAt_DESC
  id_ASC
  id_DESC
  teal_ASC
  teal_DESC
  purple_ASC
  purple_DESC
  orchid_ASC
  orchid_DESC
  white_ASC
  white_DESC
}

type LotstringPreviousValues {
  status: Status!
  updatedAt: DateTime!
  createdAt: DateTime!
  id: ID!
  teal: String!
  purple: String!
  orchid: Harris
  white: String
}

input LotstringScalarWhereInput {
  # Logical AND on all given filters.
  AND: [LotstringScalarWhereInput!]
  # Logical OR on all given filters.
  OR: [LotstringScalarWhereInput!]
  # Logical NOT on all given filters combined by AND.
  NOT: [LotstringScalarWhereInput!]
  status: Status
  # All values that are not equal to given value.
  status_not: Status
  # All values that are contained in given list.
  status_in: [Status!]
  # All values that are not contained in given list.
  status_not_in: [Status!]
  updatedAt: DateTime
  # All values that are not equal to given value.
  updatedAt_not: DateTime
  # All values that are contained in given list.
  updatedAt_in: [DateTime!]
  # All values that are not contained in given list.
  updatedAt_not_in: [DateTime!]
  # All values less than the given value.
  updatedAt_lt: DateTime
  # All values less than or equal the given value.
  updatedAt_lte: DateTime
  # All values greater than the given value.
  updatedAt_gt: DateTime
  # All values greater than or equal the given value.
  updatedAt_gte: DateTime
  createdAt: DateTime
  # All values that are not equal to given value.
  createdAt_not: DateTime
  # All values that are contained in given list.
  createdAt_in: [DateTime!]
  # All values that are not contained in given list.
  createdAt_not_in: [DateTime!]
  # All values less than the given value.
  createdAt_lt: DateTime
  # All values less than or equal the given value.
  createdAt_lte: DateTime
  # All values greater than the given value.
  createdAt_gt: DateTime
  # All values greater than or equal the given value.
  createdAt_gte: DateTime
  id: ID
  # All values that are not equal to given value.
  id_not: ID
  # All values that are contained in given list.
  id_in: [ID!]
  # All values that are not contained in given list.
  id_not_in: [ID!]
  # All values less than the given value.
  id_lt: ID
  # All values less than or equal the given value.
  id_lte: ID
  # All values greater than the given value.
  id_gt: ID
  # All values greater than or equal the given value.
  id_gte: ID
  # All values containing the given string.
  id_contains: ID
  # All values not containing the given string.
  id_not_contains: ID
  # All values starting with the given string.
  id_starts_with: ID
  # All values not starting with the given string.
  id_not_starts_with: ID
  # All values ending with the given string.
  id_ends_with: ID
  # All values not ending with the given string.
  id_not_ends_with: ID
  teal: String
  # All values that are not equal to given value.
  teal_not: String
  # All values that are contained in given list.
  teal_in: [String!]
  # All values that are not contained in given list.
  teal_not_in: [String!]
  # All values less than the given value.
  teal_lt: String
  # All values less than or equal the given value.
  teal_lte: String
  # All values greater than the given value.
  teal_gt: String
  # All values greater than or equal the given value.
  teal_gte: String
  # All values containing the given string.
  teal_contains: String
  # All values not containing the given string.
  teal_not_contains: String
  # All values starting with the given string.
  teal_starts_with: String
  # All values not starting with the given string.
  teal_not_starts_with: String
  # All values ending with the given string.
  teal_ends_with: String
  # All values not ending with the given string.
  teal_not_ends_with: String
  purple: String
  # All values that are not equal to given value.
  purple_not: String
  # All values that are contained in given list.
  purple_in: [String!]
  # All values that are not contained in given list.
  purple_not_in: [String!]
  # All values less than the given value.
  purple_lt: String
  # All values less than or equal the given value.
  purple_lte: String
  # All values greater than the given value.
  purple_gt: String
  # All values greater than or equal the given value.
  purple_gte: String
  # All values containing the given string.
  purple_contains: String
  # All values not containing the given string.
  purple_not_contains: String
  # All values starting with the given string.
  purple_starts_with: String
  # All values not starting with the given string.
  purple_not_starts_with: String
  # All values ending with the given string.
  purple_ends_with: String
  # All values not ending with the given string.
  purple_not_ends_with: String
  orchid: Harris
  # All values that are not equal to given value.
  orchid_not: Harris
  # All values that are contained in given list.
  orchid_in: [Harris!]
  # All values that are not contained in given list.
  orchid_not_in: [Harris!]
  white: String
  # All values that are not equal to given value.
  white_not: String
  # All values that are contained in given list.
  white_in: [String!]
  # All values that are not contained in given list.
  white_not_in: [String!]
  # All values less than the given value.
  white_lt: String
  # All values less than or equal the given value.
  white_lte: String
  # All values greater than the given value.
  white_gt: String
  # All values greater than or equal the given value.
  white_gte: String
  # All values containing the given string.
  white_contains: String
  # All values not containing the given string.
  white_not_contains: String
  # All values starting with the given string.
  white_starts_with: String
  # All values not starting with the given string.
  white_not_starts_with: String
  # All values ending with the given string.
  white_ends_with: String
  # All values not ending with the given string.
  white_not_ends_with: String
}

type LotstringSubscriptionPayload {
  mutation: MutationType!
  node: Lotstring
  updatedFields: [String!]
  previousValues: LotstringPreviousValues
}

input LotstringSubscriptionWhereInput {
  # Logical AND on all given filters.
  AND: [LotstringSubscriptionWhereInput!]
  # Logical OR on all given filters.
  OR: [LotstringSubscriptionWhereInput!]
  # Logical NOT on all given filters combined by AND.
  NOT: [LotstringSubscriptionWhereInput!]
  # The subscription event gets dispatched when it's listed in mutation_in
  mutation_in: [MutationType!]
  # The subscription event gets only dispatched when one of the updated fields names is included in this list
  updatedFields_contains: String
  # The subscription event gets only dispatched when all of the field names included in this list have been updated
  updatedFields_contains_every: [String!]
  # The subscription event gets only dispatched when some of the field names included in this list have been updated
  updatedFields_contains_some: [String!]
  node: LotstringWhereInput
}

input LotstringUpdateInput {
  status: Status
  teal: String
  purple: String
  orchid: Harris
  white: String
  gold: AssetUpdateManyWithoutGoldLotstringInput
}

input LotstringUpdateManyDataInput {
  status: Status
  teal: String
  purple: String
  orchid: Harris
  white: String
}

input LotstringUpdateManyMutationInput {
  status: Status
  teal: String
  purple: String
  orchid: Harris
  white: String
}

input LotstringUpdateManyWithoutGoldInput {
  create: [LotstringCreateWithoutGoldInput!]
  connect: [LotstringWhereUniqueInput!]
  set: [LotstringWhereUniqueInput!]
  disconnect: [LotstringWhereUniqueInput!]
  delete: [LotstringWhereUniqueInput!]
  update: [LotstringUpdateWithWhereUniqueWithoutGoldInput!]
  updateMany: [LotstringUpdateManyWithWhereNestedInput!]
  deleteMany: [LotstringScalarWhereInput!]
  upsert: [LotstringUpsertWithWhereUniqueWithoutGoldInput!]
}

input LotstringUpdateManyWithWhereNestedInput {
  where: LotstringScalarWhereInput!
  data: LotstringUpdateManyDataInput!
}

input LotstringUpdateWithoutGoldDataInput {
  status: Status
  teal: String
  purple: String
  orchid: Harris
  white: String
}

input LotstringUpdateWithWhereUniqueWithoutGoldInput {
  where: LotstringWhereUniqueInput!
  data: LotstringUpdateWithoutGoldDataInput!
}

input LotstringUpsertWithWhereUniqueWithoutGoldInput {
  where: LotstringWhereUniqueInput!
  update: LotstringUpdateWithoutGoldDataInput!
  create: LotstringCreateWithoutGoldInput!
}

input LotstringWhereInput {
  # Logical AND on all given filters.
  AND: [LotstringWhereInput!]
  # Logical OR on all given filters.
  OR: [LotstringWhereInput!]
  # Logical NOT on all given filters combined by AND.
  NOT: [LotstringWhereInput!]
  status: Status
  # All values that are not equal to given value.
  status_not: Status
  # All values that are contained in given list.
  status_in: [Status!]
  # All values that are not contained in given list.
  status_not_in: [Status!]
  updatedAt: DateTime
  # All values that are not equal to given value.
  updatedAt_not: DateTime
  # All values that are contained in given list.
  updatedAt_in: [DateTime!]
  # All values that are not contained in given list.
  updatedAt_not_in: [DateTime!]
  # All values less than the given value.
  updatedAt_lt: DateTime
  # All values less than or equal the given value.
  updatedAt_lte: DateTime
  # All values greater than the given value.
  updatedAt_gt: DateTime
  # All values greater than or equal the given value.
  updatedAt_gte: DateTime
  createdAt: DateTime
  # All values that are not equal to given value.
  createdAt_not: DateTime
  # All values that are contained in given list.
  createdAt_in: [DateTime!]
  # All values that are not contained in given list.
  createdAt_not_in: [DateTime!]
  # All values less than the given value.
  createdAt_lt: DateTime
  # All values less than or equal the given value.
  createdAt_lte: DateTime
  # All values greater than the given value.
  createdAt_gt: DateTime
  # All values greater than or equal the given value.
  createdAt_gte: DateTime
  id: ID
  # All values that are not equal to given value.
  id_not: ID
  # All values that are contained in given list.
  id_in: [ID!]
  # All values that are not contained in given list.
  id_not_in: [ID!]
  # All values less than the given value.
  id_lt: ID
  # All values less than or equal the given value.
  id_lte: ID
  # All values greater than the given value.
  id_gt: ID
  # All values greater than or equal the given value.
  id_gte: ID
  # All values containing the given string.
  id_contains: ID
  # All values not containing the given string.
  id_not_contains: ID
  # All values starting with the given string.
  id_starts_with: ID
  # All values not starting with the given string.
  id_not_starts_with: ID
  # All values ending with the given string.
  id_ends_with: ID
  # All values not ending with the given string.
  id_not_ends_with: ID
  teal: String
  # All values that are not equal to given value.
  teal_not: String
  # All values that are contained in given list.
  teal_in: [String!]
  # All values that are not contained in given list.
  teal_not_in: [String!]
  # All values less than the given value.
  teal_lt: String
  # All values less than or equal the given value.
  teal_lte: String
  # All values greater than the given value.
  teal_gt: String
  # All values greater than or equal the given value.
  teal_gte: String
  # All values containing the given string.
  teal_contains: String
  # All values not containing the given string.
  teal_not_contains: String
  # All values starting with the given string.
  teal_starts_with: String
  # All values not starting with the given string.
  teal_not_starts_with: String
  # All values ending with the given string.
  teal_ends_with: String
  # All values not ending with the given string.
  teal_not_ends_with: String
  purple: String
  # All values that are not equal to given value.
  purple_not: String
  # All values that are contained in given list.
  purple_in: [String!]
  # All values that are not contained in given list.
  purple_not_in: [String!]
  # All values less than the given value.
  purple_lt: String
  # All values less than or equal the given value.
  purple_lte: String
  # All values greater than the given value.
  purple_gt: String
  # All values greater than or equal the given value.
  purple_gte: String
  # All values containing the given string.
  purple_contains: String
  # All values not containing the given string.
  purple_not_contains: String
  # All values starting with the given string.
  purple_starts_with: String
  # All values not starting with the given string.
  purple_not_starts_with: String
  # All values ending with the given string.
  purple_ends_with: String
  # All values not ending with the given string.
  purple_not_ends_with: String
  orchid: Harris
  # All values that are not equal to given value.
  orchid_not: Harris
  # All values that are contained in given list.
  orchid_in: [Harris!]
  # All values that are not contained in given list.
  orchid_not_in: [Harris!]
  white: String
  # All values that are not equal to given value.
  white_not: String
  # All values that are contained in given list.
  white_in: [String!]
  # All values that are not contained in given list.
  white_not_in: [String!]
  # All values less than the given value.
  white_lt: String
  # All values less than or equal the given value.
  white_lte: String
  # All values greater than the given value.
  white_gt: String
  # All values greater than or equal the given value.
  white_gte: String
  # All values containing the given string.
  white_contains: String
  # All values not containing the given string.
  white_not_contains: String
  # All values starting with the given string.
  white_starts_with: String
  # All values not starting with the given string.
  white_not_starts_with: String
  # All values ending with the given string.
  white_ends_with: String
  # All values not ending with the given string.
  white_not_ends_with: String
  gold_every: AssetWhereInput
  gold_some: AssetWhereInput
  gold_none: AssetWhereInput
}

input LotstringWhereUniqueInput {
  id: ID
  orchid: Harris
}

enum Morissette {
  VOLUPTATES
  FUGIT
  CONSEQUATUR
  COMMODI
  NON
  NOSTRUM
  SINT
  RECUSANDAE
  EST
  AUTEM
  OPTIO
  QUI
  SIT
  LABORUM
  MAGNAM
  EA
  VELIT
  IN
  FACILIS
  QUIA
  UT
  SED
}

enum Mraz {
  IN
  VOLUPTAS
  RERUM
  EUM
  EXERCITATIONEM
  SED
  TEMPORA
  ET
}

enum Muller {
  ZERO
  ONE
  TWO
  THREE
  FOUR
  FIVE
  SIX
  SEVEN
  EIGHT
  NINE
  TEN
  ELEVEN
  TWELVE
  THIRTEEN
  FOURTEEN
  FIFTEEN
  SIXTEEN
  SEVENTEEN
  EIGHTEEN
  NINETEEN
  TWENTY
  TWENTY_ONE
  TWENTY_TWO
  TWENTY_THREE
  TWENTY_FOUR
  TWENTY_FIVE
  TWENTY_SIX
  TWENTY_SEVEN
  TWENTY_EIGHT
  TWENTY_NINE
  THIRTY
  THIRTY_ONE
  THIRTY_TWO
  THIRTY_THREE
  THIRTY_FOUR
  THIRTY_FIVE
  THIRTY_SIX
  THIRTY_SEVEN
  THIRTY_EIGHT
  THIRTY_NINE
  FORTY
  FORTY_ONE
  FORTY_TWO
  FORTY_THREE
  FORTY_FOUR
  FORTY_FIVE
  FORTY_SIX
  FORTY_SEVEN
  FORTY_EIGHT
  FORTY_NINE
}

type Mutation {
  createAsset(data: AssetCreateInput!): Asset!
  createColor: Color!
  createLocation: Location!
  createKonklux(data: KonkluxCreateInput!): Konklux!
  createSubin(data: SubinCreateInput!): Subin!
  createTemp(data: TempCreateInput!): Temp!
  createVoyatouch(data: VoyatouchCreateInput!): Voyatouch!
  createBamity(data: BamityCreateInput!): Bamity!
  createZamit(data: ZamitCreateInput!): Zamit!
  createKeylex(data: KeylexCreateInput!): Keylex!
  createLotstring(data: LotstringCreateInput!): Lotstring!
  createViva(data: VivaCreateInput!): Viva!
  createTranscof(data: TranscofCreateInput!): Transcof!
  createDaltfresh(data: DaltfreshCreateInput!): Daltfresh!
  createLotlux(data: LotluxCreateInput!): Lotlux!
  createSonsing(data: SonsingCreateInput!): Sonsing!
  createToughjoyfax(data: ToughjoyfaxCreateInput!): Toughjoyfax!
  createStronghold(data: StrongholdCreateInput!): Stronghold!
  createZoolab(data: ZoolabCreateInput!): Zoolab!
  createJob(data: JobCreateInput!): Job!
  createAlphazap(data: AlphazapCreateInput!): Alphazap!
  createTresom(data: TresomCreateInput!): Tresom!
  createKonklab(data: KonklabCreateInput!): Konklab!
  createStim(data: StimCreateInput!): Stim!
  createVentosanzap(data: VentosanzapCreateInput!): Ventosanzap!
  createVoltsillam(data: VoltsillamCreateInput!): Voltsillam!
  createBigtax(data: BigtaxCreateInput!): Bigtax!
  createOtcom(data: OtcomCreateInput!): Otcom!
  createLatlux(data: LatluxCreateInput!): Latlux!
  createStringtough(data: StringtoughCreateInput!): Stringtough!
  createTreeflex(data: TreeflexCreateInput!): Treeflex!
  createZathin(data: ZathinCreateInput!): Zathin!
  createOverhold(data: OverholdCreateInput!): Overhold!
  createRedhold(data: RedholdCreateInput!): Redhold!
  createHatity(data: HatityCreateInput!): Hatity!
  createRonstring(data: RonstringCreateInput!): Ronstring!
  createSonair(data: SonairCreateInput!): Sonair!
  updateAsset(data: AssetUpdateInput!, where: AssetWhereUniqueInput!): Asset
  updateKonklux(
    data: KonkluxUpdateInput!
    where: KonkluxWhereUniqueInput!
  ): Konklux
  updateSubin(data: SubinUpdateInput!, where: SubinWhereUniqueInput!): Subin
  updateTemp(data: TempUpdateInput!, where: TempWhereUniqueInput!): Temp
  updateVoyatouch(
    data: VoyatouchUpdateInput!
    where: VoyatouchWhereUniqueInput!
  ): Voyatouch
  updateBamity(data: BamityUpdateInput!, where: BamityWhereUniqueInput!): Bamity
  updateZamit(data: ZamitUpdateInput!, where: ZamitWhereUniqueInput!): Zamit
  updateKeylex(data: KeylexUpdateInput!, where: KeylexWhereUniqueInput!): Keylex
  updateLotstring(
    data: LotstringUpdateInput!
    where: LotstringWhereUniqueInput!
  ): Lotstring
  updateViva(data: VivaUpdateInput!, where: VivaWhereUniqueInput!): Viva
  updateTranscof(
    data: TranscofUpdateInput!
    where: TranscofWhereUniqueInput!
  ): Transcof
  updateDaltfresh(
    data: DaltfreshUpdateInput!
    where: DaltfreshWhereUniqueInput!
  ): Daltfresh
  updateLotlux(data: LotluxUpdateInput!, where: LotluxWhereUniqueInput!): Lotlux
  updateSonsing(
    data: SonsingUpdateInput!
    where: SonsingWhereUniqueInput!
  ): Sonsing
  updateToughjoyfax(
    data: ToughjoyfaxUpdateInput!
    where: ToughjoyfaxWhereUniqueInput!
  ): Toughjoyfax
  updateStronghold(
    data: StrongholdUpdateInput!
    where: StrongholdWhereUniqueInput!
  ): Stronghold
  updateZoolab(data: ZoolabUpdateInput!, where: ZoolabWhereUniqueInput!): Zoolab
  updateJob(data: JobUpdateInput!, where: JobWhereUniqueInput!): Job
  updateAlphazap(
    data: AlphazapUpdateInput!
    where: AlphazapWhereUniqueInput!
  ): Alphazap
  updateTresom(data: TresomUpdateInput!, where: TresomWhereUniqueInput!): Tresom
  updateKonklab(
    data: KonklabUpdateInput!
    where: KonklabWhereUniqueInput!
  ): Konklab
  updateStim(data: StimUpdateInput!, where: StimWhereUniqueInput!): Stim
  updateVentosanzap(
    data: VentosanzapUpdateInput!
    where: VentosanzapWhereUniqueInput!
  ): Ventosanzap
  updateVoltsillam(
    data: VoltsillamUpdateInput!
    where: VoltsillamWhereUniqueInput!
  ): Voltsillam
  updateBigtax(data: BigtaxUpdateInput!, where: BigtaxWhereUniqueInput!): Bigtax
  updateOtcom(data: OtcomUpdateInput!, where: OtcomWhereUniqueInput!): Otcom
  updateLatlux(data: LatluxUpdateInput!, where: LatluxWhereUniqueInput!): Latlux
  updateStringtough(
    data: StringtoughUpdateInput!
    where: StringtoughWhereUniqueInput!
  ): Stringtough
  updateTreeflex(
    data: TreeflexUpdateInput!
    where: TreeflexWhereUniqueInput!
  ): Treeflex
  updateZathin(data: ZathinUpdateInput!, where: ZathinWhereUniqueInput!): Zathin
  updateOverhold(
    data: OverholdUpdateInput!
    where: OverholdWhereUniqueInput!
  ): Overhold
  updateRedhold(
    data: RedholdUpdateInput!
    where: RedholdWhereUniqueInput!
  ): Redhold
  updateHatity(data: HatityUpdateInput!, where: HatityWhereUniqueInput!): Hatity
  updateRonstring(
    data: RonstringUpdateInput!
    where: RonstringWhereUniqueInput!
  ): Ronstring
  updateSonair(data: SonairUpdateInput!, where: SonairWhereUniqueInput!): Sonair
  deleteAsset(where: AssetWhereUniqueInput!): Asset
  deleteColor(where: ColorWhereUniqueInput!): Color
  deleteLocation(where: LocationWhereUniqueInput!): Location
  deleteKonklux(where: KonkluxWhereUniqueInput!): Konklux
  deleteSubin(where: SubinWhereUniqueInput!): Subin
  deleteTemp(where: TempWhereUniqueInput!): Temp
  deleteVoyatouch(where: VoyatouchWhereUniqueInput!): Voyatouch
  deleteBamity(where: BamityWhereUniqueInput!): Bamity
  deleteZamit(where: ZamitWhereUniqueInput!): Zamit
  deleteKeylex(where: KeylexWhereUniqueInput!): Keylex
  deleteLotstring(where: LotstringWhereUniqueInput!): Lotstring
  deleteViva(where: VivaWhereUniqueInput!): Viva
  deleteTranscof(where: TranscofWhereUniqueInput!): Transcof
  deleteDaltfresh(where: DaltfreshWhereUniqueInput!): Daltfresh
  deleteLotlux(where: LotluxWhereUniqueInput!): Lotlux
  deleteSonsing(where: SonsingWhereUniqueInput!): Sonsing
  deleteToughjoyfax(where: ToughjoyfaxWhereUniqueInput!): Toughjoyfax
  deleteStronghold(where: StrongholdWhereUniqueInput!): Stronghold
  deleteZoolab(where: ZoolabWhereUniqueInput!): Zoolab
  deleteJob(where: JobWhereUniqueInput!): Job
  deleteAlphazap(where: AlphazapWhereUniqueInput!): Alphazap
  deleteTresom(where: TresomWhereUniqueInput!): Tresom
  deleteKonklab(where: KonklabWhereUniqueInput!): Konklab
  deleteStim(where: StimWhereUniqueInput!): Stim
  deleteVentosanzap(where: VentosanzapWhereUniqueInput!): Ventosanzap
  deleteVoltsillam(where: VoltsillamWhereUniqueInput!): Voltsillam
  deleteBigtax(where: BigtaxWhereUniqueInput!): Bigtax
  deleteOtcom(where: OtcomWhereUniqueInput!): Otcom
  deleteLatlux(where: LatluxWhereUniqueInput!): Latlux
  deleteStringtough(where: StringtoughWhereUniqueInput!): Stringtough
  deleteTreeflex(where: TreeflexWhereUniqueInput!): Treeflex
  deleteZathin(where: ZathinWhereUniqueInput!): Zathin
  deleteOverhold(where: OverholdWhereUniqueInput!): Overhold
  deleteRedhold(where: RedholdWhereUniqueInput!): Redhold
  deleteHatity(where: HatityWhereUniqueInput!): Hatity
  deleteRonstring(where: RonstringWhereUniqueInput!): Ronstring
  deleteSonair(where: SonairWhereUniqueInput!): Sonair
  upsertAsset(
    where: AssetWhereUniqueInput!
    create: AssetCreateInput!
    update: AssetUpdateInput!
  ): Asset!
  upsertKonklux(
    where: KonkluxWhereUniqueInput!
    create: KonkluxCreateInput!
    update: KonkluxUpdateInput!
  ): Konklux!
  upsertSubin(
    where: SubinWhereUniqueInput!
    create: SubinCreateInput!
    update: SubinUpdateInput!
  ): Subin!
  upsertTemp(
    where: TempWhereUniqueInput!
    create: TempCreateInput!
    update: TempUpdateInput!
  ): Temp!
  upsertVoyatouch(
    where: VoyatouchWhereUniqueInput!
    create: VoyatouchCreateInput!
    update: VoyatouchUpdateInput!
  ): Voyatouch!
  upsertBamity(
    where: BamityWhereUniqueInput!
    create: BamityCreateInput!
    update: BamityUpdateInput!
  ): Bamity!
  upsertZamit(
    where: ZamitWhereUniqueInput!
    create: ZamitCreateInput!
    update: ZamitUpdateInput!
  ): Zamit!
  upsertKeylex(
    where: KeylexWhereUniqueInput!
    create: KeylexCreateInput!
    update: KeylexUpdateInput!
  ): Keylex!
  upsertLotstring(
    where: LotstringWhereUniqueInput!
    create: LotstringCreateInput!
    update: LotstringUpdateInput!
  ): Lotstring!
  upsertViva(
    where: VivaWhereUniqueInput!
    create: VivaCreateInput!
    update: VivaUpdateInput!
  ): Viva!
  upsertTranscof(
    where: TranscofWhereUniqueInput!
    create: TranscofCreateInput!
    update: TranscofUpdateInput!
  ): Transcof!
  upsertDaltfresh(
    where: DaltfreshWhereUniqueInput!
    create: DaltfreshCreateInput!
    update: DaltfreshUpdateInput!
  ): Daltfresh!
  upsertLotlux(
    where: LotluxWhereUniqueInput!
    create: LotluxCreateInput!
    update: LotluxUpdateInput!
  ): Lotlux!
  upsertSonsing(
    where: SonsingWhereUniqueInput!
    create: SonsingCreateInput!
    update: SonsingUpdateInput!
  ): Sonsing!
  upsertToughjoyfax(
    where: ToughjoyfaxWhereUniqueInput!
    create: ToughjoyfaxCreateInput!
    update: ToughjoyfaxUpdateInput!
  ): Toughjoyfax!
  upsertStronghold(
    where: StrongholdWhereUniqueInput!
    create: StrongholdCreateInput!
    update: StrongholdUpdateInput!
  ): Stronghold!
  upsertZoolab(
    where: ZoolabWhereUniqueInput!
    create: ZoolabCreateInput!
    update: ZoolabUpdateInput!
  ): Zoolab!
  upsertJob(
    where: JobWhereUniqueInput!
    create: JobCreateInput!
    update: JobUpdateInput!
  ): Job!
  upsertAlphazap(
    where: AlphazapWhereUniqueInput!
    create: AlphazapCreateInput!
    update: AlphazapUpdateInput!
  ): Alphazap!
  upsertTresom(
    where: TresomWhereUniqueInput!
    create: TresomCreateInput!
    update: TresomUpdateInput!
  ): Tresom!
  upsertKonklab(
    where: KonklabWhereUniqueInput!
    create: KonklabCreateInput!
    update: KonklabUpdateInput!
  ): Konklab!
  upsertStim(
    where: StimWhereUniqueInput!
    create: StimCreateInput!
    update: StimUpdateInput!
  ): Stim!
  upsertVentosanzap(
    where: VentosanzapWhereUniqueInput!
    create: VentosanzapCreateInput!
    update: VentosanzapUpdateInput!
  ): Ventosanzap!
  upsertVoltsillam(
    where: VoltsillamWhereUniqueInput!
    create: VoltsillamCreateInput!
    update: VoltsillamUpdateInput!
  ): Voltsillam!
  upsertBigtax(
    where: BigtaxWhereUniqueInput!
    create: BigtaxCreateInput!
    update: BigtaxUpdateInput!
  ): Bigtax!
  upsertOtcom(
    where: OtcomWhereUniqueInput!
    create: OtcomCreateInput!
    update: OtcomUpdateInput!
  ): Otcom!
  upsertLatlux(
    where: LatluxWhereUniqueInput!
    create: LatluxCreateInput!
    update: LatluxUpdateInput!
  ): Latlux!
  upsertStringtough(
    where: StringtoughWhereUniqueInput!
    create: StringtoughCreateInput!
    update: StringtoughUpdateInput!
  ): Stringtough!
  upsertTreeflex(
    where: TreeflexWhereUniqueInput!
    create: TreeflexCreateInput!
    update: TreeflexUpdateInput!
  ): Treeflex!
  upsertZathin(
    where: ZathinWhereUniqueInput!
    create: ZathinCreateInput!
    update: ZathinUpdateInput!
  ): Zathin!
  upsertOverhold(
    where: OverholdWhereUniqueInput!
    create: OverholdCreateInput!
    update: OverholdUpdateInput!
  ): Overhold!
  upsertRedhold(
    where: RedholdWhereUniqueInput!
    create: RedholdCreateInput!
    update: RedholdUpdateInput!
  ): Redhold!
  upsertHatity(
    where: HatityWhereUniqueInput!
    create: HatityCreateInput!
    update: HatityUpdateInput!
  ): Hatity!
  upsertRonstring(
    where: RonstringWhereUniqueInput!
    create: RonstringCreateInput!
    update: RonstringUpdateInput!
  ): Ronstring!
  upsertSonair(
    where: SonairWhereUniqueInput!
    create: SonairCreateInput!
    update: SonairUpdateInput!
  ): Sonair!
  updateManyAssets(
    data: AssetUpdateManyMutationInput!
    where: AssetWhereInput
  ): BatchPayload!
  updateManyKonkluxes(
    data: KonkluxUpdateManyMutationInput!
    where: KonkluxWhereInput
  ): BatchPayload!
  updateManySubins(
    data: SubinUpdateManyMutationInput!
    where: SubinWhereInput
  ): BatchPayload!
  updateManyTemps(
    data: TempUpdateManyMutationInput!
    where: TempWhereInput
  ): BatchPayload!
  updateManyVoyatouches(
    data: VoyatouchUpdateManyMutationInput!
    where: VoyatouchWhereInput
  ): BatchPayload!
  updateManyBamities(
    data: BamityUpdateManyMutationInput!
    where: BamityWhereInput
  ): BatchPayload!
  updateManyZamits(
    data: ZamitUpdateManyMutationInput!
    where: ZamitWhereInput
  ): BatchPayload!
  updateManyKeylexes(
    data: KeylexUpdateManyMutationInput!
    where: KeylexWhereInput
  ): BatchPayload!
  updateManyLotstrings(
    data: LotstringUpdateManyMutationInput!
    where: LotstringWhereInput
  ): BatchPayload!
  updateManyVivas(
    data: VivaUpdateManyMutationInput!
    where: VivaWhereInput
  ): BatchPayload!
  updateManyTranscofs(
    data: TranscofUpdateManyMutationInput!
    where: TranscofWhereInput
  ): BatchPayload!
  updateManyDaltfreshes(
    data: DaltfreshUpdateManyMutationInput!
    where: DaltfreshWhereInput
  ): BatchPayload!
  updateManyLotluxes(
    data: LotluxUpdateManyMutationInput!
    where: LotluxWhereInput
  ): BatchPayload!
  updateManySonsings(
    data: SonsingUpdateManyMutationInput!
    where: SonsingWhereInput
  ): BatchPayload!
  updateManyToughjoyfaxes(
    data: ToughjoyfaxUpdateManyMutationInput!
    where: ToughjoyfaxWhereInput
  ): BatchPayload!
  updateManyStrongholds(
    data: StrongholdUpdateManyMutationInput!
    where: StrongholdWhereInput
  ): BatchPayload!
  updateManyZoolabs(
    data: ZoolabUpdateManyMutationInput!
    where: ZoolabWhereInput
  ): BatchPayload!
  updateManyJobs(
    data: JobUpdateManyMutationInput!
    where: JobWhereInput
  ): BatchPayload!
  updateManyAlphazaps(
    data: AlphazapUpdateManyMutationInput!
    where: AlphazapWhereInput
  ): BatchPayload!
  updateManyTresoms(
    data: TresomUpdateManyMutationInput!
    where: TresomWhereInput
  ): BatchPayload!
  updateManyKonklabs(
    data: KonklabUpdateManyMutationInput!
    where: KonklabWhereInput
  ): BatchPayload!
  updateManyStims(
    data: StimUpdateManyMutationInput!
    where: StimWhereInput
  ): BatchPayload!
  updateManyVentosanzaps(
    data: VentosanzapUpdateManyMutationInput!
    where: VentosanzapWhereInput
  ): BatchPayload!
  updateManyVoltsillams(
    data: VoltsillamUpdateManyMutationInput!
    where: VoltsillamWhereInput
  ): BatchPayload!
  updateManyBigtaxes(
    data: BigtaxUpdateManyMutationInput!
    where: BigtaxWhereInput
  ): BatchPayload!
  updateManyOtcoms(
    data: OtcomUpdateManyMutationInput!
    where: OtcomWhereInput
  ): BatchPayload!
  updateManyLatluxes(
    data: LatluxUpdateManyMutationInput!
    where: LatluxWhereInput
  ): BatchPayload!
  updateManyStringtoughs(
    data: StringtoughUpdateManyMutationInput!
    where: StringtoughWhereInput
  ): BatchPayload!
  updateManyTreeflexes(
    data: TreeflexUpdateManyMutationInput!
    where: TreeflexWhereInput
  ): BatchPayload!
  updateManyZathins(
    data: ZathinUpdateManyMutationInput!
    where: ZathinWhereInput
  ): BatchPayload!
  updateManyOverholds(
    data: OverholdUpdateManyMutationInput!
    where: OverholdWhereInput
  ): BatchPayload!
  updateManyRedholds(
    data: RedholdUpdateManyMutationInput!
    where: RedholdWhereInput
  ): BatchPayload!
  updateManyHatities(
    data: HatityUpdateManyMutationInput!
    where: HatityWhereInput
  ): BatchPayload!
  updateManyRonstrings(
    data: RonstringUpdateManyMutationInput!
    where: RonstringWhereInput
  ): BatchPayload!
  updateManySonairs(
    data: SonairUpdateManyMutationInput!
    where: SonairWhereInput
  ): BatchPayload!
  deleteManyAssets(where: AssetWhereInput): BatchPayload!
  deleteManyColors(where: ColorWhereInput): BatchPayload!
  deleteManyLocations(where: LocationWhereInput): BatchPayload!
  deleteManyKonkluxes(where: KonkluxWhereInput): BatchPayload!
  deleteManySubins(where: SubinWhereInput): BatchPayload!
  deleteManyTemps(where: TempWhereInput): BatchPayload!
  deleteManyVoyatouches(where: VoyatouchWhereInput): BatchPayload!
  deleteManyBamities(where: BamityWhereInput): BatchPayload!
  deleteManyZamits(where: ZamitWhereInput): BatchPayload!
  deleteManyKeylexes(where: KeylexWhereInput): BatchPayload!
  deleteManyLotstrings(where: LotstringWhereInput): BatchPayload!
  deleteManyVivas(where: VivaWhereInput): BatchPayload!
  deleteManyTranscofs(where: TranscofWhereInput): BatchPayload!
  deleteManyDaltfreshes(where: DaltfreshWhereInput): BatchPayload!
  deleteManyLotluxes(where: LotluxWhereInput): BatchPayload!
  deleteManySonsings(where: SonsingWhereInput): BatchPayload!
  deleteManyToughjoyfaxes(where: ToughjoyfaxWhereInput): BatchPayload!
  deleteManyStrongholds(where: StrongholdWhereInput): BatchPayload!
  deleteManyZoolabs(where: ZoolabWhereInput): BatchPayload!
  deleteManyJobs(where: JobWhereInput): BatchPayload!
  deleteManyAlphazaps(where: AlphazapWhereInput): BatchPayload!
  deleteManyTresoms(where: TresomWhereInput): BatchPayload!
  deleteManyKonklabs(where: KonklabWhereInput): BatchPayload!
  deleteManyStims(where: StimWhereInput): BatchPayload!
  deleteManyVentosanzaps(where: VentosanzapWhereInput): BatchPayload!
  deleteManyVoltsillams(where: VoltsillamWhereInput): BatchPayload!
  deleteManyBigtaxes(where: BigtaxWhereInput): BatchPayload!
  deleteManyOtcoms(where: OtcomWhereInput): BatchPayload!
  deleteManyLatluxes(where: LatluxWhereInput): BatchPayload!
  deleteManyStringtoughs(where: StringtoughWhereInput): BatchPayload!
  deleteManyTreeflexes(where: TreeflexWhereInput): BatchPayload!
  deleteManyZathins(where: ZathinWhereInput): BatchPayload!
  deleteManyOverholds(where: OverholdWhereInput): BatchPayload!
  deleteManyRedholds(where: RedholdWhereInput): BatchPayload!
  deleteManyHatities(where: HatityWhereInput): BatchPayload!
  deleteManyRonstrings(where: RonstringWhereInput): BatchPayload!
  deleteManySonairs(where: SonairWhereInput): BatchPayload!
}

enum MutationType {
  CREATED
  UPDATED
  DELETED
}

# An object with an ID
interface Node {
  # The id of the object.
  id: ID!
}

type Otcom implements Node {
  status: Status!
  updatedAt: DateTime!
  createdAt: DateTime!
  id: ID!
  teal: Daugherty!
  orange: String
  maroon: String
  purple: String
  gold: Asset
  violet: Boolean
  pink: Int
}

# A connection to a list of items.
type OtcomConnection {
  # Information to aid in pagination.
  pageInfo: PageInfo!
  # A list of edges.
  edges: [OtcomEdge]!
  aggregate: AggregateOtcom!
}

input OtcomCreateInput {
  status: Status
  teal: Daugherty!
  orange: String
  maroon: String
  purple: String
  violet: Boolean
  pink: Int
  gold: AssetCreateOneWithoutGoldOtcomInput
}

input OtcomCreateManyWithoutGoldInput {
  create: [OtcomCreateWithoutGoldInput!]
  connect: [OtcomWhereUniqueInput!]
}

input OtcomCreateWithoutGoldInput {
  status: Status
  teal: Daugherty!
  orange: String
  maroon: String
  purple: String
  violet: Boolean
  pink: Int
}

# An edge in a connection.
type OtcomEdge {
  # The item at the end of the edge.
  node: Otcom!
  # A cursor for use in pagination.
  cursor: String!
}

enum OtcomOrderByInput {
  status_ASC
  status_DESC
  updatedAt_ASC
  updatedAt_DESC
  createdAt_ASC
  createdAt_DESC
  id_ASC
  id_DESC
  teal_ASC
  teal_DESC
  orange_ASC
  orange_DESC
  maroon_ASC
  maroon_DESC
  purple_ASC
  purple_DESC
  violet_ASC
  violet_DESC
  pink_ASC
  pink_DESC
}

type OtcomPreviousValues {
  status: Status!
  updatedAt: DateTime!
  createdAt: DateTime!
  id: ID!
  teal: Daugherty!
  orange: String
  maroon: String
  purple: String
  violet: Boolean
  pink: Int
}

input OtcomScalarWhereInput {
  # Logical AND on all given filters.
  AND: [OtcomScalarWhereInput!]
  # Logical OR on all given filters.
  OR: [OtcomScalarWhereInput!]
  # Logical NOT on all given filters combined by AND.
  NOT: [OtcomScalarWhereInput!]
  status: Status
  # All values that are not equal to given value.
  status_not: Status
  # All values that are contained in given list.
  status_in: [Status!]
  # All values that are not contained in given list.
  status_not_in: [Status!]
  updatedAt: DateTime
  # All values that are not equal to given value.
  updatedAt_not: DateTime
  # All values that are contained in given list.
  updatedAt_in: [DateTime!]
  # All values that are not contained in given list.
  updatedAt_not_in: [DateTime!]
  # All values less than the given value.
  updatedAt_lt: DateTime
  # All values less than or equal the given value.
  updatedAt_lte: DateTime
  # All values greater than the given value.
  updatedAt_gt: DateTime
  # All values greater than or equal the given value.
  updatedAt_gte: DateTime
  createdAt: DateTime
  # All values that are not equal to given value.
  createdAt_not: DateTime
  # All values that are contained in given list.
  createdAt_in: [DateTime!]
  # All values that are not contained in given list.
  createdAt_not_in: [DateTime!]
  # All values less than the given value.
  createdAt_lt: DateTime
  # All values less than or equal the given value.
  createdAt_lte: DateTime
  # All values greater than the given value.
  createdAt_gt: DateTime
  # All values greater than or equal the given value.
  createdAt_gte: DateTime
  id: ID
  # All values that are not equal to given value.
  id_not: ID
  # All values that are contained in given list.
  id_in: [ID!]
  # All values that are not contained in given list.
  id_not_in: [ID!]
  # All values less than the given value.
  id_lt: ID
  # All values less than or equal the given value.
  id_lte: ID
  # All values greater than the given value.
  id_gt: ID
  # All values greater than or equal the given value.
  id_gte: ID
  # All values containing the given string.
  id_contains: ID
  # All values not containing the given string.
  id_not_contains: ID
  # All values starting with the given string.
  id_starts_with: ID
  # All values not starting with the given string.
  id_not_starts_with: ID
  # All values ending with the given string.
  id_ends_with: ID
  # All values not ending with the given string.
  id_not_ends_with: ID
  teal: Daugherty
  # All values that are not equal to given value.
  teal_not: Daugherty
  # All values that are contained in given list.
  teal_in: [Daugherty!]
  # All values that are not contained in given list.
  teal_not_in: [Daugherty!]
  orange: String
  # All values that are not equal to given value.
  orange_not: String
  # All values that are contained in given list.
  orange_in: [String!]
  # All values that are not contained in given list.
  orange_not_in: [String!]
  # All values less than the given value.
  orange_lt: String
  # All values less than or equal the given value.
  orange_lte: String
  # All values greater than the given value.
  orange_gt: String
  # All values greater than or equal the given value.
  orange_gte: String
  # All values containing the given string.
  orange_contains: String
  # All values not containing the given string.
  orange_not_contains: String
  # All values starting with the given string.
  orange_starts_with: String
  # All values not starting with the given string.
  orange_not_starts_with: String
  # All values ending with the given string.
  orange_ends_with: String
  # All values not ending with the given string.
  orange_not_ends_with: String
  maroon: String
  # All values that are not equal to given value.
  maroon_not: String
  # All values that are contained in given list.
  maroon_in: [String!]
  # All values that are not contained in given list.
  maroon_not_in: [String!]
  # All values less than the given value.
  maroon_lt: String
  # All values less than or equal the given value.
  maroon_lte: String
  # All values greater than the given value.
  maroon_gt: String
  # All values greater than or equal the given value.
  maroon_gte: String
  # All values containing the given string.
  maroon_contains: String
  # All values not containing the given string.
  maroon_not_contains: String
  # All values starting with the given string.
  maroon_starts_with: String
  # All values not starting with the given string.
  maroon_not_starts_with: String
  # All values ending with the given string.
  maroon_ends_with: String
  # All values not ending with the given string.
  maroon_not_ends_with: String
  purple: String
  # All values that are not equal to given value.
  purple_not: String
  # All values that are contained in given list.
  purple_in: [String!]
  # All values that are not contained in given list.
  purple_not_in: [String!]
  # All values less than the given value.
  purple_lt: String
  # All values less than or equal the given value.
  purple_lte: String
  # All values greater than the given value.
  purple_gt: String
  # All values greater than or equal the given value.
  purple_gte: String
  # All values containing the given string.
  purple_contains: String
  # All values not containing the given string.
  purple_not_contains: String
  # All values starting with the given string.
  purple_starts_with: String
  # All values not starting with the given string.
  purple_not_starts_with: String
  # All values ending with the given string.
  purple_ends_with: String
  # All values not ending with the given string.
  purple_not_ends_with: String
  violet: Boolean
  # All values that are not equal to given value.
  violet_not: Boolean
  pink: Int
  # All values that are not equal to given value.
  pink_not: Int
  # All values that are contained in given list.
  pink_in: [Int!]
  # All values that are not contained in given list.
  pink_not_in: [Int!]
  # All values less than the given value.
  pink_lt: Int
  # All values less than or equal the given value.
  pink_lte: Int
  # All values greater than the given value.
  pink_gt: Int
  # All values greater than or equal the given value.
  pink_gte: Int
}

type OtcomSubscriptionPayload {
  mutation: MutationType!
  node: Otcom
  updatedFields: [String!]
  previousValues: OtcomPreviousValues
}

input OtcomSubscriptionWhereInput {
  # Logical AND on all given filters.
  AND: [OtcomSubscriptionWhereInput!]
  # Logical OR on all given filters.
  OR: [OtcomSubscriptionWhereInput!]
  # Logical NOT on all given filters combined by AND.
  NOT: [OtcomSubscriptionWhereInput!]
  # The subscription event gets dispatched when it's listed in mutation_in
  mutation_in: [MutationType!]
  # The subscription event gets only dispatched when one of the updated fields names is included in this list
  updatedFields_contains: String
  # The subscription event gets only dispatched when all of the field names included in this list have been updated
  updatedFields_contains_every: [String!]
  # The subscription event gets only dispatched when some of the field names included in this list have been updated
  updatedFields_contains_some: [String!]
  node: OtcomWhereInput
}

input OtcomUpdateInput {
  status: Status
  teal: Daugherty
  orange: String
  maroon: String
  purple: String
  violet: Boolean
  pink: Int
  gold: AssetUpdateOneWithoutGoldOtcomInput
}

input OtcomUpdateManyDataInput {
  status: Status
  teal: Daugherty
  orange: String
  maroon: String
  purple: String
  violet: Boolean
  pink: Int
}

input OtcomUpdateManyMutationInput {
  status: Status
  teal: Daugherty
  orange: String
  maroon: String
  purple: String
  violet: Boolean
  pink: Int
}

input OtcomUpdateManyWithoutGoldInput {
  create: [OtcomCreateWithoutGoldInput!]
  connect: [OtcomWhereUniqueInput!]
  set: [OtcomWhereUniqueInput!]
  disconnect: [OtcomWhereUniqueInput!]
  delete: [OtcomWhereUniqueInput!]
  update: [OtcomUpdateWithWhereUniqueWithoutGoldInput!]
  updateMany: [OtcomUpdateManyWithWhereNestedInput!]
  deleteMany: [OtcomScalarWhereInput!]
  upsert: [OtcomUpsertWithWhereUniqueWithoutGoldInput!]
}

input OtcomUpdateManyWithWhereNestedInput {
  where: OtcomScalarWhereInput!
  data: OtcomUpdateManyDataInput!
}

input OtcomUpdateWithoutGoldDataInput {
  status: Status
  teal: Daugherty
  orange: String
  maroon: String
  purple: String
  violet: Boolean
  pink: Int
}

input OtcomUpdateWithWhereUniqueWithoutGoldInput {
  where: OtcomWhereUniqueInput!
  data: OtcomUpdateWithoutGoldDataInput!
}

input OtcomUpsertWithWhereUniqueWithoutGoldInput {
  where: OtcomWhereUniqueInput!
  update: OtcomUpdateWithoutGoldDataInput!
  create: OtcomCreateWithoutGoldInput!
}

input OtcomWhereInput {
  # Logical AND on all given filters.
  AND: [OtcomWhereInput!]
  # Logical OR on all given filters.
  OR: [OtcomWhereInput!]
  # Logical NOT on all given filters combined by AND.
  NOT: [OtcomWhereInput!]
  status: Status
  # All values that are not equal to given value.
  status_not: Status
  # All values that are contained in given list.
  status_in: [Status!]
  # All values that are not contained in given list.
  status_not_in: [Status!]
  updatedAt: DateTime
  # All values that are not equal to given value.
  updatedAt_not: DateTime
  # All values that are contained in given list.
  updatedAt_in: [DateTime!]
  # All values that are not contained in given list.
  updatedAt_not_in: [DateTime!]
  # All values less than the given value.
  updatedAt_lt: DateTime
  # All values less than or equal the given value.
  updatedAt_lte: DateTime
  # All values greater than the given value.
  updatedAt_gt: DateTime
  # All values greater than or equal the given value.
  updatedAt_gte: DateTime
  createdAt: DateTime
  # All values that are not equal to given value.
  createdAt_not: DateTime
  # All values that are contained in given list.
  createdAt_in: [DateTime!]
  # All values that are not contained in given list.
  createdAt_not_in: [DateTime!]
  # All values less than the given value.
  createdAt_lt: DateTime
  # All values less than or equal the given value.
  createdAt_lte: DateTime
  # All values greater than the given value.
  createdAt_gt: DateTime
  # All values greater than or equal the given value.
  createdAt_gte: DateTime
  id: ID
  # All values that are not equal to given value.
  id_not: ID
  # All values that are contained in given list.
  id_in: [ID!]
  # All values that are not contained in given list.
  id_not_in: [ID!]
  # All values less than the given value.
  id_lt: ID
  # All values less than or equal the given value.
  id_lte: ID
  # All values greater than the given value.
  id_gt: ID
  # All values greater than or equal the given value.
  id_gte: ID
  # All values containing the given string.
  id_contains: ID
  # All values not containing the given string.
  id_not_contains: ID
  # All values starting with the given string.
  id_starts_with: ID
  # All values not starting with the given string.
  id_not_starts_with: ID
  # All values ending with the given string.
  id_ends_with: ID
  # All values not ending with the given string.
  id_not_ends_with: ID
  teal: Daugherty
  # All values that are not equal to given value.
  teal_not: Daugherty
  # All values that are contained in given list.
  teal_in: [Daugherty!]
  # All values that are not contained in given list.
  teal_not_in: [Daugherty!]
  orange: String
  # All values that are not equal to given value.
  orange_not: String
  # All values that are contained in given list.
  orange_in: [String!]
  # All values that are not contained in given list.
  orange_not_in: [String!]
  # All values less than the given value.
  orange_lt: String
  # All values less than or equal the given value.
  orange_lte: String
  # All values greater than the given value.
  orange_gt: String
  # All values greater than or equal the given value.
  orange_gte: String
  # All values containing the given string.
  orange_contains: String
  # All values not containing the given string.
  orange_not_contains: String
  # All values starting with the given string.
  orange_starts_with: String
  # All values not starting with the given string.
  orange_not_starts_with: String
  # All values ending with the given string.
  orange_ends_with: String
  # All values not ending with the given string.
  orange_not_ends_with: String
  maroon: String
  # All values that are not equal to given value.
  maroon_not: String
  # All values that are contained in given list.
  maroon_in: [String!]
  # All values that are not contained in given list.
  maroon_not_in: [String!]
  # All values less than the given value.
  maroon_lt: String
  # All values less than or equal the given value.
  maroon_lte: String
  # All values greater than the given value.
  maroon_gt: String
  # All values greater than or equal the given value.
  maroon_gte: String
  # All values containing the given string.
  maroon_contains: String
  # All values not containing the given string.
  maroon_not_contains: String
  # All values starting with the given string.
  maroon_starts_with: String
  # All values not starting with the given string.
  maroon_not_starts_with: String
  # All values ending with the given string.
  maroon_ends_with: String
  # All values not ending with the given string.
  maroon_not_ends_with: String
  purple: String
  # All values that are not equal to given value.
  purple_not: String
  # All values that are contained in given list.
  purple_in: [String!]
  # All values that are not contained in given list.
  purple_not_in: [String!]
  # All values less than the given value.
  purple_lt: String
  # All values less than or equal the given value.
  purple_lte: String
  # All values greater than the given value.
  purple_gt: String
  # All values greater than or equal the given value.
  purple_gte: String
  # All values containing the given string.
  purple_contains: String
  # All values not containing the given string.
  purple_not_contains: String
  # All values starting with the given string.
  purple_starts_with: String
  # All values not starting with the given string.
  purple_not_starts_with: String
  # All values ending with the given string.
  purple_ends_with: String
  # All values not ending with the given string.
  purple_not_ends_with: String
  violet: Boolean
  # All values that are not equal to given value.
  violet_not: Boolean
  pink: Int
  # All values that are not equal to given value.
  pink_not: Int
  # All values that are contained in given list.
  pink_in: [Int!]
  # All values that are not contained in given list.
  pink_not_in: [Int!]
  # All values less than the given value.
  pink_lt: Int
  # All values less than or equal the given value.
  pink_lte: Int
  # All values greater than the given value.
  pink_gt: Int
  # All values greater than or equal the given value.
  pink_gte: Int
  gold: AssetWhereInput
}

input OtcomWhereUniqueInput {
  id: ID
  teal: Daugherty
}

type Overhold implements Node {
  status: Status!
  updatedAt: DateTime!
  createdAt: DateTime!
  id: ID!
  azure: String!
  orchid: [Daugherty!]!
  magenta: String!
}

# A connection to a list of items.
type OverholdConnection {
  # Information to aid in pagination.
  pageInfo: PageInfo!
  # A list of edges.
  edges: [OverholdEdge]!
  aggregate: AggregateOverhold!
}

input OverholdCreateInput {
  status: Status
  azure: String!
  magenta: String!
  orchid: OverholdCreateorchidInput
}

input OverholdCreateorchidInput {
  set: [Daugherty!]
}

# An edge in a connection.
type OverholdEdge {
  # The item at the end of the edge.
  node: Overhold!
  # A cursor for use in pagination.
  cursor: String!
}

enum OverholdOrderByInput {
  status_ASC
  status_DESC
  updatedAt_ASC
  updatedAt_DESC
  createdAt_ASC
  createdAt_DESC
  id_ASC
  id_DESC
  azure_ASC
  azure_DESC
  magenta_ASC
  magenta_DESC
}

type OverholdPreviousValues {
  status: Status!
  updatedAt: DateTime!
  createdAt: DateTime!
  id: ID!
  azure: String!
  orchid: [Daugherty!]!
  magenta: String!
}

type OverholdSubscriptionPayload {
  mutation: MutationType!
  node: Overhold
  updatedFields: [String!]
  previousValues: OverholdPreviousValues
}

input OverholdSubscriptionWhereInput {
  # Logical AND on all given filters.
  AND: [OverholdSubscriptionWhereInput!]
  # Logical OR on all given filters.
  OR: [OverholdSubscriptionWhereInput!]
  # Logical NOT on all given filters combined by AND.
  NOT: [OverholdSubscriptionWhereInput!]
  # The subscription event gets dispatched when it's listed in mutation_in
  mutation_in: [MutationType!]
  # The subscription event gets only dispatched when one of the updated fields names is included in this list
  updatedFields_contains: String
  # The subscription event gets only dispatched when all of the field names included in this list have been updated
  updatedFields_contains_every: [String!]
  # The subscription event gets only dispatched when some of the field names included in this list have been updated
  updatedFields_contains_some: [String!]
  node: OverholdWhereInput
}

input OverholdUpdateInput {
  status: Status
  azure: String
  magenta: String
  orchid: OverholdUpdateorchidInput
}

input OverholdUpdateManyMutationInput {
  status: Status
  azure: String
  magenta: String
  orchid: OverholdUpdateorchidInput
}

input OverholdUpdateorchidInput {
  set: [Daugherty!]
}

input OverholdWhereInput {
  # Logical AND on all given filters.
  AND: [OverholdWhereInput!]
  # Logical OR on all given filters.
  OR: [OverholdWhereInput!]
  # Logical NOT on all given filters combined by AND.
  NOT: [OverholdWhereInput!]
  status: Status
  # All values that are not equal to given value.
  status_not: Status
  # All values that are contained in given list.
  status_in: [Status!]
  # All values that are not contained in given list.
  status_not_in: [Status!]
  updatedAt: DateTime
  # All values that are not equal to given value.
  updatedAt_not: DateTime
  # All values that are contained in given list.
  updatedAt_in: [DateTime!]
  # All values that are not contained in given list.
  updatedAt_not_in: [DateTime!]
  # All values less than the given value.
  updatedAt_lt: DateTime
  # All values less than or equal the given value.
  updatedAt_lte: DateTime
  # All values greater than the given value.
  updatedAt_gt: DateTime
  # All values greater than or equal the given value.
  updatedAt_gte: DateTime
  createdAt: DateTime
  # All values that are not equal to given value.
  createdAt_not: DateTime
  # All values that are contained in given list.
  createdAt_in: [DateTime!]
  # All values that are not contained in given list.
  createdAt_not_in: [DateTime!]
  # All values less than the given value.
  createdAt_lt: DateTime
  # All values less than or equal the given value.
  createdAt_lte: DateTime
  # All values greater than the given value.
  createdAt_gt: DateTime
  # All values greater than or equal the given value.
  createdAt_gte: DateTime
  id: ID
  # All values that are not equal to given value.
  id_not: ID
  # All values that are contained in given list.
  id_in: [ID!]
  # All values that are not contained in given list.
  id_not_in: [ID!]
  # All values less than the given value.
  id_lt: ID
  # All values less than or equal the given value.
  id_lte: ID
  # All values greater than the given value.
  id_gt: ID
  # All values greater than or equal the given value.
  id_gte: ID
  # All values containing the given string.
  id_contains: ID
  # All values not containing the given string.
  id_not_contains: ID
  # All values starting with the given string.
  id_starts_with: ID
  # All values not starting with the given string.
  id_not_starts_with: ID
  # All values ending with the given string.
  id_ends_with: ID
  # All values not ending with the given string.
  id_not_ends_with: ID
  azure: String
  # All values that are not equal to given value.
  azure_not: String
  # All values that are contained in given list.
  azure_in: [String!]
  # All values that are not contained in given list.
  azure_not_in: [String!]
  # All values less than the given value.
  azure_lt: String
  # All values less than or equal the given value.
  azure_lte: String
  # All values greater than the given value.
  azure_gt: String
  # All values greater than or equal the given value.
  azure_gte: String
  # All values containing the given string.
  azure_contains: String
  # All values not containing the given string.
  azure_not_contains: String
  # All values starting with the given string.
  azure_starts_with: String
  # All values not starting with the given string.
  azure_not_starts_with: String
  # All values ending with the given string.
  azure_ends_with: String
  # All values not ending with the given string.
  azure_not_ends_with: String
  magenta: String
  # All values that are not equal to given value.
  magenta_not: String
  # All values that are contained in given list.
  magenta_in: [String!]
  # All values that are not contained in given list.
  magenta_not_in: [String!]
  # All values less than the given value.
  magenta_lt: String
  # All values less than or equal the given value.
  magenta_lte: String
  # All values greater than the given value.
  magenta_gt: String
  # All values greater than or equal the given value.
  magenta_gte: String
  # All values containing the given string.
  magenta_contains: String
  # All values not containing the given string.
  magenta_not_contains: String
  # All values starting with the given string.
  magenta_starts_with: String
  # All values not starting with the given string.
  magenta_not_starts_with: String
  # All values ending with the given string.
  magenta_ends_with: String
  # All values not ending with the given string.
  magenta_not_ends_with: String
}

input OverholdWhereUniqueInput {
  id: ID
  azure: String
  magenta: String
}

# Information about pagination in a connection.
type PageInfo {
  # When paginating forwards, are there more items?
  hasNextPage: Boolean!
  # When paginating backwards, are there more items?
  hasPreviousPage: Boolean!
  # When paginating backwards, the cursor to continue.
  startCursor: String
  # When paginating forwards, the cursor to continue.
  endCursor: String
}

enum Parker {
  EUM
  ET
  ASSUMENDA
}

type Query {
  assets(
    where: AssetWhereInput
    orderBy: AssetOrderByInput
    skip: Int
    after: String
    before: String
    first: Int
    last: Int
  ): [Asset]!
  colors(
    where: ColorWhereInput
    orderBy: ColorOrderByInput
    skip: Int
    after: String
    before: String
    first: Int
    last: Int
  ): [Color]!
  locations(
    where: LocationWhereInput
    orderBy: LocationOrderByInput
    skip: Int
    after: String
    before: String
    first: Int
    last: Int
  ): [Location]!
  konkluxes(
    where: KonkluxWhereInput
    orderBy: KonkluxOrderByInput
    skip: Int
    after: String
    before: String
    first: Int
    last: Int
  ): [Konklux]!
  subins(
    where: SubinWhereInput
    orderBy: SubinOrderByInput
    skip: Int
    after: String
    before: String
    first: Int
    last: Int
  ): [Subin]!
  temps(
    where: TempWhereInput
    orderBy: TempOrderByInput
    skip: Int
    after: String
    before: String
    first: Int
    last: Int
  ): [Temp]!
  voyatouches(
    where: VoyatouchWhereInput
    orderBy: VoyatouchOrderByInput
    skip: Int
    after: String
    before: String
    first: Int
    last: Int
  ): [Voyatouch]!
  bamities(
    where: BamityWhereInput
    orderBy: BamityOrderByInput
    skip: Int
    after: String
    before: String
    first: Int
    last: Int
  ): [Bamity]!
  zamits(
    where: ZamitWhereInput
    orderBy: ZamitOrderByInput
    skip: Int
    after: String
    before: String
    first: Int
    last: Int
  ): [Zamit]!
  keylexes(
    where: KeylexWhereInput
    orderBy: KeylexOrderByInput
    skip: Int
    after: String
    before: String
    first: Int
    last: Int
  ): [Keylex]!
  lotstrings(
    where: LotstringWhereInput
    orderBy: LotstringOrderByInput
    skip: Int
    after: String
    before: String
    first: Int
    last: Int
  ): [Lotstring]!
  vivas(
    where: VivaWhereInput
    orderBy: VivaOrderByInput
    skip: Int
    after: String
    before: String
    first: Int
    last: Int
  ): [Viva]!
  transcofs(
    where: TranscofWhereInput
    orderBy: TranscofOrderByInput
    skip: Int
    after: String
    before: String
    first: Int
    last: Int
  ): [Transcof]!
  daltfreshes(
    where: DaltfreshWhereInput
    orderBy: DaltfreshOrderByInput
    skip: Int
    after: String
    before: String
    first: Int
    last: Int
  ): [Daltfresh]!
  lotluxes(
    where: LotluxWhereInput
    orderBy: LotluxOrderByInput
    skip: Int
    after: String
    before: String
    first: Int
    last: Int
  ): [Lotlux]!
  sonsings(
    where: SonsingWhereInput
    orderBy: SonsingOrderByInput
    skip: Int
    after: String
    before: String
    first: Int
    last: Int
  ): [Sonsing]!
  toughjoyfaxes(
    where: ToughjoyfaxWhereInput
    orderBy: ToughjoyfaxOrderByInput
    skip: Int
    after: String
    before: String
    first: Int
    last: Int
  ): [Toughjoyfax]!
  strongholds(
    where: StrongholdWhereInput
    orderBy: StrongholdOrderByInput
    skip: Int
    after: String
    before: String
    first: Int
    last: Int
  ): [Stronghold]!
  zoolabs(
    where: ZoolabWhereInput
    orderBy: ZoolabOrderByInput
    skip: Int
    after: String
    before: String
    first: Int
    last: Int
  ): [Zoolab]!
  jobs(
    where: JobWhereInput
    orderBy: JobOrderByInput
    skip: Int
    after: String
    before: String
    first: Int
    last: Int
  ): [Job]!
  alphazaps(
    where: AlphazapWhereInput
    orderBy: AlphazapOrderByInput
    skip: Int
    after: String
    before: String
    first: Int
    last: Int
  ): [Alphazap]!
  tresoms(
    where: TresomWhereInput
    orderBy: TresomOrderByInput
    skip: Int
    after: String
    before: String
    first: Int
    last: Int
  ): [Tresom]!
  konklabs(
    where: KonklabWhereInput
    orderBy: KonklabOrderByInput
    skip: Int
    after: String
    before: String
    first: Int
    last: Int
  ): [Konklab]!
  stims(
    where: StimWhereInput
    orderBy: StimOrderByInput
    skip: Int
    after: String
    before: String
    first: Int
    last: Int
  ): [Stim]!
  ventosanzaps(
    where: VentosanzapWhereInput
    orderBy: VentosanzapOrderByInput
    skip: Int
    after: String
    before: String
    first: Int
    last: Int
  ): [Ventosanzap]!
  voltsillams(
    where: VoltsillamWhereInput
    orderBy: VoltsillamOrderByInput
    skip: Int
    after: String
    before: String
    first: Int
    last: Int
  ): [Voltsillam]!
  bigtaxes(
    where: BigtaxWhereInput
    orderBy: BigtaxOrderByInput
    skip: Int
    after: String
    before: String
    first: Int
    last: Int
  ): [Bigtax]!
  otcoms(
    where: OtcomWhereInput
    orderBy: OtcomOrderByInput
    skip: Int
    after: String
    before: String
    first: Int
    last: Int
  ): [Otcom]!
  latluxes(
    where: LatluxWhereInput
    orderBy: LatluxOrderByInput
    skip: Int
    after: String
    before: String
    first: Int
    last: Int
  ): [Latlux]!
  stringtoughs(
    where: StringtoughWhereInput
    orderBy: StringtoughOrderByInput
    skip: Int
    after: String
    before: String
    first: Int
    last: Int
  ): [Stringtough]!
  treeflexes(
    where: TreeflexWhereInput
    orderBy: TreeflexOrderByInput
    skip: Int
    after: String
    before: String
    first: Int
    last: Int
  ): [Treeflex]!
  zathins(
    where: ZathinWhereInput
    orderBy: ZathinOrderByInput
    skip: Int
    after: String
    before: String
    first: Int
    last: Int
  ): [Zathin]!
  overholds(
    where: OverholdWhereInput
    orderBy: OverholdOrderByInput
    skip: Int
    after: String
    before: String
    first: Int
    last: Int
  ): [Overhold]!
  redholds(
    where: RedholdWhereInput
    orderBy: RedholdOrderByInput
    skip: Int
    after: String
    before: String
    first: Int
    last: Int
  ): [Redhold]!
  hatities(
    where: HatityWhereInput
    orderBy: HatityOrderByInput
    skip: Int
    after: String
    before: String
    first: Int
    last: Int
  ): [Hatity]!
  ronstrings(
    where: RonstringWhereInput
    orderBy: RonstringOrderByInput
    skip: Int
    after: String
    before: String
    first: Int
    last: Int
  ): [Ronstring]!
  sonairs(
    where: SonairWhereInput
    orderBy: SonairOrderByInput
    skip: Int
    after: String
    before: String
    first: Int
    last: Int
  ): [Sonair]!
  asset(where: AssetWhereUniqueInput!): Asset
  color(where: ColorWhereUniqueInput!): Color
  location(where: LocationWhereUniqueInput!): Location
  konklux(where: KonkluxWhereUniqueInput!): Konklux
  subin(where: SubinWhereUniqueInput!): Subin
  temp(where: TempWhereUniqueInput!): Temp
  voyatouch(where: VoyatouchWhereUniqueInput!): Voyatouch
  bamity(where: BamityWhereUniqueInput!): Bamity
  zamit(where: ZamitWhereUniqueInput!): Zamit
  keylex(where: KeylexWhereUniqueInput!): Keylex
  lotstring(where: LotstringWhereUniqueInput!): Lotstring
  viva(where: VivaWhereUniqueInput!): Viva
  transcof(where: TranscofWhereUniqueInput!): Transcof
  daltfresh(where: DaltfreshWhereUniqueInput!): Daltfresh
  lotlux(where: LotluxWhereUniqueInput!): Lotlux
  sonsing(where: SonsingWhereUniqueInput!): Sonsing
  toughjoyfax(where: ToughjoyfaxWhereUniqueInput!): Toughjoyfax
  stronghold(where: StrongholdWhereUniqueInput!): Stronghold
  zoolab(where: ZoolabWhereUniqueInput!): Zoolab
  job(where: JobWhereUniqueInput!): Job
  alphazap(where: AlphazapWhereUniqueInput!): Alphazap
  tresom(where: TresomWhereUniqueInput!): Tresom
  konklab(where: KonklabWhereUniqueInput!): Konklab
  stim(where: StimWhereUniqueInput!): Stim
  ventosanzap(where: VentosanzapWhereUniqueInput!): Ventosanzap
  voltsillam(where: VoltsillamWhereUniqueInput!): Voltsillam
  bigtax(where: BigtaxWhereUniqueInput!): Bigtax
  otcom(where: OtcomWhereUniqueInput!): Otcom
  latlux(where: LatluxWhereUniqueInput!): Latlux
  stringtough(where: StringtoughWhereUniqueInput!): Stringtough
  treeflex(where: TreeflexWhereUniqueInput!): Treeflex
  zathin(where: ZathinWhereUniqueInput!): Zathin
  overhold(where: OverholdWhereUniqueInput!): Overhold
  redhold(where: RedholdWhereUniqueInput!): Redhold
  hatity(where: HatityWhereUniqueInput!): Hatity
  ronstring(where: RonstringWhereUniqueInput!): Ronstring
  sonair(where: SonairWhereUniqueInput!): Sonair
  assetsConnection(
    where: AssetWhereInput
    orderBy: AssetOrderByInput
    skip: Int
    after: String
    before: String
    first: Int
    last: Int
  ): AssetConnection!
  colorsConnection(
    where: ColorWhereInput
    orderBy: ColorOrderByInput
    skip: Int
    after: String
    before: String
    first: Int
    last: Int
  ): ColorConnection!
  locationsConnection(
    where: LocationWhereInput
    orderBy: LocationOrderByInput
    skip: Int
    after: String
    before: String
    first: Int
    last: Int
  ): LocationConnection!
  konkluxesConnection(
    where: KonkluxWhereInput
    orderBy: KonkluxOrderByInput
    skip: Int
    after: String
    before: String
    first: Int
    last: Int
  ): KonkluxConnection!
  subinsConnection(
    where: SubinWhereInput
    orderBy: SubinOrderByInput
    skip: Int
    after: String
    before: String
    first: Int
    last: Int
  ): SubinConnection!
  tempsConnection(
    where: TempWhereInput
    orderBy: TempOrderByInput
    skip: Int
    after: String
    before: String
    first: Int
    last: Int
  ): TempConnection!
  voyatouchesConnection(
    where: VoyatouchWhereInput
    orderBy: VoyatouchOrderByInput
    skip: Int
    after: String
    before: String
    first: Int
    last: Int
  ): VoyatouchConnection!
  bamitiesConnection(
    where: BamityWhereInput
    orderBy: BamityOrderByInput
    skip: Int
    after: String
    before: String
    first: Int
    last: Int
  ): BamityConnection!
  zamitsConnection(
    where: ZamitWhereInput
    orderBy: ZamitOrderByInput
    skip: Int
    after: String
    before: String
    first: Int
    last: Int
  ): ZamitConnection!
  keylexesConnection(
    where: KeylexWhereInput
    orderBy: KeylexOrderByInput
    skip: Int
    after: String
    before: String
    first: Int
    last: Int
  ): KeylexConnection!
  lotstringsConnection(
    where: LotstringWhereInput
    orderBy: LotstringOrderByInput
    skip: Int
    after: String
    before: String
    first: Int
    last: Int
  ): LotstringConnection!
  vivasConnection(
    where: VivaWhereInput
    orderBy: VivaOrderByInput
    skip: Int
    after: String
    before: String
    first: Int
    last: Int
  ): VivaConnection!
  transcofsConnection(
    where: TranscofWhereInput
    orderBy: TranscofOrderByInput
    skip: Int
    after: String
    before: String
    first: Int
    last: Int
  ): TranscofConnection!
  daltfreshesConnection(
    where: DaltfreshWhereInput
    orderBy: DaltfreshOrderByInput
    skip: Int
    after: String
    before: String
    first: Int
    last: Int
  ): DaltfreshConnection!
  lotluxesConnection(
    where: LotluxWhereInput
    orderBy: LotluxOrderByInput
    skip: Int
    after: String
    before: String
    first: Int
    last: Int
  ): LotluxConnection!
  sonsingsConnection(
    where: SonsingWhereInput
    orderBy: SonsingOrderByInput
    skip: Int
    after: String
    before: String
    first: Int
    last: Int
  ): SonsingConnection!
  toughjoyfaxesConnection(
    where: ToughjoyfaxWhereInput
    orderBy: ToughjoyfaxOrderByInput
    skip: Int
    after: String
    before: String
    first: Int
    last: Int
  ): ToughjoyfaxConnection!
  strongholdsConnection(
    where: StrongholdWhereInput
    orderBy: StrongholdOrderByInput
    skip: Int
    after: String
    before: String
    first: Int
    last: Int
  ): StrongholdConnection!
  zoolabsConnection(
    where: ZoolabWhereInput
    orderBy: ZoolabOrderByInput
    skip: Int
    after: String
    before: String
    first: Int
    last: Int
  ): ZoolabConnection!
  jobsConnection(
    where: JobWhereInput
    orderBy: JobOrderByInput
    skip: Int
    after: String
    before: String
    first: Int
    last: Int
  ): JobConnection!
  alphazapsConnection(
    where: AlphazapWhereInput
    orderBy: AlphazapOrderByInput
    skip: Int
    after: String
    before: String
    first: Int
    last: Int
  ): AlphazapConnection!
  tresomsConnection(
    where: TresomWhereInput
    orderBy: TresomOrderByInput
    skip: Int
    after: String
    before: String
    first: Int
    last: Int
  ): TresomConnection!
  konklabsConnection(
    where: KonklabWhereInput
    orderBy: KonklabOrderByInput
    skip: Int
    after: String
    before: String
    first: Int
    last: Int
  ): KonklabConnection!
  stimsConnection(
    where: StimWhereInput
    orderBy: StimOrderByInput
    skip: Int
    after: String
    before: String
    first: Int
    last: Int
  ): StimConnection!
  ventosanzapsConnection(
    where: VentosanzapWhereInput
    orderBy: VentosanzapOrderByInput
    skip: Int
    after: String
    before: String
    first: Int
    last: Int
  ): VentosanzapConnection!
  voltsillamsConnection(
    where: VoltsillamWhereInput
    orderBy: VoltsillamOrderByInput
    skip: Int
    after: String
    before: String
    first: Int
    last: Int
  ): VoltsillamConnection!
  bigtaxesConnection(
    where: BigtaxWhereInput
    orderBy: BigtaxOrderByInput
    skip: Int
    after: String
    before: String
    first: Int
    last: Int
  ): BigtaxConnection!
  otcomsConnection(
    where: OtcomWhereInput
    orderBy: OtcomOrderByInput
    skip: Int
    after: String
    before: String
    first: Int
    last: Int
  ): OtcomConnection!
  latluxesConnection(
    where: LatluxWhereInput
    orderBy: LatluxOrderByInput
    skip: Int
    after: String
    before: String
    first: Int
    last: Int
  ): LatluxConnection!
  stringtoughsConnection(
    where: StringtoughWhereInput
    orderBy: StringtoughOrderByInput
    skip: Int
    after: String
    before: String
    first: Int
    last: Int
  ): StringtoughConnection!
  treeflexesConnection(
    where: TreeflexWhereInput
    orderBy: TreeflexOrderByInput
    skip: Int
    after: String
    before: String
    first: Int
    last: Int
  ): TreeflexConnection!
  zathinsConnection(
    where: ZathinWhereInput
    orderBy: ZathinOrderByInput
    skip: Int
    after: String
    before: String
    first: Int
    last: Int
  ): ZathinConnection!
  overholdsConnection(
    where: OverholdWhereInput
    orderBy: OverholdOrderByInput
    skip: Int
    after: String
    before: String
    first: Int
    last: Int
  ): OverholdConnection!
  redholdsConnection(
    where: RedholdWhereInput
    orderBy: RedholdOrderByInput
    skip: Int
    after: String
    before: String
    first: Int
    last: Int
  ): RedholdConnection!
  hatitiesConnection(
    where: HatityWhereInput
    orderBy: HatityOrderByInput
    skip: Int
    after: String
    before: String
    first: Int
    last: Int
  ): HatityConnection!
  ronstringsConnection(
    where: RonstringWhereInput
    orderBy: RonstringOrderByInput
    skip: Int
    after: String
    before: String
    first: Int
    last: Int
  ): RonstringConnection!
  sonairsConnection(
    where: SonairWhereInput
    orderBy: SonairOrderByInput
    skip: Int
    after: String
    before: String
    first: Int
    last: Int
  ): SonairConnection!
  # Fetches an object given its ID
  node(
    # The ID of an object
    id: ID!
  ): Node
}

type Redhold implements Node {
  status: Status!
  updatedAt: DateTime!
  createdAt: DateTime!
  id: ID!
  purple: Int
  grey: String!
  orchid: String
  yellow: String!
  white: String!
  salmon: DateTime!
  plum: DateTime!
  olive: Hatity
  tan: Mraz
  black: Von
}

# A connection to a list of items.
type RedholdConnection {
  # Information to aid in pagination.
  pageInfo: PageInfo!
  # A list of edges.
  edges: [RedholdEdge]!
  aggregate: AggregateRedhold!
}

input RedholdCreateInput {
  status: Status
  purple: Int
  grey: String!
  orchid: String
  yellow: String!
  white: String!
  salmon: DateTime!
  plum: DateTime!
  tan: Mraz
  black: Von
  olive: HatityCreateOneWithoutTurquoiseInput
}

input RedholdCreateManyWithoutOliveInput {
  create: [RedholdCreateWithoutOliveInput!]
  connect: [RedholdWhereUniqueInput!]
}

input RedholdCreateWithoutOliveInput {
  status: Status
  purple: Int
  grey: String!
  orchid: String
  yellow: String!
  white: String!
  salmon: DateTime!
  plum: DateTime!
  tan: Mraz
  black: Von
}

# An edge in a connection.
type RedholdEdge {
  # The item at the end of the edge.
  node: Redhold!
  # A cursor for use in pagination.
  cursor: String!
}

enum RedholdOrderByInput {
  status_ASC
  status_DESC
  updatedAt_ASC
  updatedAt_DESC
  createdAt_ASC
  createdAt_DESC
  id_ASC
  id_DESC
  purple_ASC
  purple_DESC
  grey_ASC
  grey_DESC
  orchid_ASC
  orchid_DESC
  yellow_ASC
  yellow_DESC
  white_ASC
  white_DESC
  salmon_ASC
  salmon_DESC
  plum_ASC
  plum_DESC
  tan_ASC
  tan_DESC
  black_ASC
  black_DESC
}

type RedholdPreviousValues {
  status: Status!
  updatedAt: DateTime!
  createdAt: DateTime!
  id: ID!
  purple: Int
  grey: String!
  orchid: String
  yellow: String!
  white: String!
  salmon: DateTime!
  plum: DateTime!
  tan: Mraz
  black: Von
}

input RedholdScalarWhereInput {
  # Logical AND on all given filters.
  AND: [RedholdScalarWhereInput!]
  # Logical OR on all given filters.
  OR: [RedholdScalarWhereInput!]
  # Logical NOT on all given filters combined by AND.
  NOT: [RedholdScalarWhereInput!]
  status: Status
  # All values that are not equal to given value.
  status_not: Status
  # All values that are contained in given list.
  status_in: [Status!]
  # All values that are not contained in given list.
  status_not_in: [Status!]
  updatedAt: DateTime
  # All values that are not equal to given value.
  updatedAt_not: DateTime
  # All values that are contained in given list.
  updatedAt_in: [DateTime!]
  # All values that are not contained in given list.
  updatedAt_not_in: [DateTime!]
  # All values less than the given value.
  updatedAt_lt: DateTime
  # All values less than or equal the given value.
  updatedAt_lte: DateTime
  # All values greater than the given value.
  updatedAt_gt: DateTime
  # All values greater than or equal the given value.
  updatedAt_gte: DateTime
  createdAt: DateTime
  # All values that are not equal to given value.
  createdAt_not: DateTime
  # All values that are contained in given list.
  createdAt_in: [DateTime!]
  # All values that are not contained in given list.
  createdAt_not_in: [DateTime!]
  # All values less than the given value.
  createdAt_lt: DateTime
  # All values less than or equal the given value.
  createdAt_lte: DateTime
  # All values greater than the given value.
  createdAt_gt: DateTime
  # All values greater than or equal the given value.
  createdAt_gte: DateTime
  id: ID
  # All values that are not equal to given value.
  id_not: ID
  # All values that are contained in given list.
  id_in: [ID!]
  # All values that are not contained in given list.
  id_not_in: [ID!]
  # All values less than the given value.
  id_lt: ID
  # All values less than or equal the given value.
  id_lte: ID
  # All values greater than the given value.
  id_gt: ID
  # All values greater than or equal the given value.
  id_gte: ID
  # All values containing the given string.
  id_contains: ID
  # All values not containing the given string.
  id_not_contains: ID
  # All values starting with the given string.
  id_starts_with: ID
  # All values not starting with the given string.
  id_not_starts_with: ID
  # All values ending with the given string.
  id_ends_with: ID
  # All values not ending with the given string.
  id_not_ends_with: ID
  purple: Int
  # All values that are not equal to given value.
  purple_not: Int
  # All values that are contained in given list.
  purple_in: [Int!]
  # All values that are not contained in given list.
  purple_not_in: [Int!]
  # All values less than the given value.
  purple_lt: Int
  # All values less than or equal the given value.
  purple_lte: Int
  # All values greater than the given value.
  purple_gt: Int
  # All values greater than or equal the given value.
  purple_gte: Int
  grey: String
  # All values that are not equal to given value.
  grey_not: String
  # All values that are contained in given list.
  grey_in: [String!]
  # All values that are not contained in given list.
  grey_not_in: [String!]
  # All values less than the given value.
  grey_lt: String
  # All values less than or equal the given value.
  grey_lte: String
  # All values greater than the given value.
  grey_gt: String
  # All values greater than or equal the given value.
  grey_gte: String
  # All values containing the given string.
  grey_contains: String
  # All values not containing the given string.
  grey_not_contains: String
  # All values starting with the given string.
  grey_starts_with: String
  # All values not starting with the given string.
  grey_not_starts_with: String
  # All values ending with the given string.
  grey_ends_with: String
  # All values not ending with the given string.
  grey_not_ends_with: String
  orchid: String
  # All values that are not equal to given value.
  orchid_not: String
  # All values that are contained in given list.
  orchid_in: [String!]
  # All values that are not contained in given list.
  orchid_not_in: [String!]
  # All values less than the given value.
  orchid_lt: String
  # All values less than or equal the given value.
  orchid_lte: String
  # All values greater than the given value.
  orchid_gt: String
  # All values greater than or equal the given value.
  orchid_gte: String
  # All values containing the given string.
  orchid_contains: String
  # All values not containing the given string.
  orchid_not_contains: String
  # All values starting with the given string.
  orchid_starts_with: String
  # All values not starting with the given string.
  orchid_not_starts_with: String
  # All values ending with the given string.
  orchid_ends_with: String
  # All values not ending with the given string.
  orchid_not_ends_with: String
  yellow: String
  # All values that are not equal to given value.
  yellow_not: String
  # All values that are contained in given list.
  yellow_in: [String!]
  # All values that are not contained in given list.
  yellow_not_in: [String!]
  # All values less than the given value.
  yellow_lt: String
  # All values less than or equal the given value.
  yellow_lte: String
  # All values greater than the given value.
  yellow_gt: String
  # All values greater than or equal the given value.
  yellow_gte: String
  # All values containing the given string.
  yellow_contains: String
  # All values not containing the given string.
  yellow_not_contains: String
  # All values starting with the given string.
  yellow_starts_with: String
  # All values not starting with the given string.
  yellow_not_starts_with: String
  # All values ending with the given string.
  yellow_ends_with: String
  # All values not ending with the given string.
  yellow_not_ends_with: String
  white: String
  # All values that are not equal to given value.
  white_not: String
  # All values that are contained in given list.
  white_in: [String!]
  # All values that are not contained in given list.
  white_not_in: [String!]
  # All values less than the given value.
  white_lt: String
  # All values less than or equal the given value.
  white_lte: String
  # All values greater than the given value.
  white_gt: String
  # All values greater than or equal the given value.
  white_gte: String
  # All values containing the given string.
  white_contains: String
  # All values not containing the given string.
  white_not_contains: String
  # All values starting with the given string.
  white_starts_with: String
  # All values not starting with the given string.
  white_not_starts_with: String
  # All values ending with the given string.
  white_ends_with: String
  # All values not ending with the given string.
  white_not_ends_with: String
  salmon: DateTime
  # All values that are not equal to given value.
  salmon_not: DateTime
  # All values that are contained in given list.
  salmon_in: [DateTime!]
  # All values that are not contained in given list.
  salmon_not_in: [DateTime!]
  # All values less than the given value.
  salmon_lt: DateTime
  # All values less than or equal the given value.
  salmon_lte: DateTime
  # All values greater than the given value.
  salmon_gt: DateTime
  # All values greater than or equal the given value.
  salmon_gte: DateTime
  plum: DateTime
  # All values that are not equal to given value.
  plum_not: DateTime
  # All values that are contained in given list.
  plum_in: [DateTime!]
  # All values that are not contained in given list.
  plum_not_in: [DateTime!]
  # All values less than the given value.
  plum_lt: DateTime
  # All values less than or equal the given value.
  plum_lte: DateTime
  # All values greater than the given value.
  plum_gt: DateTime
  # All values greater than or equal the given value.
  plum_gte: DateTime
  tan: Mraz
  # All values that are not equal to given value.
  tan_not: Mraz
  # All values that are contained in given list.
  tan_in: [Mraz!]
  # All values that are not contained in given list.
  tan_not_in: [Mraz!]
  black: Von
  # All values that are not equal to given value.
  black_not: Von
  # All values that are contained in given list.
  black_in: [Von!]
  # All values that are not contained in given list.
  black_not_in: [Von!]
}

type RedholdSubscriptionPayload {
  mutation: MutationType!
  node: Redhold
  updatedFields: [String!]
  previousValues: RedholdPreviousValues
}

input RedholdSubscriptionWhereInput {
  # Logical AND on all given filters.
  AND: [RedholdSubscriptionWhereInput!]
  # Logical OR on all given filters.
  OR: [RedholdSubscriptionWhereInput!]
  # Logical NOT on all given filters combined by AND.
  NOT: [RedholdSubscriptionWhereInput!]
  # The subscription event gets dispatched when it's listed in mutation_in
  mutation_in: [MutationType!]
  # The subscription event gets only dispatched when one of the updated fields names is included in this list
  updatedFields_contains: String
  # The subscription event gets only dispatched when all of the field names included in this list have been updated
  updatedFields_contains_every: [String!]
  # The subscription event gets only dispatched when some of the field names included in this list have been updated
  updatedFields_contains_some: [String!]
  node: RedholdWhereInput
}

input RedholdUpdateInput {
  status: Status
  purple: Int
  grey: String
  orchid: String
  yellow: String
  white: String
  salmon: DateTime
  plum: DateTime
  tan: Mraz
  black: Von
  olive: HatityUpdateOneWithoutTurquoiseInput
}

input RedholdUpdateManyDataInput {
  status: Status
  purple: Int
  grey: String
  orchid: String
  yellow: String
  white: String
  salmon: DateTime
  plum: DateTime
  tan: Mraz
  black: Von
}

input RedholdUpdateManyMutationInput {
  status: Status
  purple: Int
  grey: String
  orchid: String
  yellow: String
  white: String
  salmon: DateTime
  plum: DateTime
  tan: Mraz
  black: Von
}

input RedholdUpdateManyWithoutOliveInput {
  create: [RedholdCreateWithoutOliveInput!]
  connect: [RedholdWhereUniqueInput!]
  set: [RedholdWhereUniqueInput!]
  disconnect: [RedholdWhereUniqueInput!]
  delete: [RedholdWhereUniqueInput!]
  update: [RedholdUpdateWithWhereUniqueWithoutOliveInput!]
  updateMany: [RedholdUpdateManyWithWhereNestedInput!]
  deleteMany: [RedholdScalarWhereInput!]
  upsert: [RedholdUpsertWithWhereUniqueWithoutOliveInput!]
}

input RedholdUpdateManyWithWhereNestedInput {
  where: RedholdScalarWhereInput!
  data: RedholdUpdateManyDataInput!
}

input RedholdUpdateWithoutOliveDataInput {
  status: Status
  purple: Int
  grey: String
  orchid: String
  yellow: String
  white: String
  salmon: DateTime
  plum: DateTime
  tan: Mraz
  black: Von
}

input RedholdUpdateWithWhereUniqueWithoutOliveInput {
  where: RedholdWhereUniqueInput!
  data: RedholdUpdateWithoutOliveDataInput!
}

input RedholdUpsertWithWhereUniqueWithoutOliveInput {
  where: RedholdWhereUniqueInput!
  update: RedholdUpdateWithoutOliveDataInput!
  create: RedholdCreateWithoutOliveInput!
}

input RedholdWhereInput {
  # Logical AND on all given filters.
  AND: [RedholdWhereInput!]
  # Logical OR on all given filters.
  OR: [RedholdWhereInput!]
  # Logical NOT on all given filters combined by AND.
  NOT: [RedholdWhereInput!]
  status: Status
  # All values that are not equal to given value.
  status_not: Status
  # All values that are contained in given list.
  status_in: [Status!]
  # All values that are not contained in given list.
  status_not_in: [Status!]
  updatedAt: DateTime
  # All values that are not equal to given value.
  updatedAt_not: DateTime
  # All values that are contained in given list.
  updatedAt_in: [DateTime!]
  # All values that are not contained in given list.
  updatedAt_not_in: [DateTime!]
  # All values less than the given value.
  updatedAt_lt: DateTime
  # All values less than or equal the given value.
  updatedAt_lte: DateTime
  # All values greater than the given value.
  updatedAt_gt: DateTime
  # All values greater than or equal the given value.
  updatedAt_gte: DateTime
  createdAt: DateTime
  # All values that are not equal to given value.
  createdAt_not: DateTime
  # All values that are contained in given list.
  createdAt_in: [DateTime!]
  # All values that are not contained in given list.
  createdAt_not_in: [DateTime!]
  # All values less than the given value.
  createdAt_lt: DateTime
  # All values less than or equal the given value.
  createdAt_lte: DateTime
  # All values greater than the given value.
  createdAt_gt: DateTime
  # All values greater than or equal the given value.
  createdAt_gte: DateTime
  id: ID
  # All values that are not equal to given value.
  id_not: ID
  # All values that are contained in given list.
  id_in: [ID!]
  # All values that are not contained in given list.
  id_not_in: [ID!]
  # All values less than the given value.
  id_lt: ID
  # All values less than or equal the given value.
  id_lte: ID
  # All values greater than the given value.
  id_gt: ID
  # All values greater than or equal the given value.
  id_gte: ID
  # All values containing the given string.
  id_contains: ID
  # All values not containing the given string.
  id_not_contains: ID
  # All values starting with the given string.
  id_starts_with: ID
  # All values not starting with the given string.
  id_not_starts_with: ID
  # All values ending with the given string.
  id_ends_with: ID
  # All values not ending with the given string.
  id_not_ends_with: ID
  purple: Int
  # All values that are not equal to given value.
  purple_not: Int
  # All values that are contained in given list.
  purple_in: [Int!]
  # All values that are not contained in given list.
  purple_not_in: [Int!]
  # All values less than the given value.
  purple_lt: Int
  # All values less than or equal the given value.
  purple_lte: Int
  # All values greater than the given value.
  purple_gt: Int
  # All values greater than or equal the given value.
  purple_gte: Int
  grey: String
  # All values that are not equal to given value.
  grey_not: String
  # All values that are contained in given list.
  grey_in: [String!]
  # All values that are not contained in given list.
  grey_not_in: [String!]
  # All values less than the given value.
  grey_lt: String
  # All values less than or equal the given value.
  grey_lte: String
  # All values greater than the given value.
  grey_gt: String
  # All values greater than or equal the given value.
  grey_gte: String
  # All values containing the given string.
  grey_contains: String
  # All values not containing the given string.
  grey_not_contains: String
  # All values starting with the given string.
  grey_starts_with: String
  # All values not starting with the given string.
  grey_not_starts_with: String
  # All values ending with the given string.
  grey_ends_with: String
  # All values not ending with the given string.
  grey_not_ends_with: String
  orchid: String
  # All values that are not equal to given value.
  orchid_not: String
  # All values that are contained in given list.
  orchid_in: [String!]
  # All values that are not contained in given list.
  orchid_not_in: [String!]
  # All values less than the given value.
  orchid_lt: String
  # All values less than or equal the given value.
  orchid_lte: String
  # All values greater than the given value.
  orchid_gt: String
  # All values greater than or equal the given value.
  orchid_gte: String
  # All values containing the given string.
  orchid_contains: String
  # All values not containing the given string.
  orchid_not_contains: String
  # All values starting with the given string.
  orchid_starts_with: String
  # All values not starting with the given string.
  orchid_not_starts_with: String
  # All values ending with the given string.
  orchid_ends_with: String
  # All values not ending with the given string.
  orchid_not_ends_with: String
  yellow: String
  # All values that are not equal to given value.
  yellow_not: String
  # All values that are contained in given list.
  yellow_in: [String!]
  # All values that are not contained in given list.
  yellow_not_in: [String!]
  # All values less than the given value.
  yellow_lt: String
  # All values less than or equal the given value.
  yellow_lte: String
  # All values greater than the given value.
  yellow_gt: String
  # All values greater than or equal the given value.
  yellow_gte: String
  # All values containing the given string.
  yellow_contains: String
  # All values not containing the given string.
  yellow_not_contains: String
  # All values starting with the given string.
  yellow_starts_with: String
  # All values not starting with the given string.
  yellow_not_starts_with: String
  # All values ending with the given string.
  yellow_ends_with: String
  # All values not ending with the given string.
  yellow_not_ends_with: String
  white: String
  # All values that are not equal to given value.
  white_not: String
  # All values that are contained in given list.
  white_in: [String!]
  # All values that are not contained in given list.
  white_not_in: [String!]
  # All values less than the given value.
  white_lt: String
  # All values less than or equal the given value.
  white_lte: String
  # All values greater than the given value.
  white_gt: String
  # All values greater than or equal the given value.
  white_gte: String
  # All values containing the given string.
  white_contains: String
  # All values not containing the given string.
  white_not_contains: String
  # All values starting with the given string.
  white_starts_with: String
  # All values not starting with the given string.
  white_not_starts_with: String
  # All values ending with the given string.
  white_ends_with: String
  # All values not ending with the given string.
  white_not_ends_with: String
  salmon: DateTime
  # All values that are not equal to given value.
  salmon_not: DateTime
  # All values that are contained in given list.
  salmon_in: [DateTime!]
  # All values that are not contained in given list.
  salmon_not_in: [DateTime!]
  # All values less than the given value.
  salmon_lt: DateTime
  # All values less than or equal the given value.
  salmon_lte: DateTime
  # All values greater than the given value.
  salmon_gt: DateTime
  # All values greater than or equal the given value.
  salmon_gte: DateTime
  plum: DateTime
  # All values that are not equal to given value.
  plum_not: DateTime
  # All values that are contained in given list.
  plum_in: [DateTime!]
  # All values that are not contained in given list.
  plum_not_in: [DateTime!]
  # All values less than the given value.
  plum_lt: DateTime
  # All values less than or equal the given value.
  plum_lte: DateTime
  # All values greater than the given value.
  plum_gt: DateTime
  # All values greater than or equal the given value.
  plum_gte: DateTime
  tan: Mraz
  # All values that are not equal to given value.
  tan_not: Mraz
  # All values that are contained in given list.
  tan_in: [Mraz!]
  # All values that are not contained in given list.
  tan_not_in: [Mraz!]
  black: Von
  # All values that are not equal to given value.
  black_not: Von
  # All values that are contained in given list.
  black_in: [Von!]
  # All values that are not contained in given list.
  black_not_in: [Von!]
  olive: HatityWhereInput
}

input RedholdWhereUniqueInput {
  id: ID
  purple: Int
}

enum Rice {
  UT
  DELECTUS
  CORRUPTI
}

type RichText {
  raw: RichTextAST
  html: String
  markdown: String
  text: String
}

scalar RichTextAST

type Ronstring implements Node {
  status: Status!
  updatedAt: DateTime!
  createdAt: DateTime!
  id: ID!
  indigo: [String!]!
  plum: String!
  blue(
    where: TempWhereInput
    orderBy: TempOrderByInput
    skip: Int
    after: String
    before: String
    first: Int
    last: Int
  ): [Temp!]
}

# A connection to a list of items.
type RonstringConnection {
  # Information to aid in pagination.
  pageInfo: PageInfo!
  # A list of edges.
  edges: [RonstringEdge]!
  aggregate: AggregateRonstring!
}

input RonstringCreateindigoInput {
  set: [String!]
}

input RonstringCreateInput {
  status: Status
  plum: String!
  indigo: RonstringCreateindigoInput
  blue: TempCreateManyWithoutTurquoiseInput
}

input RonstringCreateManyWithoutBlueInput {
  create: [RonstringCreateWithoutBlueInput!]
  connect: [RonstringWhereUniqueInput!]
}

input RonstringCreateWithoutBlueInput {
  status: Status
  plum: String!
  indigo: RonstringCreateindigoInput
}

# An edge in a connection.
type RonstringEdge {
  # The item at the end of the edge.
  node: Ronstring!
  # A cursor for use in pagination.
  cursor: String!
}

enum RonstringOrderByInput {
  status_ASC
  status_DESC
  updatedAt_ASC
  updatedAt_DESC
  createdAt_ASC
  createdAt_DESC
  id_ASC
  id_DESC
  plum_ASC
  plum_DESC
}

type RonstringPreviousValues {
  status: Status!
  updatedAt: DateTime!
  createdAt: DateTime!
  id: ID!
  indigo: [String!]!
  plum: String!
}

input RonstringScalarWhereInput {
  # Logical AND on all given filters.
  AND: [RonstringScalarWhereInput!]
  # Logical OR on all given filters.
  OR: [RonstringScalarWhereInput!]
  # Logical NOT on all given filters combined by AND.
  NOT: [RonstringScalarWhereInput!]
  status: Status
  # All values that are not equal to given value.
  status_not: Status
  # All values that are contained in given list.
  status_in: [Status!]
  # All values that are not contained in given list.
  status_not_in: [Status!]
  updatedAt: DateTime
  # All values that are not equal to given value.
  updatedAt_not: DateTime
  # All values that are contained in given list.
  updatedAt_in: [DateTime!]
  # All values that are not contained in given list.
  updatedAt_not_in: [DateTime!]
  # All values less than the given value.
  updatedAt_lt: DateTime
  # All values less than or equal the given value.
  updatedAt_lte: DateTime
  # All values greater than the given value.
  updatedAt_gt: DateTime
  # All values greater than or equal the given value.
  updatedAt_gte: DateTime
  createdAt: DateTime
  # All values that are not equal to given value.
  createdAt_not: DateTime
  # All values that are contained in given list.
  createdAt_in: [DateTime!]
  # All values that are not contained in given list.
  createdAt_not_in: [DateTime!]
  # All values less than the given value.
  createdAt_lt: DateTime
  # All values less than or equal the given value.
  createdAt_lte: DateTime
  # All values greater than the given value.
  createdAt_gt: DateTime
  # All values greater than or equal the given value.
  createdAt_gte: DateTime
  id: ID
  # All values that are not equal to given value.
  id_not: ID
  # All values that are contained in given list.
  id_in: [ID!]
  # All values that are not contained in given list.
  id_not_in: [ID!]
  # All values less than the given value.
  id_lt: ID
  # All values less than or equal the given value.
  id_lte: ID
  # All values greater than the given value.
  id_gt: ID
  # All values greater than or equal the given value.
  id_gte: ID
  # All values containing the given string.
  id_contains: ID
  # All values not containing the given string.
  id_not_contains: ID
  # All values starting with the given string.
  id_starts_with: ID
  # All values not starting with the given string.
  id_not_starts_with: ID
  # All values ending with the given string.
  id_ends_with: ID
  # All values not ending with the given string.
  id_not_ends_with: ID
  plum: String
  # All values that are not equal to given value.
  plum_not: String
  # All values that are contained in given list.
  plum_in: [String!]
  # All values that are not contained in given list.
  plum_not_in: [String!]
  # All values less than the given value.
  plum_lt: String
  # All values less than or equal the given value.
  plum_lte: String
  # All values greater than the given value.
  plum_gt: String
  # All values greater than or equal the given value.
  plum_gte: String
  # All values containing the given string.
  plum_contains: String
  # All values not containing the given string.
  plum_not_contains: String
  # All values starting with the given string.
  plum_starts_with: String
  # All values not starting with the given string.
  plum_not_starts_with: String
  # All values ending with the given string.
  plum_ends_with: String
  # All values not ending with the given string.
  plum_not_ends_with: String
}

type RonstringSubscriptionPayload {
  mutation: MutationType!
  node: Ronstring
  updatedFields: [String!]
  previousValues: RonstringPreviousValues
}

input RonstringSubscriptionWhereInput {
  # Logical AND on all given filters.
  AND: [RonstringSubscriptionWhereInput!]
  # Logical OR on all given filters.
  OR: [RonstringSubscriptionWhereInput!]
  # Logical NOT on all given filters combined by AND.
  NOT: [RonstringSubscriptionWhereInput!]
  # The subscription event gets dispatched when it's listed in mutation_in
  mutation_in: [MutationType!]
  # The subscription event gets only dispatched when one of the updated fields names is included in this list
  updatedFields_contains: String
  # The subscription event gets only dispatched when all of the field names included in this list have been updated
  updatedFields_contains_every: [String!]
  # The subscription event gets only dispatched when some of the field names included in this list have been updated
  updatedFields_contains_some: [String!]
  node: RonstringWhereInput
}

input RonstringUpdateindigoInput {
  set: [String!]
}

input RonstringUpdateInput {
  status: Status
  plum: String
  indigo: RonstringUpdateindigoInput
  blue: TempUpdateManyWithoutTurquoiseInput
}

input RonstringUpdateManyDataInput {
  status: Status
  plum: String
  indigo: RonstringUpdateindigoInput
}

input RonstringUpdateManyMutationInput {
  status: Status
  plum: String
  indigo: RonstringUpdateindigoInput
}

input RonstringUpdateManyWithoutBlueInput {
  create: [RonstringCreateWithoutBlueInput!]
  connect: [RonstringWhereUniqueInput!]
  set: [RonstringWhereUniqueInput!]
  disconnect: [RonstringWhereUniqueInput!]
  delete: [RonstringWhereUniqueInput!]
  update: [RonstringUpdateWithWhereUniqueWithoutBlueInput!]
  updateMany: [RonstringUpdateManyWithWhereNestedInput!]
  deleteMany: [RonstringScalarWhereInput!]
  upsert: [RonstringUpsertWithWhereUniqueWithoutBlueInput!]
}

input RonstringUpdateManyWithWhereNestedInput {
  where: RonstringScalarWhereInput!
  data: RonstringUpdateManyDataInput!
}

input RonstringUpdateWithoutBlueDataInput {
  status: Status
  plum: String
  indigo: RonstringUpdateindigoInput
}

input RonstringUpdateWithWhereUniqueWithoutBlueInput {
  where: RonstringWhereUniqueInput!
  data: RonstringUpdateWithoutBlueDataInput!
}

input RonstringUpsertWithWhereUniqueWithoutBlueInput {
  where: RonstringWhereUniqueInput!
  update: RonstringUpdateWithoutBlueDataInput!
  create: RonstringCreateWithoutBlueInput!
}

input RonstringWhereInput {
  # Logical AND on all given filters.
  AND: [RonstringWhereInput!]
  # Logical OR on all given filters.
  OR: [RonstringWhereInput!]
  # Logical NOT on all given filters combined by AND.
  NOT: [RonstringWhereInput!]
  status: Status
  # All values that are not equal to given value.
  status_not: Status
  # All values that are contained in given list.
  status_in: [Status!]
  # All values that are not contained in given list.
  status_not_in: [Status!]
  updatedAt: DateTime
  # All values that are not equal to given value.
  updatedAt_not: DateTime
  # All values that are contained in given list.
  updatedAt_in: [DateTime!]
  # All values that are not contained in given list.
  updatedAt_not_in: [DateTime!]
  # All values less than the given value.
  updatedAt_lt: DateTime
  # All values less than or equal the given value.
  updatedAt_lte: DateTime
  # All values greater than the given value.
  updatedAt_gt: DateTime
  # All values greater than or equal the given value.
  updatedAt_gte: DateTime
  createdAt: DateTime
  # All values that are not equal to given value.
  createdAt_not: DateTime
  # All values that are contained in given list.
  createdAt_in: [DateTime!]
  # All values that are not contained in given list.
  createdAt_not_in: [DateTime!]
  # All values less than the given value.
  createdAt_lt: DateTime
  # All values less than or equal the given value.
  createdAt_lte: DateTime
  # All values greater than the given value.
  createdAt_gt: DateTime
  # All values greater than or equal the given value.
  createdAt_gte: DateTime
  id: ID
  # All values that are not equal to given value.
  id_not: ID
  # All values that are contained in given list.
  id_in: [ID!]
  # All values that are not contained in given list.
  id_not_in: [ID!]
  # All values less than the given value.
  id_lt: ID
  # All values less than or equal the given value.
  id_lte: ID
  # All values greater than the given value.
  id_gt: ID
  # All values greater than or equal the given value.
  id_gte: ID
  # All values containing the given string.
  id_contains: ID
  # All values not containing the given string.
  id_not_contains: ID
  # All values starting with the given string.
  id_starts_with: ID
  # All values not starting with the given string.
  id_not_starts_with: ID
  # All values ending with the given string.
  id_ends_with: ID
  # All values not ending with the given string.
  id_not_ends_with: ID
  plum: String
  # All values that are not equal to given value.
  plum_not: String
  # All values that are contained in given list.
  plum_in: [String!]
  # All values that are not contained in given list.
  plum_not_in: [String!]
  # All values less than the given value.
  plum_lt: String
  # All values less than or equal the given value.
  plum_lte: String
  # All values greater than the given value.
  plum_gt: String
  # All values greater than or equal the given value.
  plum_gte: String
  # All values containing the given string.
  plum_contains: String
  # All values not containing the given string.
  plum_not_contains: String
  # All values starting with the given string.
  plum_starts_with: String
  # All values not starting with the given string.
  plum_not_starts_with: String
  # All values ending with the given string.
  plum_ends_with: String
  # All values not ending with the given string.
  plum_not_ends_with: String
  blue_every: TempWhereInput
  blue_some: TempWhereInput
  blue_none: TempWhereInput
}

input RonstringWhereUniqueInput {
  id: ID
  plum: String
}

type Sonair implements Node {
  status: Status!
  updatedAt: DateTime!
  createdAt: DateTime!
  id: ID!
}

# A connection to a list of items.
type SonairConnection {
  # Information to aid in pagination.
  pageInfo: PageInfo!
  # A list of edges.
  edges: [SonairEdge]!
  aggregate: AggregateSonair!
}

input SonairCreateInput {
  status: Status
}

# An edge in a connection.
type SonairEdge {
  # The item at the end of the edge.
  node: Sonair!
  # A cursor for use in pagination.
  cursor: String!
}

enum SonairOrderByInput {
  status_ASC
  status_DESC
  updatedAt_ASC
  updatedAt_DESC
  createdAt_ASC
  createdAt_DESC
  id_ASC
  id_DESC
}

type SonairPreviousValues {
  status: Status!
  updatedAt: DateTime!
  createdAt: DateTime!
  id: ID!
}

type SonairSubscriptionPayload {
  mutation: MutationType!
  node: Sonair
  updatedFields: [String!]
  previousValues: SonairPreviousValues
}

input SonairSubscriptionWhereInput {
  # Logical AND on all given filters.
  AND: [SonairSubscriptionWhereInput!]
  # Logical OR on all given filters.
  OR: [SonairSubscriptionWhereInput!]
  # Logical NOT on all given filters combined by AND.
  NOT: [SonairSubscriptionWhereInput!]
  # The subscription event gets dispatched when it's listed in mutation_in
  mutation_in: [MutationType!]
  # The subscription event gets only dispatched when one of the updated fields names is included in this list
  updatedFields_contains: String
  # The subscription event gets only dispatched when all of the field names included in this list have been updated
  updatedFields_contains_every: [String!]
  # The subscription event gets only dispatched when some of the field names included in this list have been updated
  updatedFields_contains_some: [String!]
  node: SonairWhereInput
}

input SonairUpdateInput {
  status: Status
}

input SonairUpdateManyMutationInput {
  status: Status
}

input SonairWhereInput {
  # Logical AND on all given filters.
  AND: [SonairWhereInput!]
  # Logical OR on all given filters.
  OR: [SonairWhereInput!]
  # Logical NOT on all given filters combined by AND.
  NOT: [SonairWhereInput!]
  status: Status
  # All values that are not equal to given value.
  status_not: Status
  # All values that are contained in given list.
  status_in: [Status!]
  # All values that are not contained in given list.
  status_not_in: [Status!]
  updatedAt: DateTime
  # All values that are not equal to given value.
  updatedAt_not: DateTime
  # All values that are contained in given list.
  updatedAt_in: [DateTime!]
  # All values that are not contained in given list.
  updatedAt_not_in: [DateTime!]
  # All values less than the given value.
  updatedAt_lt: DateTime
  # All values less than or equal the given value.
  updatedAt_lte: DateTime
  # All values greater than the given value.
  updatedAt_gt: DateTime
  # All values greater than or equal the given value.
  updatedAt_gte: DateTime
  createdAt: DateTime
  # All values that are not equal to given value.
  createdAt_not: DateTime
  # All values that are contained in given list.
  createdAt_in: [DateTime!]
  # All values that are not contained in given list.
  createdAt_not_in: [DateTime!]
  # All values less than the given value.
  createdAt_lt: DateTime
  # All values less than or equal the given value.
  createdAt_lte: DateTime
  # All values greater than the given value.
  createdAt_gt: DateTime
  # All values greater than or equal the given value.
  createdAt_gte: DateTime
  id: ID
  # All values that are not equal to given value.
  id_not: ID
  # All values that are contained in given list.
  id_in: [ID!]
  # All values that are not contained in given list.
  id_not_in: [ID!]
  # All values less than the given value.
  id_lt: ID
  # All values less than or equal the given value.
  id_lte: ID
  # All values greater than the given value.
  id_gt: ID
  # All values greater than or equal the given value.
  id_gte: ID
  # All values containing the given string.
  id_contains: ID
  # All values not containing the given string.
  id_not_contains: ID
  # All values starting with the given string.
  id_starts_with: ID
  # All values not starting with the given string.
  id_not_starts_with: ID
  # All values ending with the given string.
  id_ends_with: ID
  # All values not ending with the given string.
  id_not_ends_with: ID
}

input SonairWhereUniqueInput {
  id: ID
}

type Sonsing implements Node {
  status: Status!
  updatedAt: DateTime!
  createdAt: DateTime!
  id: ID!
  red: Boolean!
  black: Boolean!
  lavender: Boolean!
  olive: String!
  silver: String
  green: String
  maroon: [Daugherty!]!
  azure: [Harris!]!
  ivory: [Muller!]!
  fuchsia: String
  gold: Lotlux
  white: Stronghold
  orchid: Lotlux
  grey: Stronghold
}

# A connection to a list of items.
type SonsingConnection {
  # Information to aid in pagination.
  pageInfo: PageInfo!
  # A list of edges.
  edges: [SonsingEdge]!
  aggregate: AggregateSonsing!
}

input SonsingCreateazureInput {
  set: [Harris!]
}

input SonsingCreateInput {
  status: Status
  red: Boolean!
  black: Boolean!
  lavender: Boolean!
  olive: String!
  silver: String
  green: String
  fuchsia: String
  maroon: SonsingCreatemaroonInput
  azure: SonsingCreateazureInput
  ivory: SonsingCreateivoryInput
  gold: LotluxCreateOneWithoutAzureInput
  white: StrongholdCreateOneWithoutIndigoInput
  orchid: LotluxCreateOneWithoutPlumInput
  grey: StrongholdCreateOneWithoutMagentaInput
}

input SonsingCreateivoryInput {
  set: [Muller!]
}

input SonsingCreatemaroonInput {
  set: [Daugherty!]
}

input SonsingCreateOneWithoutGoldInput {
  create: SonsingCreateWithoutGoldInput
  connect: SonsingWhereUniqueInput
}

input SonsingCreateOneWithoutGreyInput {
  create: SonsingCreateWithoutGreyInput
  connect: SonsingWhereUniqueInput
}

input SonsingCreateOneWithoutOrchidInput {
  create: SonsingCreateWithoutOrchidInput
  connect: SonsingWhereUniqueInput
}

input SonsingCreateOneWithoutWhiteInput {
  create: SonsingCreateWithoutWhiteInput
  connect: SonsingWhereUniqueInput
}

input SonsingCreateWithoutGoldInput {
  status: Status
  red: Boolean!
  black: Boolean!
  lavender: Boolean!
  olive: String!
  silver: String
  green: String
  fuchsia: String
  maroon: SonsingCreatemaroonInput
  azure: SonsingCreateazureInput
  ivory: SonsingCreateivoryInput
  white: StrongholdCreateOneWithoutIndigoInput
  orchid: LotluxCreateOneWithoutPlumInput
  grey: StrongholdCreateOneWithoutMagentaInput
}

input SonsingCreateWithoutGreyInput {
  status: Status
  red: Boolean!
  black: Boolean!
  lavender: Boolean!
  olive: String!
  silver: String
  green: String
  fuchsia: String
  maroon: SonsingCreatemaroonInput
  azure: SonsingCreateazureInput
  ivory: SonsingCreateivoryInput
  gold: LotluxCreateOneWithoutAzureInput
  white: StrongholdCreateOneWithoutIndigoInput
  orchid: LotluxCreateOneWithoutPlumInput
}

input SonsingCreateWithoutOrchidInput {
  status: Status
  red: Boolean!
  black: Boolean!
  lavender: Boolean!
  olive: String!
  silver: String
  green: String
  fuchsia: String
  maroon: SonsingCreatemaroonInput
  azure: SonsingCreateazureInput
  ivory: SonsingCreateivoryInput
  gold: LotluxCreateOneWithoutAzureInput
  white: StrongholdCreateOneWithoutIndigoInput
  grey: StrongholdCreateOneWithoutMagentaInput
}

input SonsingCreateWithoutWhiteInput {
  status: Status
  red: Boolean!
  black: Boolean!
  lavender: Boolean!
  olive: String!
  silver: String
  green: String
  fuchsia: String
  maroon: SonsingCreatemaroonInput
  azure: SonsingCreateazureInput
  ivory: SonsingCreateivoryInput
  gold: LotluxCreateOneWithoutAzureInput
  orchid: LotluxCreateOneWithoutPlumInput
  grey: StrongholdCreateOneWithoutMagentaInput
}

# An edge in a connection.
type SonsingEdge {
  # The item at the end of the edge.
  node: Sonsing!
  # A cursor for use in pagination.
  cursor: String!
}

enum SonsingOrderByInput {
  status_ASC
  status_DESC
  updatedAt_ASC
  updatedAt_DESC
  createdAt_ASC
  createdAt_DESC
  id_ASC
  id_DESC
  red_ASC
  red_DESC
  black_ASC
  black_DESC
  lavender_ASC
  lavender_DESC
  olive_ASC
  olive_DESC
  silver_ASC
  silver_DESC
  green_ASC
  green_DESC
  fuchsia_ASC
  fuchsia_DESC
}

type SonsingPreviousValues {
  status: Status!
  updatedAt: DateTime!
  createdAt: DateTime!
  id: ID!
  red: Boolean!
  black: Boolean!
  lavender: Boolean!
  olive: String!
  silver: String
  green: String
  maroon: [Daugherty!]!
  azure: [Harris!]!
  ivory: [Muller!]!
  fuchsia: String
}

type SonsingSubscriptionPayload {
  mutation: MutationType!
  node: Sonsing
  updatedFields: [String!]
  previousValues: SonsingPreviousValues
}

input SonsingSubscriptionWhereInput {
  # Logical AND on all given filters.
  AND: [SonsingSubscriptionWhereInput!]
  # Logical OR on all given filters.
  OR: [SonsingSubscriptionWhereInput!]
  # Logical NOT on all given filters combined by AND.
  NOT: [SonsingSubscriptionWhereInput!]
  # The subscription event gets dispatched when it's listed in mutation_in
  mutation_in: [MutationType!]
  # The subscription event gets only dispatched when one of the updated fields names is included in this list
  updatedFields_contains: String
  # The subscription event gets only dispatched when all of the field names included in this list have been updated
  updatedFields_contains_every: [String!]
  # The subscription event gets only dispatched when some of the field names included in this list have been updated
  updatedFields_contains_some: [String!]
  node: SonsingWhereInput
}

input SonsingUpdateazureInput {
  set: [Harris!]
}

input SonsingUpdateInput {
  status: Status
  red: Boolean
  black: Boolean
  lavender: Boolean
  olive: String
  silver: String
  green: String
  fuchsia: String
  maroon: SonsingUpdatemaroonInput
  azure: SonsingUpdateazureInput
  ivory: SonsingUpdateivoryInput
  gold: LotluxUpdateOneWithoutAzureInput
  white: StrongholdUpdateOneWithoutIndigoInput
  orchid: LotluxUpdateOneWithoutPlumInput
  grey: StrongholdUpdateOneWithoutMagentaInput
}

input SonsingUpdateivoryInput {
  set: [Muller!]
}

input SonsingUpdateManyMutationInput {
  status: Status
  red: Boolean
  black: Boolean
  lavender: Boolean
  olive: String
  silver: String
  green: String
  fuchsia: String
  maroon: SonsingUpdatemaroonInput
  azure: SonsingUpdateazureInput
  ivory: SonsingUpdateivoryInput
}

input SonsingUpdatemaroonInput {
  set: [Daugherty!]
}

input SonsingUpdateOneWithoutGoldInput {
  create: SonsingCreateWithoutGoldInput
  connect: SonsingWhereUniqueInput
  disconnect: Boolean
  delete: Boolean
  update: SonsingUpdateWithoutGoldDataInput
  upsert: SonsingUpsertWithoutGoldInput
}

input SonsingUpdateOneWithoutGreyInput {
  create: SonsingCreateWithoutGreyInput
  connect: SonsingWhereUniqueInput
  disconnect: Boolean
  delete: Boolean
  update: SonsingUpdateWithoutGreyDataInput
  upsert: SonsingUpsertWithoutGreyInput
}

input SonsingUpdateOneWithoutOrchidInput {
  create: SonsingCreateWithoutOrchidInput
  connect: SonsingWhereUniqueInput
  disconnect: Boolean
  delete: Boolean
  update: SonsingUpdateWithoutOrchidDataInput
  upsert: SonsingUpsertWithoutOrchidInput
}

input SonsingUpdateOneWithoutWhiteInput {
  create: SonsingCreateWithoutWhiteInput
  connect: SonsingWhereUniqueInput
  disconnect: Boolean
  delete: Boolean
  update: SonsingUpdateWithoutWhiteDataInput
  upsert: SonsingUpsertWithoutWhiteInput
}

input SonsingUpdateWithoutGoldDataInput {
  status: Status
  red: Boolean
  black: Boolean
  lavender: Boolean
  olive: String
  silver: String
  green: String
  fuchsia: String
  maroon: SonsingUpdatemaroonInput
  azure: SonsingUpdateazureInput
  ivory: SonsingUpdateivoryInput
  white: StrongholdUpdateOneWithoutIndigoInput
  orchid: LotluxUpdateOneWithoutPlumInput
  grey: StrongholdUpdateOneWithoutMagentaInput
}

input SonsingUpdateWithoutGreyDataInput {
  status: Status
  red: Boolean
  black: Boolean
  lavender: Boolean
  olive: String
  silver: String
  green: String
  fuchsia: String
  maroon: SonsingUpdatemaroonInput
  azure: SonsingUpdateazureInput
  ivory: SonsingUpdateivoryInput
  gold: LotluxUpdateOneWithoutAzureInput
  white: StrongholdUpdateOneWithoutIndigoInput
  orchid: LotluxUpdateOneWithoutPlumInput
}

input SonsingUpdateWithoutOrchidDataInput {
  status: Status
  red: Boolean
  black: Boolean
  lavender: Boolean
  olive: String
  silver: String
  green: String
  fuchsia: String
  maroon: SonsingUpdatemaroonInput
  azure: SonsingUpdateazureInput
  ivory: SonsingUpdateivoryInput
  gold: LotluxUpdateOneWithoutAzureInput
  white: StrongholdUpdateOneWithoutIndigoInput
  grey: StrongholdUpdateOneWithoutMagentaInput
}

input SonsingUpdateWithoutWhiteDataInput {
  status: Status
  red: Boolean
  black: Boolean
  lavender: Boolean
  olive: String
  silver: String
  green: String
  fuchsia: String
  maroon: SonsingUpdatemaroonInput
  azure: SonsingUpdateazureInput
  ivory: SonsingUpdateivoryInput
  gold: LotluxUpdateOneWithoutAzureInput
  orchid: LotluxUpdateOneWithoutPlumInput
  grey: StrongholdUpdateOneWithoutMagentaInput
}

input SonsingUpsertWithoutGoldInput {
  update: SonsingUpdateWithoutGoldDataInput!
  create: SonsingCreateWithoutGoldInput!
}

input SonsingUpsertWithoutGreyInput {
  update: SonsingUpdateWithoutGreyDataInput!
  create: SonsingCreateWithoutGreyInput!
}

input SonsingUpsertWithoutOrchidInput {
  update: SonsingUpdateWithoutOrchidDataInput!
  create: SonsingCreateWithoutOrchidInput!
}

input SonsingUpsertWithoutWhiteInput {
  update: SonsingUpdateWithoutWhiteDataInput!
  create: SonsingCreateWithoutWhiteInput!
}

input SonsingWhereInput {
  # Logical AND on all given filters.
  AND: [SonsingWhereInput!]
  # Logical OR on all given filters.
  OR: [SonsingWhereInput!]
  # Logical NOT on all given filters combined by AND.
  NOT: [SonsingWhereInput!]
  status: Status
  # All values that are not equal to given value.
  status_not: Status
  # All values that are contained in given list.
  status_in: [Status!]
  # All values that are not contained in given list.
  status_not_in: [Status!]
  updatedAt: DateTime
  # All values that are not equal to given value.
  updatedAt_not: DateTime
  # All values that are contained in given list.
  updatedAt_in: [DateTime!]
  # All values that are not contained in given list.
  updatedAt_not_in: [DateTime!]
  # All values less than the given value.
  updatedAt_lt: DateTime
  # All values less than or equal the given value.
  updatedAt_lte: DateTime
  # All values greater than the given value.
  updatedAt_gt: DateTime
  # All values greater than or equal the given value.
  updatedAt_gte: DateTime
  createdAt: DateTime
  # All values that are not equal to given value.
  createdAt_not: DateTime
  # All values that are contained in given list.
  createdAt_in: [DateTime!]
  # All values that are not contained in given list.
  createdAt_not_in: [DateTime!]
  # All values less than the given value.
  createdAt_lt: DateTime
  # All values less than or equal the given value.
  createdAt_lte: DateTime
  # All values greater than the given value.
  createdAt_gt: DateTime
  # All values greater than or equal the given value.
  createdAt_gte: DateTime
  id: ID
  # All values that are not equal to given value.
  id_not: ID
  # All values that are contained in given list.
  id_in: [ID!]
  # All values that are not contained in given list.
  id_not_in: [ID!]
  # All values less than the given value.
  id_lt: ID
  # All values less than or equal the given value.
  id_lte: ID
  # All values greater than the given value.
  id_gt: ID
  # All values greater than or equal the given value.
  id_gte: ID
  # All values containing the given string.
  id_contains: ID
  # All values not containing the given string.
  id_not_contains: ID
  # All values starting with the given string.
  id_starts_with: ID
  # All values not starting with the given string.
  id_not_starts_with: ID
  # All values ending with the given string.
  id_ends_with: ID
  # All values not ending with the given string.
  id_not_ends_with: ID
  red: Boolean
  # All values that are not equal to given value.
  red_not: Boolean
  black: Boolean
  # All values that are not equal to given value.
  black_not: Boolean
  lavender: Boolean
  # All values that are not equal to given value.
  lavender_not: Boolean
  olive: String
  # All values that are not equal to given value.
  olive_not: String
  # All values that are contained in given list.
  olive_in: [String!]
  # All values that are not contained in given list.
  olive_not_in: [String!]
  # All values less than the given value.
  olive_lt: String
  # All values less than or equal the given value.
  olive_lte: String
  # All values greater than the given value.
  olive_gt: String
  # All values greater than or equal the given value.
  olive_gte: String
  # All values containing the given string.
  olive_contains: String
  # All values not containing the given string.
  olive_not_contains: String
  # All values starting with the given string.
  olive_starts_with: String
  # All values not starting with the given string.
  olive_not_starts_with: String
  # All values ending with the given string.
  olive_ends_with: String
  # All values not ending with the given string.
  olive_not_ends_with: String
  silver: String
  # All values that are not equal to given value.
  silver_not: String
  # All values that are contained in given list.
  silver_in: [String!]
  # All values that are not contained in given list.
  silver_not_in: [String!]
  # All values less than the given value.
  silver_lt: String
  # All values less than or equal the given value.
  silver_lte: String
  # All values greater than the given value.
  silver_gt: String
  # All values greater than or equal the given value.
  silver_gte: String
  # All values containing the given string.
  silver_contains: String
  # All values not containing the given string.
  silver_not_contains: String
  # All values starting with the given string.
  silver_starts_with: String
  # All values not starting with the given string.
  silver_not_starts_with: String
  # All values ending with the given string.
  silver_ends_with: String
  # All values not ending with the given string.
  silver_not_ends_with: String
  green: String
  # All values that are not equal to given value.
  green_not: String
  # All values that are contained in given list.
  green_in: [String!]
  # All values that are not contained in given list.
  green_not_in: [String!]
  # All values less than the given value.
  green_lt: String
  # All values less than or equal the given value.
  green_lte: String
  # All values greater than the given value.
  green_gt: String
  # All values greater than or equal the given value.
  green_gte: String
  # All values containing the given string.
  green_contains: String
  # All values not containing the given string.
  green_not_contains: String
  # All values starting with the given string.
  green_starts_with: String
  # All values not starting with the given string.
  green_not_starts_with: String
  # All values ending with the given string.
  green_ends_with: String
  # All values not ending with the given string.
  green_not_ends_with: String
  fuchsia: String
  # All values that are not equal to given value.
  fuchsia_not: String
  # All values that are contained in given list.
  fuchsia_in: [String!]
  # All values that are not contained in given list.
  fuchsia_not_in: [String!]
  # All values less than the given value.
  fuchsia_lt: String
  # All values less than or equal the given value.
  fuchsia_lte: String
  # All values greater than the given value.
  fuchsia_gt: String
  # All values greater than or equal the given value.
  fuchsia_gte: String
  # All values containing the given string.
  fuchsia_contains: String
  # All values not containing the given string.
  fuchsia_not_contains: String
  # All values starting with the given string.
  fuchsia_starts_with: String
  # All values not starting with the given string.
  fuchsia_not_starts_with: String
  # All values ending with the given string.
  fuchsia_ends_with: String
  # All values not ending with the given string.
  fuchsia_not_ends_with: String
  gold: LotluxWhereInput
  white: StrongholdWhereInput
  orchid: LotluxWhereInput
  grey: StrongholdWhereInput
}

input SonsingWhereUniqueInput {
  id: ID
}

enum Status {
  DRAFT
  PUBLISHED
  ARCHIVED
}

type Stim implements Node {
  status: Status!
  updatedAt: DateTime!
  createdAt: DateTime!
  id: ID!
  silver: String!
  lavender: String!
  red: [Daugherty!]!
  yellow: String
}

# A connection to a list of items.
type StimConnection {
  # Information to aid in pagination.
  pageInfo: PageInfo!
  # A list of edges.
  edges: [StimEdge]!
  aggregate: AggregateStim!
}

input StimCreateInput {
  status: Status
  silver: String!
  lavender: String!
  yellow: String
  red: StimCreateredInput
}

input StimCreateredInput {
  set: [Daugherty!]
}

# An edge in a connection.
type StimEdge {
  # The item at the end of the edge.
  node: Stim!
  # A cursor for use in pagination.
  cursor: String!
}

enum StimOrderByInput {
  status_ASC
  status_DESC
  updatedAt_ASC
  updatedAt_DESC
  createdAt_ASC
  createdAt_DESC
  id_ASC
  id_DESC
  silver_ASC
  silver_DESC
  lavender_ASC
  lavender_DESC
  yellow_ASC
  yellow_DESC
}

type StimPreviousValues {
  status: Status!
  updatedAt: DateTime!
  createdAt: DateTime!
  id: ID!
  silver: String!
  lavender: String!
  red: [Daugherty!]!
  yellow: String
}

type StimSubscriptionPayload {
  mutation: MutationType!
  node: Stim
  updatedFields: [String!]
  previousValues: StimPreviousValues
}

input StimSubscriptionWhereInput {
  # Logical AND on all given filters.
  AND: [StimSubscriptionWhereInput!]
  # Logical OR on all given filters.
  OR: [StimSubscriptionWhereInput!]
  # Logical NOT on all given filters combined by AND.
  NOT: [StimSubscriptionWhereInput!]
  # The subscription event gets dispatched when it's listed in mutation_in
  mutation_in: [MutationType!]
  # The subscription event gets only dispatched when one of the updated fields names is included in this list
  updatedFields_contains: String
  # The subscription event gets only dispatched when all of the field names included in this list have been updated
  updatedFields_contains_every: [String!]
  # The subscription event gets only dispatched when some of the field names included in this list have been updated
  updatedFields_contains_some: [String!]
  node: StimWhereInput
}

input StimUpdateInput {
  status: Status
  silver: String
  lavender: String
  yellow: String
  red: StimUpdateredInput
}

input StimUpdateManyMutationInput {
  status: Status
  silver: String
  lavender: String
  yellow: String
  red: StimUpdateredInput
}

input StimUpdateredInput {
  set: [Daugherty!]
}

input StimWhereInput {
  # Logical AND on all given filters.
  AND: [StimWhereInput!]
  # Logical OR on all given filters.
  OR: [StimWhereInput!]
  # Logical NOT on all given filters combined by AND.
  NOT: [StimWhereInput!]
  status: Status
  # All values that are not equal to given value.
  status_not: Status
  # All values that are contained in given list.
  status_in: [Status!]
  # All values that are not contained in given list.
  status_not_in: [Status!]
  updatedAt: DateTime
  # All values that are not equal to given value.
  updatedAt_not: DateTime
  # All values that are contained in given list.
  updatedAt_in: [DateTime!]
  # All values that are not contained in given list.
  updatedAt_not_in: [DateTime!]
  # All values less than the given value.
  updatedAt_lt: DateTime
  # All values less than or equal the given value.
  updatedAt_lte: DateTime
  # All values greater than the given value.
  updatedAt_gt: DateTime
  # All values greater than or equal the given value.
  updatedAt_gte: DateTime
  createdAt: DateTime
  # All values that are not equal to given value.
  createdAt_not: DateTime
  # All values that are contained in given list.
  createdAt_in: [DateTime!]
  # All values that are not contained in given list.
  createdAt_not_in: [DateTime!]
  # All values less than the given value.
  createdAt_lt: DateTime
  # All values less than or equal the given value.
  createdAt_lte: DateTime
  # All values greater than the given value.
  createdAt_gt: DateTime
  # All values greater than or equal the given value.
  createdAt_gte: DateTime
  id: ID
  # All values that are not equal to given value.
  id_not: ID
  # All values that are contained in given list.
  id_in: [ID!]
  # All values that are not contained in given list.
  id_not_in: [ID!]
  # All values less than the given value.
  id_lt: ID
  # All values less than or equal the given value.
  id_lte: ID
  # All values greater than the given value.
  id_gt: ID
  # All values greater than or equal the given value.
  id_gte: ID
  # All values containing the given string.
  id_contains: ID
  # All values not containing the given string.
  id_not_contains: ID
  # All values starting with the given string.
  id_starts_with: ID
  # All values not starting with the given string.
  id_not_starts_with: ID
  # All values ending with the given string.
  id_ends_with: ID
  # All values not ending with the given string.
  id_not_ends_with: ID
  silver: String
  # All values that are not equal to given value.
  silver_not: String
  # All values that are contained in given list.
  silver_in: [String!]
  # All values that are not contained in given list.
  silver_not_in: [String!]
  # All values less than the given value.
  silver_lt: String
  # All values less than or equal the given value.
  silver_lte: String
  # All values greater than the given value.
  silver_gt: String
  # All values greater than or equal the given value.
  silver_gte: String
  # All values containing the given string.
  silver_contains: String
  # All values not containing the given string.
  silver_not_contains: String
  # All values starting with the given string.
  silver_starts_with: String
  # All values not starting with the given string.
  silver_not_starts_with: String
  # All values ending with the given string.
  silver_ends_with: String
  # All values not ending with the given string.
  silver_not_ends_with: String
  lavender: String
  # All values that are not equal to given value.
  lavender_not: String
  # All values that are contained in given list.
  lavender_in: [String!]
  # All values that are not contained in given list.
  lavender_not_in: [String!]
  # All values less than the given value.
  lavender_lt: String
  # All values less than or equal the given value.
  lavender_lte: String
  # All values greater than the given value.
  lavender_gt: String
  # All values greater than or equal the given value.
  lavender_gte: String
  # All values containing the given string.
  lavender_contains: String
  # All values not containing the given string.
  lavender_not_contains: String
  # All values starting with the given string.
  lavender_starts_with: String
  # All values not starting with the given string.
  lavender_not_starts_with: String
  # All values ending with the given string.
  lavender_ends_with: String
  # All values not ending with the given string.
  lavender_not_ends_with: String
  yellow: String
  # All values that are not equal to given value.
  yellow_not: String
  # All values that are contained in given list.
  yellow_in: [String!]
  # All values that are not contained in given list.
  yellow_not_in: [String!]
  # All values less than the given value.
  yellow_lt: String
  # All values less than or equal the given value.
  yellow_lte: String
  # All values greater than the given value.
  yellow_gt: String
  # All values greater than or equal the given value.
  yellow_gte: String
  # All values containing the given string.
  yellow_contains: String
  # All values not containing the given string.
  yellow_not_contains: String
  # All values starting with the given string.
  yellow_starts_with: String
  # All values not starting with the given string.
  yellow_not_starts_with: String
  # All values ending with the given string.
  yellow_ends_with: String
  # All values not ending with the given string.
  yellow_not_ends_with: String
}

input StimWhereUniqueInput {
  id: ID
}

type Stringtough implements Node {
  status: Status!
  updatedAt: DateTime!
  createdAt: DateTime!
  id: ID!
  violet: String!
  purple: [Harris!]!
  green: String!
}

# A connection to a list of items.
type StringtoughConnection {
  # Information to aid in pagination.
  pageInfo: PageInfo!
  # A list of edges.
  edges: [StringtoughEdge]!
  aggregate: AggregateStringtough!
}

input StringtoughCreateInput {
  status: Status
  violet: String!
  green: String!
  purple: StringtoughCreatepurpleInput
}

input StringtoughCreatepurpleInput {
  set: [Harris!]
}

# An edge in a connection.
type StringtoughEdge {
  # The item at the end of the edge.
  node: Stringtough!
  # A cursor for use in pagination.
  cursor: String!
}

enum StringtoughOrderByInput {
  status_ASC
  status_DESC
  updatedAt_ASC
  updatedAt_DESC
  createdAt_ASC
  createdAt_DESC
  id_ASC
  id_DESC
  violet_ASC
  violet_DESC
  green_ASC
  green_DESC
}

type StringtoughPreviousValues {
  status: Status!
  updatedAt: DateTime!
  createdAt: DateTime!
  id: ID!
  violet: String!
  purple: [Harris!]!
  green: String!
}

type StringtoughSubscriptionPayload {
  mutation: MutationType!
  node: Stringtough
  updatedFields: [String!]
  previousValues: StringtoughPreviousValues
}

input StringtoughSubscriptionWhereInput {
  # Logical AND on all given filters.
  AND: [StringtoughSubscriptionWhereInput!]
  # Logical OR on all given filters.
  OR: [StringtoughSubscriptionWhereInput!]
  # Logical NOT on all given filters combined by AND.
  NOT: [StringtoughSubscriptionWhereInput!]
  # The subscription event gets dispatched when it's listed in mutation_in
  mutation_in: [MutationType!]
  # The subscription event gets only dispatched when one of the updated fields names is included in this list
  updatedFields_contains: String
  # The subscription event gets only dispatched when all of the field names included in this list have been updated
  updatedFields_contains_every: [String!]
  # The subscription event gets only dispatched when some of the field names included in this list have been updated
  updatedFields_contains_some: [String!]
  node: StringtoughWhereInput
}

input StringtoughUpdateInput {
  status: Status
  violet: String
  green: String
  purple: StringtoughUpdatepurpleInput
}

input StringtoughUpdateManyMutationInput {
  status: Status
  violet: String
  green: String
  purple: StringtoughUpdatepurpleInput
}

input StringtoughUpdatepurpleInput {
  set: [Harris!]
}

input StringtoughWhereInput {
  # Logical AND on all given filters.
  AND: [StringtoughWhereInput!]
  # Logical OR on all given filters.
  OR: [StringtoughWhereInput!]
  # Logical NOT on all given filters combined by AND.
  NOT: [StringtoughWhereInput!]
  status: Status
  # All values that are not equal to given value.
  status_not: Status
  # All values that are contained in given list.
  status_in: [Status!]
  # All values that are not contained in given list.
  status_not_in: [Status!]
  updatedAt: DateTime
  # All values that are not equal to given value.
  updatedAt_not: DateTime
  # All values that are contained in given list.
  updatedAt_in: [DateTime!]
  # All values that are not contained in given list.
  updatedAt_not_in: [DateTime!]
  # All values less than the given value.
  updatedAt_lt: DateTime
  # All values less than or equal the given value.
  updatedAt_lte: DateTime
  # All values greater than the given value.
  updatedAt_gt: DateTime
  # All values greater than or equal the given value.
  updatedAt_gte: DateTime
  createdAt: DateTime
  # All values that are not equal to given value.
  createdAt_not: DateTime
  # All values that are contained in given list.
  createdAt_in: [DateTime!]
  # All values that are not contained in given list.
  createdAt_not_in: [DateTime!]
  # All values less than the given value.
  createdAt_lt: DateTime
  # All values less than or equal the given value.
  createdAt_lte: DateTime
  # All values greater than the given value.
  createdAt_gt: DateTime
  # All values greater than or equal the given value.
  createdAt_gte: DateTime
  id: ID
  # All values that are not equal to given value.
  id_not: ID
  # All values that are contained in given list.
  id_in: [ID!]
  # All values that are not contained in given list.
  id_not_in: [ID!]
  # All values less than the given value.
  id_lt: ID
  # All values less than or equal the given value.
  id_lte: ID
  # All values greater than the given value.
  id_gt: ID
  # All values greater than or equal the given value.
  id_gte: ID
  # All values containing the given string.
  id_contains: ID
  # All values not containing the given string.
  id_not_contains: ID
  # All values starting with the given string.
  id_starts_with: ID
  # All values not starting with the given string.
  id_not_starts_with: ID
  # All values ending with the given string.
  id_ends_with: ID
  # All values not ending with the given string.
  id_not_ends_with: ID
  violet: String
  # All values that are not equal to given value.
  violet_not: String
  # All values that are contained in given list.
  violet_in: [String!]
  # All values that are not contained in given list.
  violet_not_in: [String!]
  # All values less than the given value.
  violet_lt: String
  # All values less than or equal the given value.
  violet_lte: String
  # All values greater than the given value.
  violet_gt: String
  # All values greater than or equal the given value.
  violet_gte: String
  # All values containing the given string.
  violet_contains: String
  # All values not containing the given string.
  violet_not_contains: String
  # All values starting with the given string.
  violet_starts_with: String
  # All values not starting with the given string.
  violet_not_starts_with: String
  # All values ending with the given string.
  violet_ends_with: String
  # All values not ending with the given string.
  violet_not_ends_with: String
  green: String
  # All values that are not equal to given value.
  green_not: String
  # All values that are contained in given list.
  green_in: [String!]
  # All values that are not contained in given list.
  green_not_in: [String!]
  # All values less than the given value.
  green_lt: String
  # All values less than or equal the given value.
  green_lte: String
  # All values greater than the given value.
  green_gt: String
  # All values greater than or equal the given value.
  green_gte: String
  # All values containing the given string.
  green_contains: String
  # All values not containing the given string.
  green_not_contains: String
  # All values starting with the given string.
  green_starts_with: String
  # All values not starting with the given string.
  green_not_starts_with: String
  # All values ending with the given string.
  green_ends_with: String
  # All values not ending with the given string.
  green_not_ends_with: String
}

input StringtoughWhereUniqueInput {
  id: ID
  green: String
}

type Stronghold implements Node {
  status: Status!
  updatedAt: DateTime!
  createdAt: DateTime!
  id: ID!
  azure: String
  turquoise: Boolean
  indigo: Sonsing
  orchid(
    where: BamityWhereInput
    orderBy: BamityOrderByInput
    skip: Int
    after: String
    before: String
    first: Int
    last: Int
  ): [Bamity!]
  purple(
    where: ToughjoyfaxWhereInput
    orderBy: ToughjoyfaxOrderByInput
    skip: Int
    after: String
    before: String
    first: Int
    last: Int
  ): [Toughjoyfax!]
  green: Asset
  teal: Asset
  silver: Asset
  lavender: Asset
  magenta: Sonsing
}

# A connection to a list of items.
type StrongholdConnection {
  # Information to aid in pagination.
  pageInfo: PageInfo!
  # A list of edges.
  edges: [StrongholdEdge]!
  aggregate: AggregateStronghold!
}

input StrongholdCreateInput {
  status: Status
  azure: String
  turquoise: Boolean
  indigo: SonsingCreateOneWithoutWhiteInput
  orchid: BamityCreateManyWithoutMaroonInput
  purple: ToughjoyfaxCreateManyWithoutSalmonInput
  green: AssetCreateOneWithoutGreenStrongholdInput
  teal: AssetCreateOneWithoutTealStrongholdInput
  silver: AssetCreateOneWithoutSilverStrongholdInput
  lavender: AssetCreateOneWithoutLavenderStrongholdInput
  magenta: SonsingCreateOneWithoutGreyInput
}

input StrongholdCreateManyWithoutGreenInput {
  create: [StrongholdCreateWithoutGreenInput!]
  connect: [StrongholdWhereUniqueInput!]
}

input StrongholdCreateManyWithoutLavenderInput {
  create: [StrongholdCreateWithoutLavenderInput!]
  connect: [StrongholdWhereUniqueInput!]
}

input StrongholdCreateManyWithoutSilverInput {
  create: [StrongholdCreateWithoutSilverInput!]
  connect: [StrongholdWhereUniqueInput!]
}

input StrongholdCreateManyWithoutTealInput {
  create: [StrongholdCreateWithoutTealInput!]
  connect: [StrongholdWhereUniqueInput!]
}

input StrongholdCreateOneWithoutIndigoInput {
  create: StrongholdCreateWithoutIndigoInput
  connect: StrongholdWhereUniqueInput
}

input StrongholdCreateOneWithoutMagentaInput {
  create: StrongholdCreateWithoutMagentaInput
  connect: StrongholdWhereUniqueInput
}

input StrongholdCreateOneWithoutOrchidInput {
  create: StrongholdCreateWithoutOrchidInput
  connect: StrongholdWhereUniqueInput
}

input StrongholdCreateOneWithoutPurpleInput {
  create: StrongholdCreateWithoutPurpleInput
  connect: StrongholdWhereUniqueInput
}

input StrongholdCreateWithoutGreenInput {
  status: Status
  azure: String
  turquoise: Boolean
  indigo: SonsingCreateOneWithoutWhiteInput
  orchid: BamityCreateManyWithoutMaroonInput
  purple: ToughjoyfaxCreateManyWithoutSalmonInput
  teal: AssetCreateOneWithoutTealStrongholdInput
  silver: AssetCreateOneWithoutSilverStrongholdInput
  lavender: AssetCreateOneWithoutLavenderStrongholdInput
  magenta: SonsingCreateOneWithoutGreyInput
}

input StrongholdCreateWithoutIndigoInput {
  status: Status
  azure: String
  turquoise: Boolean
  orchid: BamityCreateManyWithoutMaroonInput
  purple: ToughjoyfaxCreateManyWithoutSalmonInput
  green: AssetCreateOneWithoutGreenStrongholdInput
  teal: AssetCreateOneWithoutTealStrongholdInput
  silver: AssetCreateOneWithoutSilverStrongholdInput
  lavender: AssetCreateOneWithoutLavenderStrongholdInput
  magenta: SonsingCreateOneWithoutGreyInput
}

input StrongholdCreateWithoutLavenderInput {
  status: Status
  azure: String
  turquoise: Boolean
  indigo: SonsingCreateOneWithoutWhiteInput
  orchid: BamityCreateManyWithoutMaroonInput
  purple: ToughjoyfaxCreateManyWithoutSalmonInput
  green: AssetCreateOneWithoutGreenStrongholdInput
  teal: AssetCreateOneWithoutTealStrongholdInput
  silver: AssetCreateOneWithoutSilverStrongholdInput
  magenta: SonsingCreateOneWithoutGreyInput
}

input StrongholdCreateWithoutMagentaInput {
  status: Status
  azure: String
  turquoise: Boolean
  indigo: SonsingCreateOneWithoutWhiteInput
  orchid: BamityCreateManyWithoutMaroonInput
  purple: ToughjoyfaxCreateManyWithoutSalmonInput
  green: AssetCreateOneWithoutGreenStrongholdInput
  teal: AssetCreateOneWithoutTealStrongholdInput
  silver: AssetCreateOneWithoutSilverStrongholdInput
  lavender: AssetCreateOneWithoutLavenderStrongholdInput
}

input StrongholdCreateWithoutOrchidInput {
  status: Status
  azure: String
  turquoise: Boolean
  indigo: SonsingCreateOneWithoutWhiteInput
  purple: ToughjoyfaxCreateManyWithoutSalmonInput
  green: AssetCreateOneWithoutGreenStrongholdInput
  teal: AssetCreateOneWithoutTealStrongholdInput
  silver: AssetCreateOneWithoutSilverStrongholdInput
  lavender: AssetCreateOneWithoutLavenderStrongholdInput
  magenta: SonsingCreateOneWithoutGreyInput
}

input StrongholdCreateWithoutPurpleInput {
  status: Status
  azure: String
  turquoise: Boolean
  indigo: SonsingCreateOneWithoutWhiteInput
  orchid: BamityCreateManyWithoutMaroonInput
  green: AssetCreateOneWithoutGreenStrongholdInput
  teal: AssetCreateOneWithoutTealStrongholdInput
  silver: AssetCreateOneWithoutSilverStrongholdInput
  lavender: AssetCreateOneWithoutLavenderStrongholdInput
  magenta: SonsingCreateOneWithoutGreyInput
}

input StrongholdCreateWithoutSilverInput {
  status: Status
  azure: String
  turquoise: Boolean
  indigo: SonsingCreateOneWithoutWhiteInput
  orchid: BamityCreateManyWithoutMaroonInput
  purple: ToughjoyfaxCreateManyWithoutSalmonInput
  green: AssetCreateOneWithoutGreenStrongholdInput
  teal: AssetCreateOneWithoutTealStrongholdInput
  lavender: AssetCreateOneWithoutLavenderStrongholdInput
  magenta: SonsingCreateOneWithoutGreyInput
}

input StrongholdCreateWithoutTealInput {
  status: Status
  azure: String
  turquoise: Boolean
  indigo: SonsingCreateOneWithoutWhiteInput
  orchid: BamityCreateManyWithoutMaroonInput
  purple: ToughjoyfaxCreateManyWithoutSalmonInput
  green: AssetCreateOneWithoutGreenStrongholdInput
  silver: AssetCreateOneWithoutSilverStrongholdInput
  lavender: AssetCreateOneWithoutLavenderStrongholdInput
  magenta: SonsingCreateOneWithoutGreyInput
}

# An edge in a connection.
type StrongholdEdge {
  # The item at the end of the edge.
  node: Stronghold!
  # A cursor for use in pagination.
  cursor: String!
}

enum StrongholdOrderByInput {
  status_ASC
  status_DESC
  updatedAt_ASC
  updatedAt_DESC
  createdAt_ASC
  createdAt_DESC
  id_ASC
  id_DESC
  azure_ASC
  azure_DESC
  turquoise_ASC
  turquoise_DESC
}

type StrongholdPreviousValues {
  status: Status!
  updatedAt: DateTime!
  createdAt: DateTime!
  id: ID!
  azure: String
  turquoise: Boolean
}

input StrongholdScalarWhereInput {
  # Logical AND on all given filters.
  AND: [StrongholdScalarWhereInput!]
  # Logical OR on all given filters.
  OR: [StrongholdScalarWhereInput!]
  # Logical NOT on all given filters combined by AND.
  NOT: [StrongholdScalarWhereInput!]
  status: Status
  # All values that are not equal to given value.
  status_not: Status
  # All values that are contained in given list.
  status_in: [Status!]
  # All values that are not contained in given list.
  status_not_in: [Status!]
  updatedAt: DateTime
  # All values that are not equal to given value.
  updatedAt_not: DateTime
  # All values that are contained in given list.
  updatedAt_in: [DateTime!]
  # All values that are not contained in given list.
  updatedAt_not_in: [DateTime!]
  # All values less than the given value.
  updatedAt_lt: DateTime
  # All values less than or equal the given value.
  updatedAt_lte: DateTime
  # All values greater than the given value.
  updatedAt_gt: DateTime
  # All values greater than or equal the given value.
  updatedAt_gte: DateTime
  createdAt: DateTime
  # All values that are not equal to given value.
  createdAt_not: DateTime
  # All values that are contained in given list.
  createdAt_in: [DateTime!]
  # All values that are not contained in given list.
  createdAt_not_in: [DateTime!]
  # All values less than the given value.
  createdAt_lt: DateTime
  # All values less than or equal the given value.
  createdAt_lte: DateTime
  # All values greater than the given value.
  createdAt_gt: DateTime
  # All values greater than or equal the given value.
  createdAt_gte: DateTime
  id: ID
  # All values that are not equal to given value.
  id_not: ID
  # All values that are contained in given list.
  id_in: [ID!]
  # All values that are not contained in given list.
  id_not_in: [ID!]
  # All values less than the given value.
  id_lt: ID
  # All values less than or equal the given value.
  id_lte: ID
  # All values greater than the given value.
  id_gt: ID
  # All values greater than or equal the given value.
  id_gte: ID
  # All values containing the given string.
  id_contains: ID
  # All values not containing the given string.
  id_not_contains: ID
  # All values starting with the given string.
  id_starts_with: ID
  # All values not starting with the given string.
  id_not_starts_with: ID
  # All values ending with the given string.
  id_ends_with: ID
  # All values not ending with the given string.
  id_not_ends_with: ID
  azure: String
  # All values that are not equal to given value.
  azure_not: String
  # All values that are contained in given list.
  azure_in: [String!]
  # All values that are not contained in given list.
  azure_not_in: [String!]
  # All values less than the given value.
  azure_lt: String
  # All values less than or equal the given value.
  azure_lte: String
  # All values greater than the given value.
  azure_gt: String
  # All values greater than or equal the given value.
  azure_gte: String
  # All values containing the given string.
  azure_contains: String
  # All values not containing the given string.
  azure_not_contains: String
  # All values starting with the given string.
  azure_starts_with: String
  # All values not starting with the given string.
  azure_not_starts_with: String
  # All values ending with the given string.
  azure_ends_with: String
  # All values not ending with the given string.
  azure_not_ends_with: String
  turquoise: Boolean
  # All values that are not equal to given value.
  turquoise_not: Boolean
}

type StrongholdSubscriptionPayload {
  mutation: MutationType!
  node: Stronghold
  updatedFields: [String!]
  previousValues: StrongholdPreviousValues
}

input StrongholdSubscriptionWhereInput {
  # Logical AND on all given filters.
  AND: [StrongholdSubscriptionWhereInput!]
  # Logical OR on all given filters.
  OR: [StrongholdSubscriptionWhereInput!]
  # Logical NOT on all given filters combined by AND.
  NOT: [StrongholdSubscriptionWhereInput!]
  # The subscription event gets dispatched when it's listed in mutation_in
  mutation_in: [MutationType!]
  # The subscription event gets only dispatched when one of the updated fields names is included in this list
  updatedFields_contains: String
  # The subscription event gets only dispatched when all of the field names included in this list have been updated
  updatedFields_contains_every: [String!]
  # The subscription event gets only dispatched when some of the field names included in this list have been updated
  updatedFields_contains_some: [String!]
  node: StrongholdWhereInput
}

input StrongholdUpdateInput {
  status: Status
  azure: String
  turquoise: Boolean
  indigo: SonsingUpdateOneWithoutWhiteInput
  orchid: BamityUpdateManyWithoutMaroonInput
  purple: ToughjoyfaxUpdateManyWithoutSalmonInput
  green: AssetUpdateOneWithoutGreenStrongholdInput
  teal: AssetUpdateOneWithoutTealStrongholdInput
  silver: AssetUpdateOneWithoutSilverStrongholdInput
  lavender: AssetUpdateOneWithoutLavenderStrongholdInput
  magenta: SonsingUpdateOneWithoutGreyInput
}

input StrongholdUpdateManyDataInput {
  status: Status
  azure: String
  turquoise: Boolean
}

input StrongholdUpdateManyMutationInput {
  status: Status
  azure: String
  turquoise: Boolean
}

input StrongholdUpdateManyWithoutGreenInput {
  create: [StrongholdCreateWithoutGreenInput!]
  connect: [StrongholdWhereUniqueInput!]
  set: [StrongholdWhereUniqueInput!]
  disconnect: [StrongholdWhereUniqueInput!]
  delete: [StrongholdWhereUniqueInput!]
  update: [StrongholdUpdateWithWhereUniqueWithoutGreenInput!]
  updateMany: [StrongholdUpdateManyWithWhereNestedInput!]
  deleteMany: [StrongholdScalarWhereInput!]
  upsert: [StrongholdUpsertWithWhereUniqueWithoutGreenInput!]
}

input StrongholdUpdateManyWithoutLavenderInput {
  create: [StrongholdCreateWithoutLavenderInput!]
  connect: [StrongholdWhereUniqueInput!]
  set: [StrongholdWhereUniqueInput!]
  disconnect: [StrongholdWhereUniqueInput!]
  delete: [StrongholdWhereUniqueInput!]
  update: [StrongholdUpdateWithWhereUniqueWithoutLavenderInput!]
  updateMany: [StrongholdUpdateManyWithWhereNestedInput!]
  deleteMany: [StrongholdScalarWhereInput!]
  upsert: [StrongholdUpsertWithWhereUniqueWithoutLavenderInput!]
}

input StrongholdUpdateManyWithoutSilverInput {
  create: [StrongholdCreateWithoutSilverInput!]
  connect: [StrongholdWhereUniqueInput!]
  set: [StrongholdWhereUniqueInput!]
  disconnect: [StrongholdWhereUniqueInput!]
  delete: [StrongholdWhereUniqueInput!]
  update: [StrongholdUpdateWithWhereUniqueWithoutSilverInput!]
  updateMany: [StrongholdUpdateManyWithWhereNestedInput!]
  deleteMany: [StrongholdScalarWhereInput!]
  upsert: [StrongholdUpsertWithWhereUniqueWithoutSilverInput!]
}

input StrongholdUpdateManyWithoutTealInput {
  create: [StrongholdCreateWithoutTealInput!]
  connect: [StrongholdWhereUniqueInput!]
  set: [StrongholdWhereUniqueInput!]
  disconnect: [StrongholdWhereUniqueInput!]
  delete: [StrongholdWhereUniqueInput!]
  update: [StrongholdUpdateWithWhereUniqueWithoutTealInput!]
  updateMany: [StrongholdUpdateManyWithWhereNestedInput!]
  deleteMany: [StrongholdScalarWhereInput!]
  upsert: [StrongholdUpsertWithWhereUniqueWithoutTealInput!]
}

input StrongholdUpdateManyWithWhereNestedInput {
  where: StrongholdScalarWhereInput!
  data: StrongholdUpdateManyDataInput!
}

input StrongholdUpdateOneWithoutIndigoInput {
  create: StrongholdCreateWithoutIndigoInput
  connect: StrongholdWhereUniqueInput
  disconnect: Boolean
  delete: Boolean
  update: StrongholdUpdateWithoutIndigoDataInput
  upsert: StrongholdUpsertWithoutIndigoInput
}

input StrongholdUpdateOneWithoutMagentaInput {
  create: StrongholdCreateWithoutMagentaInput
  connect: StrongholdWhereUniqueInput
  disconnect: Boolean
  delete: Boolean
  update: StrongholdUpdateWithoutMagentaDataInput
  upsert: StrongholdUpsertWithoutMagentaInput
}

input StrongholdUpdateOneWithoutOrchidInput {
  create: StrongholdCreateWithoutOrchidInput
  connect: StrongholdWhereUniqueInput
  disconnect: Boolean
  delete: Boolean
  update: StrongholdUpdateWithoutOrchidDataInput
  upsert: StrongholdUpsertWithoutOrchidInput
}

input StrongholdUpdateOneWithoutPurpleInput {
  create: StrongholdCreateWithoutPurpleInput
  connect: StrongholdWhereUniqueInput
  disconnect: Boolean
  delete: Boolean
  update: StrongholdUpdateWithoutPurpleDataInput
  upsert: StrongholdUpsertWithoutPurpleInput
}

input StrongholdUpdateWithoutGreenDataInput {
  status: Status
  azure: String
  turquoise: Boolean
  indigo: SonsingUpdateOneWithoutWhiteInput
  orchid: BamityUpdateManyWithoutMaroonInput
  purple: ToughjoyfaxUpdateManyWithoutSalmonInput
  teal: AssetUpdateOneWithoutTealStrongholdInput
  silver: AssetUpdateOneWithoutSilverStrongholdInput
  lavender: AssetUpdateOneWithoutLavenderStrongholdInput
  magenta: SonsingUpdateOneWithoutGreyInput
}

input StrongholdUpdateWithoutIndigoDataInput {
  status: Status
  azure: String
  turquoise: Boolean
  orchid: BamityUpdateManyWithoutMaroonInput
  purple: ToughjoyfaxUpdateManyWithoutSalmonInput
  green: AssetUpdateOneWithoutGreenStrongholdInput
  teal: AssetUpdateOneWithoutTealStrongholdInput
  silver: AssetUpdateOneWithoutSilverStrongholdInput
  lavender: AssetUpdateOneWithoutLavenderStrongholdInput
  magenta: SonsingUpdateOneWithoutGreyInput
}

input StrongholdUpdateWithoutLavenderDataInput {
  status: Status
  azure: String
  turquoise: Boolean
  indigo: SonsingUpdateOneWithoutWhiteInput
  orchid: BamityUpdateManyWithoutMaroonInput
  purple: ToughjoyfaxUpdateManyWithoutSalmonInput
  green: AssetUpdateOneWithoutGreenStrongholdInput
  teal: AssetUpdateOneWithoutTealStrongholdInput
  silver: AssetUpdateOneWithoutSilverStrongholdInput
  magenta: SonsingUpdateOneWithoutGreyInput
}

input StrongholdUpdateWithoutMagentaDataInput {
  status: Status
  azure: String
  turquoise: Boolean
  indigo: SonsingUpdateOneWithoutWhiteInput
  orchid: BamityUpdateManyWithoutMaroonInput
  purple: ToughjoyfaxUpdateManyWithoutSalmonInput
  green: AssetUpdateOneWithoutGreenStrongholdInput
  teal: AssetUpdateOneWithoutTealStrongholdInput
  silver: AssetUpdateOneWithoutSilverStrongholdInput
  lavender: AssetUpdateOneWithoutLavenderStrongholdInput
}

input StrongholdUpdateWithoutOrchidDataInput {
  status: Status
  azure: String
  turquoise: Boolean
  indigo: SonsingUpdateOneWithoutWhiteInput
  purple: ToughjoyfaxUpdateManyWithoutSalmonInput
  green: AssetUpdateOneWithoutGreenStrongholdInput
  teal: AssetUpdateOneWithoutTealStrongholdInput
  silver: AssetUpdateOneWithoutSilverStrongholdInput
  lavender: AssetUpdateOneWithoutLavenderStrongholdInput
  magenta: SonsingUpdateOneWithoutGreyInput
}

input StrongholdUpdateWithoutPurpleDataInput {
  status: Status
  azure: String
  turquoise: Boolean
  indigo: SonsingUpdateOneWithoutWhiteInput
  orchid: BamityUpdateManyWithoutMaroonInput
  green: AssetUpdateOneWithoutGreenStrongholdInput
  teal: AssetUpdateOneWithoutTealStrongholdInput
  silver: AssetUpdateOneWithoutSilverStrongholdInput
  lavender: AssetUpdateOneWithoutLavenderStrongholdInput
  magenta: SonsingUpdateOneWithoutGreyInput
}

input StrongholdUpdateWithoutSilverDataInput {
  status: Status
  azure: String
  turquoise: Boolean
  indigo: SonsingUpdateOneWithoutWhiteInput
  orchid: BamityUpdateManyWithoutMaroonInput
  purple: ToughjoyfaxUpdateManyWithoutSalmonInput
  green: AssetUpdateOneWithoutGreenStrongholdInput
  teal: AssetUpdateOneWithoutTealStrongholdInput
  lavender: AssetUpdateOneWithoutLavenderStrongholdInput
  magenta: SonsingUpdateOneWithoutGreyInput
}

input StrongholdUpdateWithoutTealDataInput {
  status: Status
  azure: String
  turquoise: Boolean
  indigo: SonsingUpdateOneWithoutWhiteInput
  orchid: BamityUpdateManyWithoutMaroonInput
  purple: ToughjoyfaxUpdateManyWithoutSalmonInput
  green: AssetUpdateOneWithoutGreenStrongholdInput
  silver: AssetUpdateOneWithoutSilverStrongholdInput
  lavender: AssetUpdateOneWithoutLavenderStrongholdInput
  magenta: SonsingUpdateOneWithoutGreyInput
}

input StrongholdUpdateWithWhereUniqueWithoutGreenInput {
  where: StrongholdWhereUniqueInput!
  data: StrongholdUpdateWithoutGreenDataInput!
}

input StrongholdUpdateWithWhereUniqueWithoutLavenderInput {
  where: StrongholdWhereUniqueInput!
  data: StrongholdUpdateWithoutLavenderDataInput!
}

input StrongholdUpdateWithWhereUniqueWithoutSilverInput {
  where: StrongholdWhereUniqueInput!
  data: StrongholdUpdateWithoutSilverDataInput!
}

input StrongholdUpdateWithWhereUniqueWithoutTealInput {
  where: StrongholdWhereUniqueInput!
  data: StrongholdUpdateWithoutTealDataInput!
}

input StrongholdUpsertWithoutIndigoInput {
  update: StrongholdUpdateWithoutIndigoDataInput!
  create: StrongholdCreateWithoutIndigoInput!
}

input StrongholdUpsertWithoutMagentaInput {
  update: StrongholdUpdateWithoutMagentaDataInput!
  create: StrongholdCreateWithoutMagentaInput!
}

input StrongholdUpsertWithoutOrchidInput {
  update: StrongholdUpdateWithoutOrchidDataInput!
  create: StrongholdCreateWithoutOrchidInput!
}

input StrongholdUpsertWithoutPurpleInput {
  update: StrongholdUpdateWithoutPurpleDataInput!
  create: StrongholdCreateWithoutPurpleInput!
}

input StrongholdUpsertWithWhereUniqueWithoutGreenInput {
  where: StrongholdWhereUniqueInput!
  update: StrongholdUpdateWithoutGreenDataInput!
  create: StrongholdCreateWithoutGreenInput!
}

input StrongholdUpsertWithWhereUniqueWithoutLavenderInput {
  where: StrongholdWhereUniqueInput!
  update: StrongholdUpdateWithoutLavenderDataInput!
  create: StrongholdCreateWithoutLavenderInput!
}

input StrongholdUpsertWithWhereUniqueWithoutSilverInput {
  where: StrongholdWhereUniqueInput!
  update: StrongholdUpdateWithoutSilverDataInput!
  create: StrongholdCreateWithoutSilverInput!
}

input StrongholdUpsertWithWhereUniqueWithoutTealInput {
  where: StrongholdWhereUniqueInput!
  update: StrongholdUpdateWithoutTealDataInput!
  create: StrongholdCreateWithoutTealInput!
}

input StrongholdWhereInput {
  # Logical AND on all given filters.
  AND: [StrongholdWhereInput!]
  # Logical OR on all given filters.
  OR: [StrongholdWhereInput!]
  # Logical NOT on all given filters combined by AND.
  NOT: [StrongholdWhereInput!]
  status: Status
  # All values that are not equal to given value.
  status_not: Status
  # All values that are contained in given list.
  status_in: [Status!]
  # All values that are not contained in given list.
  status_not_in: [Status!]
  updatedAt: DateTime
  # All values that are not equal to given value.
  updatedAt_not: DateTime
  # All values that are contained in given list.
  updatedAt_in: [DateTime!]
  # All values that are not contained in given list.
  updatedAt_not_in: [DateTime!]
  # All values less than the given value.
  updatedAt_lt: DateTime
  # All values less than or equal the given value.
  updatedAt_lte: DateTime
  # All values greater than the given value.
  updatedAt_gt: DateTime
  # All values greater than or equal the given value.
  updatedAt_gte: DateTime
  createdAt: DateTime
  # All values that are not equal to given value.
  createdAt_not: DateTime
  # All values that are contained in given list.
  createdAt_in: [DateTime!]
  # All values that are not contained in given list.
  createdAt_not_in: [DateTime!]
  # All values less than the given value.
  createdAt_lt: DateTime
  # All values less than or equal the given value.
  createdAt_lte: DateTime
  # All values greater than the given value.
  createdAt_gt: DateTime
  # All values greater than or equal the given value.
  createdAt_gte: DateTime
  id: ID
  # All values that are not equal to given value.
  id_not: ID
  # All values that are contained in given list.
  id_in: [ID!]
  # All values that are not contained in given list.
  id_not_in: [ID!]
  # All values less than the given value.
  id_lt: ID
  # All values less than or equal the given value.
  id_lte: ID
  # All values greater than the given value.
  id_gt: ID
  # All values greater than or equal the given value.
  id_gte: ID
  # All values containing the given string.
  id_contains: ID
  # All values not containing the given string.
  id_not_contains: ID
  # All values starting with the given string.
  id_starts_with: ID
  # All values not starting with the given string.
  id_not_starts_with: ID
  # All values ending with the given string.
  id_ends_with: ID
  # All values not ending with the given string.
  id_not_ends_with: ID
  azure: String
  # All values that are not equal to given value.
  azure_not: String
  # All values that are contained in given list.
  azure_in: [String!]
  # All values that are not contained in given list.
  azure_not_in: [String!]
  # All values less than the given value.
  azure_lt: String
  # All values less than or equal the given value.
  azure_lte: String
  # All values greater than the given value.
  azure_gt: String
  # All values greater than or equal the given value.
  azure_gte: String
  # All values containing the given string.
  azure_contains: String
  # All values not containing the given string.
  azure_not_contains: String
  # All values starting with the given string.
  azure_starts_with: String
  # All values not starting with the given string.
  azure_not_starts_with: String
  # All values ending with the given string.
  azure_ends_with: String
  # All values not ending with the given string.
  azure_not_ends_with: String
  turquoise: Boolean
  # All values that are not equal to given value.
  turquoise_not: Boolean
  indigo: SonsingWhereInput
  orchid_every: BamityWhereInput
  orchid_some: BamityWhereInput
  orchid_none: BamityWhereInput
  purple_every: ToughjoyfaxWhereInput
  purple_some: ToughjoyfaxWhereInput
  purple_none: ToughjoyfaxWhereInput
  green: AssetWhereInput
  teal: AssetWhereInput
  silver: AssetWhereInput
  lavender: AssetWhereInput
  magenta: SonsingWhereInput
}

input StrongholdWhereUniqueInput {
  id: ID
}

type Subin implements Node {
  status: Status!
  updatedAt: DateTime!
  createdAt: DateTime!
  id: ID!
  orange: String
  ivory: Blick!
  red: String
  maroon: String!
}

# A connection to a list of items.
type SubinConnection {
  # Information to aid in pagination.
  pageInfo: PageInfo!
  # A list of edges.
  edges: [SubinEdge]!
  aggregate: AggregateSubin!
}

input SubinCreateInput {
  status: Status
  orange: String
  ivory: Blick!
  red: String
  maroon: String!
}

# An edge in a connection.
type SubinEdge {
  # The item at the end of the edge.
  node: Subin!
  # A cursor for use in pagination.
  cursor: String!
}

enum SubinOrderByInput {
  status_ASC
  status_DESC
  updatedAt_ASC
  updatedAt_DESC
  createdAt_ASC
  createdAt_DESC
  id_ASC
  id_DESC
  orange_ASC
  orange_DESC
  ivory_ASC
  ivory_DESC
  red_ASC
  red_DESC
  maroon_ASC
  maroon_DESC
}

type SubinPreviousValues {
  status: Status!
  updatedAt: DateTime!
  createdAt: DateTime!
  id: ID!
  orange: String
  ivory: Blick!
  red: String
  maroon: String!
}

type SubinSubscriptionPayload {
  mutation: MutationType!
  node: Subin
  updatedFields: [String!]
  previousValues: SubinPreviousValues
}

input SubinSubscriptionWhereInput {
  # Logical AND on all given filters.
  AND: [SubinSubscriptionWhereInput!]
  # Logical OR on all given filters.
  OR: [SubinSubscriptionWhereInput!]
  # Logical NOT on all given filters combined by AND.
  NOT: [SubinSubscriptionWhereInput!]
  # The subscription event gets dispatched when it's listed in mutation_in
  mutation_in: [MutationType!]
  # The subscription event gets only dispatched when one of the updated fields names is included in this list
  updatedFields_contains: String
  # The subscription event gets only dispatched when all of the field names included in this list have been updated
  updatedFields_contains_every: [String!]
  # The subscription event gets only dispatched when some of the field names included in this list have been updated
  updatedFields_contains_some: [String!]
  node: SubinWhereInput
}

input SubinUpdateInput {
  status: Status
  orange: String
  ivory: Blick
  red: String
  maroon: String
}

input SubinUpdateManyMutationInput {
  status: Status
  orange: String
  ivory: Blick
  red: String
  maroon: String
}

input SubinWhereInput {
  # Logical AND on all given filters.
  AND: [SubinWhereInput!]
  # Logical OR on all given filters.
  OR: [SubinWhereInput!]
  # Logical NOT on all given filters combined by AND.
  NOT: [SubinWhereInput!]
  status: Status
  # All values that are not equal to given value.
  status_not: Status
  # All values that are contained in given list.
  status_in: [Status!]
  # All values that are not contained in given list.
  status_not_in: [Status!]
  updatedAt: DateTime
  # All values that are not equal to given value.
  updatedAt_not: DateTime
  # All values that are contained in given list.
  updatedAt_in: [DateTime!]
  # All values that are not contained in given list.
  updatedAt_not_in: [DateTime!]
  # All values less than the given value.
  updatedAt_lt: DateTime
  # All values less than or equal the given value.
  updatedAt_lte: DateTime
  # All values greater than the given value.
  updatedAt_gt: DateTime
  # All values greater than or equal the given value.
  updatedAt_gte: DateTime
  createdAt: DateTime
  # All values that are not equal to given value.
  createdAt_not: DateTime
  # All values that are contained in given list.
  createdAt_in: [DateTime!]
  # All values that are not contained in given list.
  createdAt_not_in: [DateTime!]
  # All values less than the given value.
  createdAt_lt: DateTime
  # All values less than or equal the given value.
  createdAt_lte: DateTime
  # All values greater than the given value.
  createdAt_gt: DateTime
  # All values greater than or equal the given value.
  createdAt_gte: DateTime
  id: ID
  # All values that are not equal to given value.
  id_not: ID
  # All values that are contained in given list.
  id_in: [ID!]
  # All values that are not contained in given list.
  id_not_in: [ID!]
  # All values less than the given value.
  id_lt: ID
  # All values less than or equal the given value.
  id_lte: ID
  # All values greater than the given value.
  id_gt: ID
  # All values greater than or equal the given value.
  id_gte: ID
  # All values containing the given string.
  id_contains: ID
  # All values not containing the given string.
  id_not_contains: ID
  # All values starting with the given string.
  id_starts_with: ID
  # All values not starting with the given string.
  id_not_starts_with: ID
  # All values ending with the given string.
  id_ends_with: ID
  # All values not ending with the given string.
  id_not_ends_with: ID
  orange: String
  # All values that are not equal to given value.
  orange_not: String
  # All values that are contained in given list.
  orange_in: [String!]
  # All values that are not contained in given list.
  orange_not_in: [String!]
  # All values less than the given value.
  orange_lt: String
  # All values less than or equal the given value.
  orange_lte: String
  # All values greater than the given value.
  orange_gt: String
  # All values greater than or equal the given value.
  orange_gte: String
  # All values containing the given string.
  orange_contains: String
  # All values not containing the given string.
  orange_not_contains: String
  # All values starting with the given string.
  orange_starts_with: String
  # All values not starting with the given string.
  orange_not_starts_with: String
  # All values ending with the given string.
  orange_ends_with: String
  # All values not ending with the given string.
  orange_not_ends_with: String
  ivory: Blick
  # All values that are not equal to given value.
  ivory_not: Blick
  # All values that are contained in given list.
  ivory_in: [Blick!]
  # All values that are not contained in given list.
  ivory_not_in: [Blick!]
  red: String
  # All values that are not equal to given value.
  red_not: String
  # All values that are contained in given list.
  red_in: [String!]
  # All values that are not contained in given list.
  red_not_in: [String!]
  # All values less than the given value.
  red_lt: String
  # All values less than or equal the given value.
  red_lte: String
  # All values greater than the given value.
  red_gt: String
  # All values greater than or equal the given value.
  red_gte: String
  # All values containing the given string.
  red_contains: String
  # All values not containing the given string.
  red_not_contains: String
  # All values starting with the given string.
  red_starts_with: String
  # All values not starting with the given string.
  red_not_starts_with: String
  # All values ending with the given string.
  red_ends_with: String
  # All values not ending with the given string.
  red_not_ends_with: String
  maroon: String
  # All values that are not equal to given value.
  maroon_not: String
  # All values that are contained in given list.
  maroon_in: [String!]
  # All values that are not contained in given list.
  maroon_not_in: [String!]
  # All values less than the given value.
  maroon_lt: String
  # All values less than or equal the given value.
  maroon_lte: String
  # All values greater than the given value.
  maroon_gt: String
  # All values greater than or equal the given value.
  maroon_gte: String
  # All values containing the given string.
  maroon_contains: String
  # All values not containing the given string.
  maroon_not_contains: String
  # All values starting with the given string.
  maroon_starts_with: String
  # All values not starting with the given string.
  maroon_not_starts_with: String
  # All values ending with the given string.
  maroon_ends_with: String
  # All values not ending with the given string.
  maroon_not_ends_with: String
}

input SubinWhereUniqueInput {
  id: ID
  orange: String
}

type Temp implements Node {
  status: Status!
  updatedAt: DateTime!
  createdAt: DateTime!
  id: ID!
  black: DateTime
  magenta: String!
  orange: String!
  tan: String
  teal: Blick!
  purple: String!
  grey: String
  olive: Asset
  blue: String!
  turquoise(
    where: RonstringWhereInput
    orderBy: RonstringOrderByInput
    skip: Int
    after: String
    before: String
    first: Int
    last: Int
  ): [Ronstring!]
}

# A connection to a list of items.
type TempConnection {
  # Information to aid in pagination.
  pageInfo: PageInfo!
  # A list of edges.
  edges: [TempEdge]!
  aggregate: AggregateTemp!
}

input TempCreateInput {
  status: Status
  black: DateTime
  magenta: String!
  orange: String!
  tan: String
  teal: Blick!
  purple: String!
  grey: String
  blue: String!
  olive: AssetCreateOneWithoutOliveTempInput
  turquoise: RonstringCreateManyWithoutBlueInput
}

input TempCreateManyWithoutOliveInput {
  create: [TempCreateWithoutOliveInput!]
  connect: [TempWhereUniqueInput!]
}

input TempCreateManyWithoutTurquoiseInput {
  create: [TempCreateWithoutTurquoiseInput!]
  connect: [TempWhereUniqueInput!]
}

input TempCreateWithoutOliveInput {
  status: Status
  black: DateTime
  magenta: String!
  orange: String!
  tan: String
  teal: Blick!
  purple: String!
  grey: String
  blue: String!
  turquoise: RonstringCreateManyWithoutBlueInput
}

input TempCreateWithoutTurquoiseInput {
  status: Status
  black: DateTime
  magenta: String!
  orange: String!
  tan: String
  teal: Blick!
  purple: String!
  grey: String
  blue: String!
  olive: AssetCreateOneWithoutOliveTempInput
}

# An edge in a connection.
type TempEdge {
  # The item at the end of the edge.
  node: Temp!
  # A cursor for use in pagination.
  cursor: String!
}

enum TempOrderByInput {
  status_ASC
  status_DESC
  updatedAt_ASC
  updatedAt_DESC
  createdAt_ASC
  createdAt_DESC
  id_ASC
  id_DESC
  black_ASC
  black_DESC
  magenta_ASC
  magenta_DESC
  orange_ASC
  orange_DESC
  tan_ASC
  tan_DESC
  teal_ASC
  teal_DESC
  purple_ASC
  purple_DESC
  grey_ASC
  grey_DESC
  blue_ASC
  blue_DESC
}

type TempPreviousValues {
  status: Status!
  updatedAt: DateTime!
  createdAt: DateTime!
  id: ID!
  black: DateTime
  magenta: String!
  orange: String!
  tan: String
  teal: Blick!
  purple: String!
  grey: String
  blue: String!
}

input TempScalarWhereInput {
  # Logical AND on all given filters.
  AND: [TempScalarWhereInput!]
  # Logical OR on all given filters.
  OR: [TempScalarWhereInput!]
  # Logical NOT on all given filters combined by AND.
  NOT: [TempScalarWhereInput!]
  status: Status
  # All values that are not equal to given value.
  status_not: Status
  # All values that are contained in given list.
  status_in: [Status!]
  # All values that are not contained in given list.
  status_not_in: [Status!]
  updatedAt: DateTime
  # All values that are not equal to given value.
  updatedAt_not: DateTime
  # All values that are contained in given list.
  updatedAt_in: [DateTime!]
  # All values that are not contained in given list.
  updatedAt_not_in: [DateTime!]
  # All values less than the given value.
  updatedAt_lt: DateTime
  # All values less than or equal the given value.
  updatedAt_lte: DateTime
  # All values greater than the given value.
  updatedAt_gt: DateTime
  # All values greater than or equal the given value.
  updatedAt_gte: DateTime
  createdAt: DateTime
  # All values that are not equal to given value.
  createdAt_not: DateTime
  # All values that are contained in given list.
  createdAt_in: [DateTime!]
  # All values that are not contained in given list.
  createdAt_not_in: [DateTime!]
  # All values less than the given value.
  createdAt_lt: DateTime
  # All values less than or equal the given value.
  createdAt_lte: DateTime
  # All values greater than the given value.
  createdAt_gt: DateTime
  # All values greater than or equal the given value.
  createdAt_gte: DateTime
  id: ID
  # All values that are not equal to given value.
  id_not: ID
  # All values that are contained in given list.
  id_in: [ID!]
  # All values that are not contained in given list.
  id_not_in: [ID!]
  # All values less than the given value.
  id_lt: ID
  # All values less than or equal the given value.
  id_lte: ID
  # All values greater than the given value.
  id_gt: ID
  # All values greater than or equal the given value.
  id_gte: ID
  # All values containing the given string.
  id_contains: ID
  # All values not containing the given string.
  id_not_contains: ID
  # All values starting with the given string.
  id_starts_with: ID
  # All values not starting with the given string.
  id_not_starts_with: ID
  # All values ending with the given string.
  id_ends_with: ID
  # All values not ending with the given string.
  id_not_ends_with: ID
  black: DateTime
  # All values that are not equal to given value.
  black_not: DateTime
  # All values that are contained in given list.
  black_in: [DateTime!]
  # All values that are not contained in given list.
  black_not_in: [DateTime!]
  # All values less than the given value.
  black_lt: DateTime
  # All values less than or equal the given value.
  black_lte: DateTime
  # All values greater than the given value.
  black_gt: DateTime
  # All values greater than or equal the given value.
  black_gte: DateTime
  magenta: String
  # All values that are not equal to given value.
  magenta_not: String
  # All values that are contained in given list.
  magenta_in: [String!]
  # All values that are not contained in given list.
  magenta_not_in: [String!]
  # All values less than the given value.
  magenta_lt: String
  # All values less than or equal the given value.
  magenta_lte: String
  # All values greater than the given value.
  magenta_gt: String
  # All values greater than or equal the given value.
  magenta_gte: String
  # All values containing the given string.
  magenta_contains: String
  # All values not containing the given string.
  magenta_not_contains: String
  # All values starting with the given string.
  magenta_starts_with: String
  # All values not starting with the given string.
  magenta_not_starts_with: String
  # All values ending with the given string.
  magenta_ends_with: String
  # All values not ending with the given string.
  magenta_not_ends_with: String
  orange: String
  # All values that are not equal to given value.
  orange_not: String
  # All values that are contained in given list.
  orange_in: [String!]
  # All values that are not contained in given list.
  orange_not_in: [String!]
  # All values less than the given value.
  orange_lt: String
  # All values less than or equal the given value.
  orange_lte: String
  # All values greater than the given value.
  orange_gt: String
  # All values greater than or equal the given value.
  orange_gte: String
  # All values containing the given string.
  orange_contains: String
  # All values not containing the given string.
  orange_not_contains: String
  # All values starting with the given string.
  orange_starts_with: String
  # All values not starting with the given string.
  orange_not_starts_with: String
  # All values ending with the given string.
  orange_ends_with: String
  # All values not ending with the given string.
  orange_not_ends_with: String
  tan: String
  # All values that are not equal to given value.
  tan_not: String
  # All values that are contained in given list.
  tan_in: [String!]
  # All values that are not contained in given list.
  tan_not_in: [String!]
  # All values less than the given value.
  tan_lt: String
  # All values less than or equal the given value.
  tan_lte: String
  # All values greater than the given value.
  tan_gt: String
  # All values greater than or equal the given value.
  tan_gte: String
  # All values containing the given string.
  tan_contains: String
  # All values not containing the given string.
  tan_not_contains: String
  # All values starting with the given string.
  tan_starts_with: String
  # All values not starting with the given string.
  tan_not_starts_with: String
  # All values ending with the given string.
  tan_ends_with: String
  # All values not ending with the given string.
  tan_not_ends_with: String
  teal: Blick
  # All values that are not equal to given value.
  teal_not: Blick
  # All values that are contained in given list.
  teal_in: [Blick!]
  # All values that are not contained in given list.
  teal_not_in: [Blick!]
  purple: String
  # All values that are not equal to given value.
  purple_not: String
  # All values that are contained in given list.
  purple_in: [String!]
  # All values that are not contained in given list.
  purple_not_in: [String!]
  # All values less than the given value.
  purple_lt: String
  # All values less than or equal the given value.
  purple_lte: String
  # All values greater than the given value.
  purple_gt: String
  # All values greater than or equal the given value.
  purple_gte: String
  # All values containing the given string.
  purple_contains: String
  # All values not containing the given string.
  purple_not_contains: String
  # All values starting with the given string.
  purple_starts_with: String
  # All values not starting with the given string.
  purple_not_starts_with: String
  # All values ending with the given string.
  purple_ends_with: String
  # All values not ending with the given string.
  purple_not_ends_with: String
  grey: String
  # All values that are not equal to given value.
  grey_not: String
  # All values that are contained in given list.
  grey_in: [String!]
  # All values that are not contained in given list.
  grey_not_in: [String!]
  # All values less than the given value.
  grey_lt: String
  # All values less than or equal the given value.
  grey_lte: String
  # All values greater than the given value.
  grey_gt: String
  # All values greater than or equal the given value.
  grey_gte: String
  # All values containing the given string.
  grey_contains: String
  # All values not containing the given string.
  grey_not_contains: String
  # All values starting with the given string.
  grey_starts_with: String
  # All values not starting with the given string.
  grey_not_starts_with: String
  # All values ending with the given string.
  grey_ends_with: String
  # All values not ending with the given string.
  grey_not_ends_with: String
  blue: String
  # All values that are not equal to given value.
  blue_not: String
  # All values that are contained in given list.
  blue_in: [String!]
  # All values that are not contained in given list.
  blue_not_in: [String!]
  # All values less than the given value.
  blue_lt: String
  # All values less than or equal the given value.
  blue_lte: String
  # All values greater than the given value.
  blue_gt: String
  # All values greater than or equal the given value.
  blue_gte: String
  # All values containing the given string.
  blue_contains: String
  # All values not containing the given string.
  blue_not_contains: String
  # All values starting with the given string.
  blue_starts_with: String
  # All values not starting with the given string.
  blue_not_starts_with: String
  # All values ending with the given string.
  blue_ends_with: String
  # All values not ending with the given string.
  blue_not_ends_with: String
}

type TempSubscriptionPayload {
  mutation: MutationType!
  node: Temp
  updatedFields: [String!]
  previousValues: TempPreviousValues
}

input TempSubscriptionWhereInput {
  # Logical AND on all given filters.
  AND: [TempSubscriptionWhereInput!]
  # Logical OR on all given filters.
  OR: [TempSubscriptionWhereInput!]
  # Logical NOT on all given filters combined by AND.
  NOT: [TempSubscriptionWhereInput!]
  # The subscription event gets dispatched when it's listed in mutation_in
  mutation_in: [MutationType!]
  # The subscription event gets only dispatched when one of the updated fields names is included in this list
  updatedFields_contains: String
  # The subscription event gets only dispatched when all of the field names included in this list have been updated
  updatedFields_contains_every: [String!]
  # The subscription event gets only dispatched when some of the field names included in this list have been updated
  updatedFields_contains_some: [String!]
  node: TempWhereInput
}

input TempUpdateInput {
  status: Status
  black: DateTime
  magenta: String
  orange: String
  tan: String
  teal: Blick
  purple: String
  grey: String
  blue: String
  olive: AssetUpdateOneWithoutOliveTempInput
  turquoise: RonstringUpdateManyWithoutBlueInput
}

input TempUpdateManyDataInput {
  status: Status
  black: DateTime
  magenta: String
  orange: String
  tan: String
  teal: Blick
  purple: String
  grey: String
  blue: String
}

input TempUpdateManyMutationInput {
  status: Status
  black: DateTime
  magenta: String
  orange: String
  tan: String
  teal: Blick
  purple: String
  grey: String
  blue: String
}

input TempUpdateManyWithoutOliveInput {
  create: [TempCreateWithoutOliveInput!]
  connect: [TempWhereUniqueInput!]
  set: [TempWhereUniqueInput!]
  disconnect: [TempWhereUniqueInput!]
  delete: [TempWhereUniqueInput!]
  update: [TempUpdateWithWhereUniqueWithoutOliveInput!]
  updateMany: [TempUpdateManyWithWhereNestedInput!]
  deleteMany: [TempScalarWhereInput!]
  upsert: [TempUpsertWithWhereUniqueWithoutOliveInput!]
}

input TempUpdateManyWithoutTurquoiseInput {
  create: [TempCreateWithoutTurquoiseInput!]
  connect: [TempWhereUniqueInput!]
  set: [TempWhereUniqueInput!]
  disconnect: [TempWhereUniqueInput!]
  delete: [TempWhereUniqueInput!]
  update: [TempUpdateWithWhereUniqueWithoutTurquoiseInput!]
  updateMany: [TempUpdateManyWithWhereNestedInput!]
  deleteMany: [TempScalarWhereInput!]
  upsert: [TempUpsertWithWhereUniqueWithoutTurquoiseInput!]
}

input TempUpdateManyWithWhereNestedInput {
  where: TempScalarWhereInput!
  data: TempUpdateManyDataInput!
}

input TempUpdateWithoutOliveDataInput {
  status: Status
  black: DateTime
  magenta: String
  orange: String
  tan: String
  teal: Blick
  purple: String
  grey: String
  blue: String
  turquoise: RonstringUpdateManyWithoutBlueInput
}

input TempUpdateWithoutTurquoiseDataInput {
  status: Status
  black: DateTime
  magenta: String
  orange: String
  tan: String
  teal: Blick
  purple: String
  grey: String
  blue: String
  olive: AssetUpdateOneWithoutOliveTempInput
}

input TempUpdateWithWhereUniqueWithoutOliveInput {
  where: TempWhereUniqueInput!
  data: TempUpdateWithoutOliveDataInput!
}

input TempUpdateWithWhereUniqueWithoutTurquoiseInput {
  where: TempWhereUniqueInput!
  data: TempUpdateWithoutTurquoiseDataInput!
}

input TempUpsertWithWhereUniqueWithoutOliveInput {
  where: TempWhereUniqueInput!
  update: TempUpdateWithoutOliveDataInput!
  create: TempCreateWithoutOliveInput!
}

input TempUpsertWithWhereUniqueWithoutTurquoiseInput {
  where: TempWhereUniqueInput!
  update: TempUpdateWithoutTurquoiseDataInput!
  create: TempCreateWithoutTurquoiseInput!
}

input TempWhereInput {
  # Logical AND on all given filters.
  AND: [TempWhereInput!]
  # Logical OR on all given filters.
  OR: [TempWhereInput!]
  # Logical NOT on all given filters combined by AND.
  NOT: [TempWhereInput!]
  status: Status
  # All values that are not equal to given value.
  status_not: Status
  # All values that are contained in given list.
  status_in: [Status!]
  # All values that are not contained in given list.
  status_not_in: [Status!]
  updatedAt: DateTime
  # All values that are not equal to given value.
  updatedAt_not: DateTime
  # All values that are contained in given list.
  updatedAt_in: [DateTime!]
  # All values that are not contained in given list.
  updatedAt_not_in: [DateTime!]
  # All values less than the given value.
  updatedAt_lt: DateTime
  # All values less than or equal the given value.
  updatedAt_lte: DateTime
  # All values greater than the given value.
  updatedAt_gt: DateTime
  # All values greater than or equal the given value.
  updatedAt_gte: DateTime
  createdAt: DateTime
  # All values that are not equal to given value.
  createdAt_not: DateTime
  # All values that are contained in given list.
  createdAt_in: [DateTime!]
  # All values that are not contained in given list.
  createdAt_not_in: [DateTime!]
  # All values less than the given value.
  createdAt_lt: DateTime
  # All values less than or equal the given value.
  createdAt_lte: DateTime
  # All values greater than the given value.
  createdAt_gt: DateTime
  # All values greater than or equal the given value.
  createdAt_gte: DateTime
  id: ID
  # All values that are not equal to given value.
  id_not: ID
  # All values that are contained in given list.
  id_in: [ID!]
  # All values that are not contained in given list.
  id_not_in: [ID!]
  # All values less than the given value.
  id_lt: ID
  # All values less than or equal the given value.
  id_lte: ID
  # All values greater than the given value.
  id_gt: ID
  # All values greater than or equal the given value.
  id_gte: ID
  # All values containing the given string.
  id_contains: ID
  # All values not containing the given string.
  id_not_contains: ID
  # All values starting with the given string.
  id_starts_with: ID
  # All values not starting with the given string.
  id_not_starts_with: ID
  # All values ending with the given string.
  id_ends_with: ID
  # All values not ending with the given string.
  id_not_ends_with: ID
  black: DateTime
  # All values that are not equal to given value.
  black_not: DateTime
  # All values that are contained in given list.
  black_in: [DateTime!]
  # All values that are not contained in given list.
  black_not_in: [DateTime!]
  # All values less than the given value.
  black_lt: DateTime
  # All values less than or equal the given value.
  black_lte: DateTime
  # All values greater than the given value.
  black_gt: DateTime
  # All values greater than or equal the given value.
  black_gte: DateTime
  magenta: String
  # All values that are not equal to given value.
  magenta_not: String
  # All values that are contained in given list.
  magenta_in: [String!]
  # All values that are not contained in given list.
  magenta_not_in: [String!]
  # All values less than the given value.
  magenta_lt: String
  # All values less than or equal the given value.
  magenta_lte: String
  # All values greater than the given value.
  magenta_gt: String
  # All values greater than or equal the given value.
  magenta_gte: String
  # All values containing the given string.
  magenta_contains: String
  # All values not containing the given string.
  magenta_not_contains: String
  # All values starting with the given string.
  magenta_starts_with: String
  # All values not starting with the given string.
  magenta_not_starts_with: String
  # All values ending with the given string.
  magenta_ends_with: String
  # All values not ending with the given string.
  magenta_not_ends_with: String
  orange: String
  # All values that are not equal to given value.
  orange_not: String
  # All values that are contained in given list.
  orange_in: [String!]
  # All values that are not contained in given list.
  orange_not_in: [String!]
  # All values less than the given value.
  orange_lt: String
  # All values less than or equal the given value.
  orange_lte: String
  # All values greater than the given value.
  orange_gt: String
  # All values greater than or equal the given value.
  orange_gte: String
  # All values containing the given string.
  orange_contains: String
  # All values not containing the given string.
  orange_not_contains: String
  # All values starting with the given string.
  orange_starts_with: String
  # All values not starting with the given string.
  orange_not_starts_with: String
  # All values ending with the given string.
  orange_ends_with: String
  # All values not ending with the given string.
  orange_not_ends_with: String
  tan: String
  # All values that are not equal to given value.
  tan_not: String
  # All values that are contained in given list.
  tan_in: [String!]
  # All values that are not contained in given list.
  tan_not_in: [String!]
  # All values less than the given value.
  tan_lt: String
  # All values less than or equal the given value.
  tan_lte: String
  # All values greater than the given value.
  tan_gt: String
  # All values greater than or equal the given value.
  tan_gte: String
  # All values containing the given string.
  tan_contains: String
  # All values not containing the given string.
  tan_not_contains: String
  # All values starting with the given string.
  tan_starts_with: String
  # All values not starting with the given string.
  tan_not_starts_with: String
  # All values ending with the given string.
  tan_ends_with: String
  # All values not ending with the given string.
  tan_not_ends_with: String
  teal: Blick
  # All values that are not equal to given value.
  teal_not: Blick
  # All values that are contained in given list.
  teal_in: [Blick!]
  # All values that are not contained in given list.
  teal_not_in: [Blick!]
  purple: String
  # All values that are not equal to given value.
  purple_not: String
  # All values that are contained in given list.
  purple_in: [String!]
  # All values that are not contained in given list.
  purple_not_in: [String!]
  # All values less than the given value.
  purple_lt: String
  # All values less than or equal the given value.
  purple_lte: String
  # All values greater than the given value.
  purple_gt: String
  # All values greater than or equal the given value.
  purple_gte: String
  # All values containing the given string.
  purple_contains: String
  # All values not containing the given string.
  purple_not_contains: String
  # All values starting with the given string.
  purple_starts_with: String
  # All values not starting with the given string.
  purple_not_starts_with: String
  # All values ending with the given string.
  purple_ends_with: String
  # All values not ending with the given string.
  purple_not_ends_with: String
  grey: String
  # All values that are not equal to given value.
  grey_not: String
  # All values that are contained in given list.
  grey_in: [String!]
  # All values that are not contained in given list.
  grey_not_in: [String!]
  # All values less than the given value.
  grey_lt: String
  # All values less than or equal the given value.
  grey_lte: String
  # All values greater than the given value.
  grey_gt: String
  # All values greater than or equal the given value.
  grey_gte: String
  # All values containing the given string.
  grey_contains: String
  # All values not containing the given string.
  grey_not_contains: String
  # All values starting with the given string.
  grey_starts_with: String
  # All values not starting with the given string.
  grey_not_starts_with: String
  # All values ending with the given string.
  grey_ends_with: String
  # All values not ending with the given string.
  grey_not_ends_with: String
  blue: String
  # All values that are not equal to given value.
  blue_not: String
  # All values that are contained in given list.
  blue_in: [String!]
  # All values that are not contained in given list.
  blue_not_in: [String!]
  # All values less than the given value.
  blue_lt: String
  # All values less than or equal the given value.
  blue_lte: String
  # All values greater than the given value.
  blue_gt: String
  # All values greater than or equal the given value.
  blue_gte: String
  # All values containing the given string.
  blue_contains: String
  # All values not containing the given string.
  blue_not_contains: String
  # All values starting with the given string.
  blue_starts_with: String
  # All values not starting with the given string.
  blue_not_starts_with: String
  # All values ending with the given string.
  blue_ends_with: String
  # All values not ending with the given string.
  blue_not_ends_with: String
  olive: AssetWhereInput
  turquoise_every: RonstringWhereInput
  turquoise_some: RonstringWhereInput
  turquoise_none: RonstringWhereInput
}

input TempWhereUniqueInput {
  id: ID
  tan: String
}

type Toughjoyfax implements Node {
  status: Status!
  updatedAt: DateTime!
  createdAt: DateTime!
  id: ID!
  red: DateTime!
  maroon: DateTime!
  silver: Boolean
  black: Morissette!
  salmon: Stronghold
  lime: String
  fuchsia: Boolean
}

# A connection to a list of items.
type ToughjoyfaxConnection {
  # Information to aid in pagination.
  pageInfo: PageInfo!
  # A list of edges.
  edges: [ToughjoyfaxEdge]!
  aggregate: AggregateToughjoyfax!
}

input ToughjoyfaxCreateInput {
  status: Status
  red: DateTime!
  maroon: DateTime!
  silver: Boolean
  black: Morissette!
  lime: String
  fuchsia: Boolean
  salmon: StrongholdCreateOneWithoutPurpleInput
}

input ToughjoyfaxCreateManyWithoutSalmonInput {
  create: [ToughjoyfaxCreateWithoutSalmonInput!]
  connect: [ToughjoyfaxWhereUniqueInput!]
}

input ToughjoyfaxCreateWithoutSalmonInput {
  status: Status
  red: DateTime!
  maroon: DateTime!
  silver: Boolean
  black: Morissette!
  lime: String
  fuchsia: Boolean
}

# An edge in a connection.
type ToughjoyfaxEdge {
  # The item at the end of the edge.
  node: Toughjoyfax!
  # A cursor for use in pagination.
  cursor: String!
}

enum ToughjoyfaxOrderByInput {
  status_ASC
  status_DESC
  updatedAt_ASC
  updatedAt_DESC
  createdAt_ASC
  createdAt_DESC
  id_ASC
  id_DESC
  red_ASC
  red_DESC
  maroon_ASC
  maroon_DESC
  silver_ASC
  silver_DESC
  black_ASC
  black_DESC
  lime_ASC
  lime_DESC
  fuchsia_ASC
  fuchsia_DESC
}

type ToughjoyfaxPreviousValues {
  status: Status!
  updatedAt: DateTime!
  createdAt: DateTime!
  id: ID!
  red: DateTime!
  maroon: DateTime!
  silver: Boolean
  black: Morissette!
  lime: String
  fuchsia: Boolean
}

input ToughjoyfaxScalarWhereInput {
  # Logical AND on all given filters.
  AND: [ToughjoyfaxScalarWhereInput!]
  # Logical OR on all given filters.
  OR: [ToughjoyfaxScalarWhereInput!]
  # Logical NOT on all given filters combined by AND.
  NOT: [ToughjoyfaxScalarWhereInput!]
  status: Status
  # All values that are not equal to given value.
  status_not: Status
  # All values that are contained in given list.
  status_in: [Status!]
  # All values that are not contained in given list.
  status_not_in: [Status!]
  updatedAt: DateTime
  # All values that are not equal to given value.
  updatedAt_not: DateTime
  # All values that are contained in given list.
  updatedAt_in: [DateTime!]
  # All values that are not contained in given list.
  updatedAt_not_in: [DateTime!]
  # All values less than the given value.
  updatedAt_lt: DateTime
  # All values less than or equal the given value.
  updatedAt_lte: DateTime
  # All values greater than the given value.
  updatedAt_gt: DateTime
  # All values greater than or equal the given value.
  updatedAt_gte: DateTime
  createdAt: DateTime
  # All values that are not equal to given value.
  createdAt_not: DateTime
  # All values that are contained in given list.
  createdAt_in: [DateTime!]
  # All values that are not contained in given list.
  createdAt_not_in: [DateTime!]
  # All values less than the given value.
  createdAt_lt: DateTime
  # All values less than or equal the given value.
  createdAt_lte: DateTime
  # All values greater than the given value.
  createdAt_gt: DateTime
  # All values greater than or equal the given value.
  createdAt_gte: DateTime
  id: ID
  # All values that are not equal to given value.
  id_not: ID
  # All values that are contained in given list.
  id_in: [ID!]
  # All values that are not contained in given list.
  id_not_in: [ID!]
  # All values less than the given value.
  id_lt: ID
  # All values less than or equal the given value.
  id_lte: ID
  # All values greater than the given value.
  id_gt: ID
  # All values greater than or equal the given value.
  id_gte: ID
  # All values containing the given string.
  id_contains: ID
  # All values not containing the given string.
  id_not_contains: ID
  # All values starting with the given string.
  id_starts_with: ID
  # All values not starting with the given string.
  id_not_starts_with: ID
  # All values ending with the given string.
  id_ends_with: ID
  # All values not ending with the given string.
  id_not_ends_with: ID
  red: DateTime
  # All values that are not equal to given value.
  red_not: DateTime
  # All values that are contained in given list.
  red_in: [DateTime!]
  # All values that are not contained in given list.
  red_not_in: [DateTime!]
  # All values less than the given value.
  red_lt: DateTime
  # All values less than or equal the given value.
  red_lte: DateTime
  # All values greater than the given value.
  red_gt: DateTime
  # All values greater than or equal the given value.
  red_gte: DateTime
  maroon: DateTime
  # All values that are not equal to given value.
  maroon_not: DateTime
  # All values that are contained in given list.
  maroon_in: [DateTime!]
  # All values that are not contained in given list.
  maroon_not_in: [DateTime!]
  # All values less than the given value.
  maroon_lt: DateTime
  # All values less than or equal the given value.
  maroon_lte: DateTime
  # All values greater than the given value.
  maroon_gt: DateTime
  # All values greater than or equal the given value.
  maroon_gte: DateTime
  silver: Boolean
  # All values that are not equal to given value.
  silver_not: Boolean
  black: Morissette
  # All values that are not equal to given value.
  black_not: Morissette
  # All values that are contained in given list.
  black_in: [Morissette!]
  # All values that are not contained in given list.
  black_not_in: [Morissette!]
  lime: String
  # All values that are not equal to given value.
  lime_not: String
  # All values that are contained in given list.
  lime_in: [String!]
  # All values that are not contained in given list.
  lime_not_in: [String!]
  # All values less than the given value.
  lime_lt: String
  # All values less than or equal the given value.
  lime_lte: String
  # All values greater than the given value.
  lime_gt: String
  # All values greater than or equal the given value.
  lime_gte: String
  # All values containing the given string.
  lime_contains: String
  # All values not containing the given string.
  lime_not_contains: String
  # All values starting with the given string.
  lime_starts_with: String
  # All values not starting with the given string.
  lime_not_starts_with: String
  # All values ending with the given string.
  lime_ends_with: String
  # All values not ending with the given string.
  lime_not_ends_with: String
  fuchsia: Boolean
  # All values that are not equal to given value.
  fuchsia_not: Boolean
}

type ToughjoyfaxSubscriptionPayload {
  mutation: MutationType!
  node: Toughjoyfax
  updatedFields: [String!]
  previousValues: ToughjoyfaxPreviousValues
}

input ToughjoyfaxSubscriptionWhereInput {
  # Logical AND on all given filters.
  AND: [ToughjoyfaxSubscriptionWhereInput!]
  # Logical OR on all given filters.
  OR: [ToughjoyfaxSubscriptionWhereInput!]
  # Logical NOT on all given filters combined by AND.
  NOT: [ToughjoyfaxSubscriptionWhereInput!]
  # The subscription event gets dispatched when it's listed in mutation_in
  mutation_in: [MutationType!]
  # The subscription event gets only dispatched when one of the updated fields names is included in this list
  updatedFields_contains: String
  # The subscription event gets only dispatched when all of the field names included in this list have been updated
  updatedFields_contains_every: [String!]
  # The subscription event gets only dispatched when some of the field names included in this list have been updated
  updatedFields_contains_some: [String!]
  node: ToughjoyfaxWhereInput
}

input ToughjoyfaxUpdateInput {
  status: Status
  red: DateTime
  maroon: DateTime
  silver: Boolean
  black: Morissette
  lime: String
  fuchsia: Boolean
  salmon: StrongholdUpdateOneWithoutPurpleInput
}

input ToughjoyfaxUpdateManyDataInput {
  status: Status
  red: DateTime
  maroon: DateTime
  silver: Boolean
  black: Morissette
  lime: String
  fuchsia: Boolean
}

input ToughjoyfaxUpdateManyMutationInput {
  status: Status
  red: DateTime
  maroon: DateTime
  silver: Boolean
  black: Morissette
  lime: String
  fuchsia: Boolean
}

input ToughjoyfaxUpdateManyWithoutSalmonInput {
  create: [ToughjoyfaxCreateWithoutSalmonInput!]
  connect: [ToughjoyfaxWhereUniqueInput!]
  set: [ToughjoyfaxWhereUniqueInput!]
  disconnect: [ToughjoyfaxWhereUniqueInput!]
  delete: [ToughjoyfaxWhereUniqueInput!]
  update: [ToughjoyfaxUpdateWithWhereUniqueWithoutSalmonInput!]
  updateMany: [ToughjoyfaxUpdateManyWithWhereNestedInput!]
  deleteMany: [ToughjoyfaxScalarWhereInput!]
  upsert: [ToughjoyfaxUpsertWithWhereUniqueWithoutSalmonInput!]
}

input ToughjoyfaxUpdateManyWithWhereNestedInput {
  where: ToughjoyfaxScalarWhereInput!
  data: ToughjoyfaxUpdateManyDataInput!
}

input ToughjoyfaxUpdateWithoutSalmonDataInput {
  status: Status
  red: DateTime
  maroon: DateTime
  silver: Boolean
  black: Morissette
  lime: String
  fuchsia: Boolean
}

input ToughjoyfaxUpdateWithWhereUniqueWithoutSalmonInput {
  where: ToughjoyfaxWhereUniqueInput!
  data: ToughjoyfaxUpdateWithoutSalmonDataInput!
}

input ToughjoyfaxUpsertWithWhereUniqueWithoutSalmonInput {
  where: ToughjoyfaxWhereUniqueInput!
  update: ToughjoyfaxUpdateWithoutSalmonDataInput!
  create: ToughjoyfaxCreateWithoutSalmonInput!
}

input ToughjoyfaxWhereInput {
  # Logical AND on all given filters.
  AND: [ToughjoyfaxWhereInput!]
  # Logical OR on all given filters.
  OR: [ToughjoyfaxWhereInput!]
  # Logical NOT on all given filters combined by AND.
  NOT: [ToughjoyfaxWhereInput!]
  status: Status
  # All values that are not equal to given value.
  status_not: Status
  # All values that are contained in given list.
  status_in: [Status!]
  # All values that are not contained in given list.
  status_not_in: [Status!]
  updatedAt: DateTime
  # All values that are not equal to given value.
  updatedAt_not: DateTime
  # All values that are contained in given list.
  updatedAt_in: [DateTime!]
  # All values that are not contained in given list.
  updatedAt_not_in: [DateTime!]
  # All values less than the given value.
  updatedAt_lt: DateTime
  # All values less than or equal the given value.
  updatedAt_lte: DateTime
  # All values greater than the given value.
  updatedAt_gt: DateTime
  # All values greater than or equal the given value.
  updatedAt_gte: DateTime
  createdAt: DateTime
  # All values that are not equal to given value.
  createdAt_not: DateTime
  # All values that are contained in given list.
  createdAt_in: [DateTime!]
  # All values that are not contained in given list.
  createdAt_not_in: [DateTime!]
  # All values less than the given value.
  createdAt_lt: DateTime
  # All values less than or equal the given value.
  createdAt_lte: DateTime
  # All values greater than the given value.
  createdAt_gt: DateTime
  # All values greater than or equal the given value.
  createdAt_gte: DateTime
  id: ID
  # All values that are not equal to given value.
  id_not: ID
  # All values that are contained in given list.
  id_in: [ID!]
  # All values that are not contained in given list.
  id_not_in: [ID!]
  # All values less than the given value.
  id_lt: ID
  # All values less than or equal the given value.
  id_lte: ID
  # All values greater than the given value.
  id_gt: ID
  # All values greater than or equal the given value.
  id_gte: ID
  # All values containing the given string.
  id_contains: ID
  # All values not containing the given string.
  id_not_contains: ID
  # All values starting with the given string.
  id_starts_with: ID
  # All values not starting with the given string.
  id_not_starts_with: ID
  # All values ending with the given string.
  id_ends_with: ID
  # All values not ending with the given string.
  id_not_ends_with: ID
  red: DateTime
  # All values that are not equal to given value.
  red_not: DateTime
  # All values that are contained in given list.
  red_in: [DateTime!]
  # All values that are not contained in given list.
  red_not_in: [DateTime!]
  # All values less than the given value.
  red_lt: DateTime
  # All values less than or equal the given value.
  red_lte: DateTime
  # All values greater than the given value.
  red_gt: DateTime
  # All values greater than or equal the given value.
  red_gte: DateTime
  maroon: DateTime
  # All values that are not equal to given value.
  maroon_not: DateTime
  # All values that are contained in given list.
  maroon_in: [DateTime!]
  # All values that are not contained in given list.
  maroon_not_in: [DateTime!]
  # All values less than the given value.
  maroon_lt: DateTime
  # All values less than or equal the given value.
  maroon_lte: DateTime
  # All values greater than the given value.
  maroon_gt: DateTime
  # All values greater than or equal the given value.
  maroon_gte: DateTime
  silver: Boolean
  # All values that are not equal to given value.
  silver_not: Boolean
  black: Morissette
  # All values that are not equal to given value.
  black_not: Morissette
  # All values that are contained in given list.
  black_in: [Morissette!]
  # All values that are not contained in given list.
  black_not_in: [Morissette!]
  lime: String
  # All values that are not equal to given value.
  lime_not: String
  # All values that are contained in given list.
  lime_in: [String!]
  # All values that are not contained in given list.
  lime_not_in: [String!]
  # All values less than the given value.
  lime_lt: String
  # All values less than or equal the given value.
  lime_lte: String
  # All values greater than the given value.
  lime_gt: String
  # All values greater than or equal the given value.
  lime_gte: String
  # All values containing the given string.
  lime_contains: String
  # All values not containing the given string.
  lime_not_contains: String
  # All values starting with the given string.
  lime_starts_with: String
  # All values not starting with the given string.
  lime_not_starts_with: String
  # All values ending with the given string.
  lime_ends_with: String
  # All values not ending with the given string.
  lime_not_ends_with: String
  fuchsia: Boolean
  # All values that are not equal to given value.
  fuchsia_not: Boolean
  salmon: StrongholdWhereInput
}

input ToughjoyfaxWhereUniqueInput {
  id: ID
}

type Transcof implements Node {
  status: Status!
  updatedAt: DateTime!
  createdAt: DateTime!
  id: ID!
  maroon: String!
}

# A connection to a list of items.
type TranscofConnection {
  # Information to aid in pagination.
  pageInfo: PageInfo!
  # A list of edges.
  edges: [TranscofEdge]!
  aggregate: AggregateTranscof!
}

input TranscofCreateInput {
  status: Status
  maroon: String!
}

# An edge in a connection.
type TranscofEdge {
  # The item at the end of the edge.
  node: Transcof!
  # A cursor for use in pagination.
  cursor: String!
}

enum TranscofOrderByInput {
  status_ASC
  status_DESC
  updatedAt_ASC
  updatedAt_DESC
  createdAt_ASC
  createdAt_DESC
  id_ASC
  id_DESC
  maroon_ASC
  maroon_DESC
}

type TranscofPreviousValues {
  status: Status!
  updatedAt: DateTime!
  createdAt: DateTime!
  id: ID!
  maroon: String!
}

type TranscofSubscriptionPayload {
  mutation: MutationType!
  node: Transcof
  updatedFields: [String!]
  previousValues: TranscofPreviousValues
}

input TranscofSubscriptionWhereInput {
  # Logical AND on all given filters.
  AND: [TranscofSubscriptionWhereInput!]
  # Logical OR on all given filters.
  OR: [TranscofSubscriptionWhereInput!]
  # Logical NOT on all given filters combined by AND.
  NOT: [TranscofSubscriptionWhereInput!]
  # The subscription event gets dispatched when it's listed in mutation_in
  mutation_in: [MutationType!]
  # The subscription event gets only dispatched when one of the updated fields names is included in this list
  updatedFields_contains: String
  # The subscription event gets only dispatched when all of the field names included in this list have been updated
  updatedFields_contains_every: [String!]
  # The subscription event gets only dispatched when some of the field names included in this list have been updated
  updatedFields_contains_some: [String!]
  node: TranscofWhereInput
}

input TranscofUpdateInput {
  status: Status
  maroon: String
}

input TranscofUpdateManyMutationInput {
  status: Status
  maroon: String
}

input TranscofWhereInput {
  # Logical AND on all given filters.
  AND: [TranscofWhereInput!]
  # Logical OR on all given filters.
  OR: [TranscofWhereInput!]
  # Logical NOT on all given filters combined by AND.
  NOT: [TranscofWhereInput!]
  status: Status
  # All values that are not equal to given value.
  status_not: Status
  # All values that are contained in given list.
  status_in: [Status!]
  # All values that are not contained in given list.
  status_not_in: [Status!]
  updatedAt: DateTime
  # All values that are not equal to given value.
  updatedAt_not: DateTime
  # All values that are contained in given list.
  updatedAt_in: [DateTime!]
  # All values that are not contained in given list.
  updatedAt_not_in: [DateTime!]
  # All values less than the given value.
  updatedAt_lt: DateTime
  # All values less than or equal the given value.
  updatedAt_lte: DateTime
  # All values greater than the given value.
  updatedAt_gt: DateTime
  # All values greater than or equal the given value.
  updatedAt_gte: DateTime
  createdAt: DateTime
  # All values that are not equal to given value.
  createdAt_not: DateTime
  # All values that are contained in given list.
  createdAt_in: [DateTime!]
  # All values that are not contained in given list.
  createdAt_not_in: [DateTime!]
  # All values less than the given value.
  createdAt_lt: DateTime
  # All values less than or equal the given value.
  createdAt_lte: DateTime
  # All values greater than the given value.
  createdAt_gt: DateTime
  # All values greater than or equal the given value.
  createdAt_gte: DateTime
  id: ID
  # All values that are not equal to given value.
  id_not: ID
  # All values that are contained in given list.
  id_in: [ID!]
  # All values that are not contained in given list.
  id_not_in: [ID!]
  # All values less than the given value.
  id_lt: ID
  # All values less than or equal the given value.
  id_lte: ID
  # All values greater than the given value.
  id_gt: ID
  # All values greater than or equal the given value.
  id_gte: ID
  # All values containing the given string.
  id_contains: ID
  # All values not containing the given string.
  id_not_contains: ID
  # All values starting with the given string.
  id_starts_with: ID
  # All values not starting with the given string.
  id_not_starts_with: ID
  # All values ending with the given string.
  id_ends_with: ID
  # All values not ending with the given string.
  id_not_ends_with: ID
  maroon: String
  # All values that are not equal to given value.
  maroon_not: String
  # All values that are contained in given list.
  maroon_in: [String!]
  # All values that are not contained in given list.
  maroon_not_in: [String!]
  # All values less than the given value.
  maroon_lt: String
  # All values less than or equal the given value.
  maroon_lte: String
  # All values greater than the given value.
  maroon_gt: String
  # All values greater than or equal the given value.
  maroon_gte: String
  # All values containing the given string.
  maroon_contains: String
  # All values not containing the given string.
  maroon_not_contains: String
  # All values starting with the given string.
  maroon_starts_with: String
  # All values not starting with the given string.
  maroon_not_starts_with: String
  # All values ending with the given string.
  maroon_ends_with: String
  # All values not ending with the given string.
  maroon_not_ends_with: String
}

input TranscofWhereUniqueInput {
  id: ID
  maroon: String
}

type Treeflex implements Node {
  status: Status!
  updatedAt: DateTime!
  createdAt: DateTime!
  id: ID!
  cyan: Daugherty!
  fuchsia: String!
  orchid: Int
}

# A connection to a list of items.
type TreeflexConnection {
  # Information to aid in pagination.
  pageInfo: PageInfo!
  # A list of edges.
  edges: [TreeflexEdge]!
  aggregate: AggregateTreeflex!
}

input TreeflexCreateInput {
  status: Status
  cyan: Daugherty!
  fuchsia: String!
  orchid: Int
}

# An edge in a connection.
type TreeflexEdge {
  # The item at the end of the edge.
  node: Treeflex!
  # A cursor for use in pagination.
  cursor: String!
}

enum TreeflexOrderByInput {
  status_ASC
  status_DESC
  updatedAt_ASC
  updatedAt_DESC
  createdAt_ASC
  createdAt_DESC
  id_ASC
  id_DESC
  cyan_ASC
  cyan_DESC
  fuchsia_ASC
  fuchsia_DESC
  orchid_ASC
  orchid_DESC
}

type TreeflexPreviousValues {
  status: Status!
  updatedAt: DateTime!
  createdAt: DateTime!
  id: ID!
  cyan: Daugherty!
  fuchsia: String!
  orchid: Int
}

type TreeflexSubscriptionPayload {
  mutation: MutationType!
  node: Treeflex
  updatedFields: [String!]
  previousValues: TreeflexPreviousValues
}

input TreeflexSubscriptionWhereInput {
  # Logical AND on all given filters.
  AND: [TreeflexSubscriptionWhereInput!]
  # Logical OR on all given filters.
  OR: [TreeflexSubscriptionWhereInput!]
  # Logical NOT on all given filters combined by AND.
  NOT: [TreeflexSubscriptionWhereInput!]
  # The subscription event gets dispatched when it's listed in mutation_in
  mutation_in: [MutationType!]
  # The subscription event gets only dispatched when one of the updated fields names is included in this list
  updatedFields_contains: String
  # The subscription event gets only dispatched when all of the field names included in this list have been updated
  updatedFields_contains_every: [String!]
  # The subscription event gets only dispatched when some of the field names included in this list have been updated
  updatedFields_contains_some: [String!]
  node: TreeflexWhereInput
}

input TreeflexUpdateInput {
  status: Status
  cyan: Daugherty
  fuchsia: String
  orchid: Int
}

input TreeflexUpdateManyMutationInput {
  status: Status
  cyan: Daugherty
  fuchsia: String
  orchid: Int
}

input TreeflexWhereInput {
  # Logical AND on all given filters.
  AND: [TreeflexWhereInput!]
  # Logical OR on all given filters.
  OR: [TreeflexWhereInput!]
  # Logical NOT on all given filters combined by AND.
  NOT: [TreeflexWhereInput!]
  status: Status
  # All values that are not equal to given value.
  status_not: Status
  # All values that are contained in given list.
  status_in: [Status!]
  # All values that are not contained in given list.
  status_not_in: [Status!]
  updatedAt: DateTime
  # All values that are not equal to given value.
  updatedAt_not: DateTime
  # All values that are contained in given list.
  updatedAt_in: [DateTime!]
  # All values that are not contained in given list.
  updatedAt_not_in: [DateTime!]
  # All values less than the given value.
  updatedAt_lt: DateTime
  # All values less than or equal the given value.
  updatedAt_lte: DateTime
  # All values greater than the given value.
  updatedAt_gt: DateTime
  # All values greater than or equal the given value.
  updatedAt_gte: DateTime
  createdAt: DateTime
  # All values that are not equal to given value.
  createdAt_not: DateTime
  # All values that are contained in given list.
  createdAt_in: [DateTime!]
  # All values that are not contained in given list.
  createdAt_not_in: [DateTime!]
  # All values less than the given value.
  createdAt_lt: DateTime
  # All values less than or equal the given value.
  createdAt_lte: DateTime
  # All values greater than the given value.
  createdAt_gt: DateTime
  # All values greater than or equal the given value.
  createdAt_gte: DateTime
  id: ID
  # All values that are not equal to given value.
  id_not: ID
  # All values that are contained in given list.
  id_in: [ID!]
  # All values that are not contained in given list.
  id_not_in: [ID!]
  # All values less than the given value.
  id_lt: ID
  # All values less than or equal the given value.
  id_lte: ID
  # All values greater than the given value.
  id_gt: ID
  # All values greater than or equal the given value.
  id_gte: ID
  # All values containing the given string.
  id_contains: ID
  # All values not containing the given string.
  id_not_contains: ID
  # All values starting with the given string.
  id_starts_with: ID
  # All values not starting with the given string.
  id_not_starts_with: ID
  # All values ending with the given string.
  id_ends_with: ID
  # All values not ending with the given string.
  id_not_ends_with: ID
  cyan: Daugherty
  # All values that are not equal to given value.
  cyan_not: Daugherty
  # All values that are contained in given list.
  cyan_in: [Daugherty!]
  # All values that are not contained in given list.
  cyan_not_in: [Daugherty!]
  fuchsia: String
  # All values that are not equal to given value.
  fuchsia_not: String
  # All values that are contained in given list.
  fuchsia_in: [String!]
  # All values that are not contained in given list.
  fuchsia_not_in: [String!]
  # All values less than the given value.
  fuchsia_lt: String
  # All values less than or equal the given value.
  fuchsia_lte: String
  # All values greater than the given value.
  fuchsia_gt: String
  # All values greater than or equal the given value.
  fuchsia_gte: String
  # All values containing the given string.
  fuchsia_contains: String
  # All values not containing the given string.
  fuchsia_not_contains: String
  # All values starting with the given string.
  fuchsia_starts_with: String
  # All values not starting with the given string.
  fuchsia_not_starts_with: String
  # All values ending with the given string.
  fuchsia_ends_with: String
  # All values not ending with the given string.
  fuchsia_not_ends_with: String
  orchid: Int
  # All values that are not equal to given value.
  orchid_not: Int
  # All values that are contained in given list.
  orchid_in: [Int!]
  # All values that are not contained in given list.
  orchid_not_in: [Int!]
  # All values less than the given value.
  orchid_lt: Int
  # All values less than or equal the given value.
  orchid_lte: Int
  # All values greater than the given value.
  orchid_gt: Int
  # All values greater than or equal the given value.
  orchid_gte: Int
}

input TreeflexWhereUniqueInput {
  id: ID
}

type Tresom implements Node {
  status: Status!
  updatedAt: DateTime!
  createdAt: DateTime!
  id: ID!
  blue: String
  white: Daugherty
  cyan: String
  olive: Wisoky!
  plum: String
  turquoise: Int
  teal: Alphazap
}

# A connection to a list of items.
type TresomConnection {
  # Information to aid in pagination.
  pageInfo: PageInfo!
  # A list of edges.
  edges: [TresomEdge]!
  aggregate: AggregateTresom!
}

input TresomCreateInput {
  status: Status
  blue: String
  white: Daugherty
  cyan: String
  olive: Wisoky!
  plum: String
  turquoise: Int
  teal: AlphazapCreateOneWithoutAzureInput
}

input TresomCreateManyWithoutTealInput {
  create: [TresomCreateWithoutTealInput!]
  connect: [TresomWhereUniqueInput!]
}

input TresomCreateWithoutTealInput {
  status: Status
  blue: String
  white: Daugherty
  cyan: String
  olive: Wisoky!
  plum: String
  turquoise: Int
}

# An edge in a connection.
type TresomEdge {
  # The item at the end of the edge.
  node: Tresom!
  # A cursor for use in pagination.
  cursor: String!
}

enum TresomOrderByInput {
  status_ASC
  status_DESC
  updatedAt_ASC
  updatedAt_DESC
  createdAt_ASC
  createdAt_DESC
  id_ASC
  id_DESC
  blue_ASC
  blue_DESC
  white_ASC
  white_DESC
  cyan_ASC
  cyan_DESC
  olive_ASC
  olive_DESC
  plum_ASC
  plum_DESC
  turquoise_ASC
  turquoise_DESC
}

type TresomPreviousValues {
  status: Status!
  updatedAt: DateTime!
  createdAt: DateTime!
  id: ID!
  blue: String
  white: Daugherty
  cyan: String
  olive: Wisoky!
  plum: String
  turquoise: Int
}

input TresomScalarWhereInput {
  # Logical AND on all given filters.
  AND: [TresomScalarWhereInput!]
  # Logical OR on all given filters.
  OR: [TresomScalarWhereInput!]
  # Logical NOT on all given filters combined by AND.
  NOT: [TresomScalarWhereInput!]
  status: Status
  # All values that are not equal to given value.
  status_not: Status
  # All values that are contained in given list.
  status_in: [Status!]
  # All values that are not contained in given list.
  status_not_in: [Status!]
  updatedAt: DateTime
  # All values that are not equal to given value.
  updatedAt_not: DateTime
  # All values that are contained in given list.
  updatedAt_in: [DateTime!]
  # All values that are not contained in given list.
  updatedAt_not_in: [DateTime!]
  # All values less than the given value.
  updatedAt_lt: DateTime
  # All values less than or equal the given value.
  updatedAt_lte: DateTime
  # All values greater than the given value.
  updatedAt_gt: DateTime
  # All values greater than or equal the given value.
  updatedAt_gte: DateTime
  createdAt: DateTime
  # All values that are not equal to given value.
  createdAt_not: DateTime
  # All values that are contained in given list.
  createdAt_in: [DateTime!]
  # All values that are not contained in given list.
  createdAt_not_in: [DateTime!]
  # All values less than the given value.
  createdAt_lt: DateTime
  # All values less than or equal the given value.
  createdAt_lte: DateTime
  # All values greater than the given value.
  createdAt_gt: DateTime
  # All values greater than or equal the given value.
  createdAt_gte: DateTime
  id: ID
  # All values that are not equal to given value.
  id_not: ID
  # All values that are contained in given list.
  id_in: [ID!]
  # All values that are not contained in given list.
  id_not_in: [ID!]
  # All values less than the given value.
  id_lt: ID
  # All values less than or equal the given value.
  id_lte: ID
  # All values greater than the given value.
  id_gt: ID
  # All values greater than or equal the given value.
  id_gte: ID
  # All values containing the given string.
  id_contains: ID
  # All values not containing the given string.
  id_not_contains: ID
  # All values starting with the given string.
  id_starts_with: ID
  # All values not starting with the given string.
  id_not_starts_with: ID
  # All values ending with the given string.
  id_ends_with: ID
  # All values not ending with the given string.
  id_not_ends_with: ID
  blue: String
  # All values that are not equal to given value.
  blue_not: String
  # All values that are contained in given list.
  blue_in: [String!]
  # All values that are not contained in given list.
  blue_not_in: [String!]
  # All values less than the given value.
  blue_lt: String
  # All values less than or equal the given value.
  blue_lte: String
  # All values greater than the given value.
  blue_gt: String
  # All values greater than or equal the given value.
  blue_gte: String
  # All values containing the given string.
  blue_contains: String
  # All values not containing the given string.
  blue_not_contains: String
  # All values starting with the given string.
  blue_starts_with: String
  # All values not starting with the given string.
  blue_not_starts_with: String
  # All values ending with the given string.
  blue_ends_with: String
  # All values not ending with the given string.
  blue_not_ends_with: String
  white: Daugherty
  # All values that are not equal to given value.
  white_not: Daugherty
  # All values that are contained in given list.
  white_in: [Daugherty!]
  # All values that are not contained in given list.
  white_not_in: [Daugherty!]
  cyan: String
  # All values that are not equal to given value.
  cyan_not: String
  # All values that are contained in given list.
  cyan_in: [String!]
  # All values that are not contained in given list.
  cyan_not_in: [String!]
  # All values less than the given value.
  cyan_lt: String
  # All values less than or equal the given value.
  cyan_lte: String
  # All values greater than the given value.
  cyan_gt: String
  # All values greater than or equal the given value.
  cyan_gte: String
  # All values containing the given string.
  cyan_contains: String
  # All values not containing the given string.
  cyan_not_contains: String
  # All values starting with the given string.
  cyan_starts_with: String
  # All values not starting with the given string.
  cyan_not_starts_with: String
  # All values ending with the given string.
  cyan_ends_with: String
  # All values not ending with the given string.
  cyan_not_ends_with: String
  olive: Wisoky
  # All values that are not equal to given value.
  olive_not: Wisoky
  # All values that are contained in given list.
  olive_in: [Wisoky!]
  # All values that are not contained in given list.
  olive_not_in: [Wisoky!]
  plum: String
  # All values that are not equal to given value.
  plum_not: String
  # All values that are contained in given list.
  plum_in: [String!]
  # All values that are not contained in given list.
  plum_not_in: [String!]
  # All values less than the given value.
  plum_lt: String
  # All values less than or equal the given value.
  plum_lte: String
  # All values greater than the given value.
  plum_gt: String
  # All values greater than or equal the given value.
  plum_gte: String
  # All values containing the given string.
  plum_contains: String
  # All values not containing the given string.
  plum_not_contains: String
  # All values starting with the given string.
  plum_starts_with: String
  # All values not starting with the given string.
  plum_not_starts_with: String
  # All values ending with the given string.
  plum_ends_with: String
  # All values not ending with the given string.
  plum_not_ends_with: String
  turquoise: Int
  # All values that are not equal to given value.
  turquoise_not: Int
  # All values that are contained in given list.
  turquoise_in: [Int!]
  # All values that are not contained in given list.
  turquoise_not_in: [Int!]
  # All values less than the given value.
  turquoise_lt: Int
  # All values less than or equal the given value.
  turquoise_lte: Int
  # All values greater than the given value.
  turquoise_gt: Int
  # All values greater than or equal the given value.
  turquoise_gte: Int
}

type TresomSubscriptionPayload {
  mutation: MutationType!
  node: Tresom
  updatedFields: [String!]
  previousValues: TresomPreviousValues
}

input TresomSubscriptionWhereInput {
  # Logical AND on all given filters.
  AND: [TresomSubscriptionWhereInput!]
  # Logical OR on all given filters.
  OR: [TresomSubscriptionWhereInput!]
  # Logical NOT on all given filters combined by AND.
  NOT: [TresomSubscriptionWhereInput!]
  # The subscription event gets dispatched when it's listed in mutation_in
  mutation_in: [MutationType!]
  # The subscription event gets only dispatched when one of the updated fields names is included in this list
  updatedFields_contains: String
  # The subscription event gets only dispatched when all of the field names included in this list have been updated
  updatedFields_contains_every: [String!]
  # The subscription event gets only dispatched when some of the field names included in this list have been updated
  updatedFields_contains_some: [String!]
  node: TresomWhereInput
}

input TresomUpdateInput {
  status: Status
  blue: String
  white: Daugherty
  cyan: String
  olive: Wisoky
  plum: String
  turquoise: Int
  teal: AlphazapUpdateOneWithoutAzureInput
}

input TresomUpdateManyDataInput {
  status: Status
  blue: String
  white: Daugherty
  cyan: String
  olive: Wisoky
  plum: String
  turquoise: Int
}

input TresomUpdateManyMutationInput {
  status: Status
  blue: String
  white: Daugherty
  cyan: String
  olive: Wisoky
  plum: String
  turquoise: Int
}

input TresomUpdateManyWithoutTealInput {
  create: [TresomCreateWithoutTealInput!]
  connect: [TresomWhereUniqueInput!]
  set: [TresomWhereUniqueInput!]
  disconnect: [TresomWhereUniqueInput!]
  delete: [TresomWhereUniqueInput!]
  update: [TresomUpdateWithWhereUniqueWithoutTealInput!]
  updateMany: [TresomUpdateManyWithWhereNestedInput!]
  deleteMany: [TresomScalarWhereInput!]
  upsert: [TresomUpsertWithWhereUniqueWithoutTealInput!]
}

input TresomUpdateManyWithWhereNestedInput {
  where: TresomScalarWhereInput!
  data: TresomUpdateManyDataInput!
}

input TresomUpdateWithoutTealDataInput {
  status: Status
  blue: String
  white: Daugherty
  cyan: String
  olive: Wisoky
  plum: String
  turquoise: Int
}

input TresomUpdateWithWhereUniqueWithoutTealInput {
  where: TresomWhereUniqueInput!
  data: TresomUpdateWithoutTealDataInput!
}

input TresomUpsertWithWhereUniqueWithoutTealInput {
  where: TresomWhereUniqueInput!
  update: TresomUpdateWithoutTealDataInput!
  create: TresomCreateWithoutTealInput!
}

input TresomWhereInput {
  # Logical AND on all given filters.
  AND: [TresomWhereInput!]
  # Logical OR on all given filters.
  OR: [TresomWhereInput!]
  # Logical NOT on all given filters combined by AND.
  NOT: [TresomWhereInput!]
  status: Status
  # All values that are not equal to given value.
  status_not: Status
  # All values that are contained in given list.
  status_in: [Status!]
  # All values that are not contained in given list.
  status_not_in: [Status!]
  updatedAt: DateTime
  # All values that are not equal to given value.
  updatedAt_not: DateTime
  # All values that are contained in given list.
  updatedAt_in: [DateTime!]
  # All values that are not contained in given list.
  updatedAt_not_in: [DateTime!]
  # All values less than the given value.
  updatedAt_lt: DateTime
  # All values less than or equal the given value.
  updatedAt_lte: DateTime
  # All values greater than the given value.
  updatedAt_gt: DateTime
  # All values greater than or equal the given value.
  updatedAt_gte: DateTime
  createdAt: DateTime
  # All values that are not equal to given value.
  createdAt_not: DateTime
  # All values that are contained in given list.
  createdAt_in: [DateTime!]
  # All values that are not contained in given list.
  createdAt_not_in: [DateTime!]
  # All values less than the given value.
  createdAt_lt: DateTime
  # All values less than or equal the given value.
  createdAt_lte: DateTime
  # All values greater than the given value.
  createdAt_gt: DateTime
  # All values greater than or equal the given value.
  createdAt_gte: DateTime
  id: ID
  # All values that are not equal to given value.
  id_not: ID
  # All values that are contained in given list.
  id_in: [ID!]
  # All values that are not contained in given list.
  id_not_in: [ID!]
  # All values less than the given value.
  id_lt: ID
  # All values less than or equal the given value.
  id_lte: ID
  # All values greater than the given value.
  id_gt: ID
  # All values greater than or equal the given value.
  id_gte: ID
  # All values containing the given string.
  id_contains: ID
  # All values not containing the given string.
  id_not_contains: ID
  # All values starting with the given string.
  id_starts_with: ID
  # All values not starting with the given string.
  id_not_starts_with: ID
  # All values ending with the given string.
  id_ends_with: ID
  # All values not ending with the given string.
  id_not_ends_with: ID
  blue: String
  # All values that are not equal to given value.
  blue_not: String
  # All values that are contained in given list.
  blue_in: [String!]
  # All values that are not contained in given list.
  blue_not_in: [String!]
  # All values less than the given value.
  blue_lt: String
  # All values less than or equal the given value.
  blue_lte: String
  # All values greater than the given value.
  blue_gt: String
  # All values greater than or equal the given value.
  blue_gte: String
  # All values containing the given string.
  blue_contains: String
  # All values not containing the given string.
  blue_not_contains: String
  # All values starting with the given string.
  blue_starts_with: String
  # All values not starting with the given string.
  blue_not_starts_with: String
  # All values ending with the given string.
  blue_ends_with: String
  # All values not ending with the given string.
  blue_not_ends_with: String
  white: Daugherty
  # All values that are not equal to given value.
  white_not: Daugherty
  # All values that are contained in given list.
  white_in: [Daugherty!]
  # All values that are not contained in given list.
  white_not_in: [Daugherty!]
  cyan: String
  # All values that are not equal to given value.
  cyan_not: String
  # All values that are contained in given list.
  cyan_in: [String!]
  # All values that are not contained in given list.
  cyan_not_in: [String!]
  # All values less than the given value.
  cyan_lt: String
  # All values less than or equal the given value.
  cyan_lte: String
  # All values greater than the given value.
  cyan_gt: String
  # All values greater than or equal the given value.
  cyan_gte: String
  # All values containing the given string.
  cyan_contains: String
  # All values not containing the given string.
  cyan_not_contains: String
  # All values starting with the given string.
  cyan_starts_with: String
  # All values not starting with the given string.
  cyan_not_starts_with: String
  # All values ending with the given string.
  cyan_ends_with: String
  # All values not ending with the given string.
  cyan_not_ends_with: String
  olive: Wisoky
  # All values that are not equal to given value.
  olive_not: Wisoky
  # All values that are contained in given list.
  olive_in: [Wisoky!]
  # All values that are not contained in given list.
  olive_not_in: [Wisoky!]
  plum: String
  # All values that are not equal to given value.
  plum_not: String
  # All values that are contained in given list.
  plum_in: [String!]
  # All values that are not contained in given list.
  plum_not_in: [String!]
  # All values less than the given value.
  plum_lt: String
  # All values less than or equal the given value.
  plum_lte: String
  # All values greater than the given value.
  plum_gt: String
  # All values greater than or equal the given value.
  plum_gte: String
  # All values containing the given string.
  plum_contains: String
  # All values not containing the given string.
  plum_not_contains: String
  # All values starting with the given string.
  plum_starts_with: String
  # All values not starting with the given string.
  plum_not_starts_with: String
  # All values ending with the given string.
  plum_ends_with: String
  # All values not ending with the given string.
  plum_not_ends_with: String
  turquoise: Int
  # All values that are not equal to given value.
  turquoise_not: Int
  # All values that are contained in given list.
  turquoise_in: [Int!]
  # All values that are not contained in given list.
  turquoise_not_in: [Int!]
  # All values less than the given value.
  turquoise_lt: Int
  # All values less than or equal the given value.
  turquoise_lte: Int
  # All values greater than the given value.
  turquoise_gt: Int
  # All values greater than or equal the given value.
  turquoise_gte: Int
  teal: AlphazapWhereInput
}

input TresomWhereUniqueInput {
  id: ID
}

type Ventosanzap implements Node {
  status: Status!
  updatedAt: DateTime!
  createdAt: DateTime!
  id: ID!
  grey: String!
  lime: [Muller!]!
  turquoise: String!
}

# A connection to a list of items.
type VentosanzapConnection {
  # Information to aid in pagination.
  pageInfo: PageInfo!
  # A list of edges.
  edges: [VentosanzapEdge]!
  aggregate: AggregateVentosanzap!
}

input VentosanzapCreateInput {
  status: Status
  grey: String!
  turquoise: String!
  lime: VentosanzapCreatelimeInput
}

input VentosanzapCreatelimeInput {
  set: [Muller!]
}

# An edge in a connection.
type VentosanzapEdge {
  # The item at the end of the edge.
  node: Ventosanzap!
  # A cursor for use in pagination.
  cursor: String!
}

enum VentosanzapOrderByInput {
  status_ASC
  status_DESC
  updatedAt_ASC
  updatedAt_DESC
  createdAt_ASC
  createdAt_DESC
  id_ASC
  id_DESC
  grey_ASC
  grey_DESC
  turquoise_ASC
  turquoise_DESC
}

type VentosanzapPreviousValues {
  status: Status!
  updatedAt: DateTime!
  createdAt: DateTime!
  id: ID!
  grey: String!
  lime: [Muller!]!
  turquoise: String!
}

type VentosanzapSubscriptionPayload {
  mutation: MutationType!
  node: Ventosanzap
  updatedFields: [String!]
  previousValues: VentosanzapPreviousValues
}

input VentosanzapSubscriptionWhereInput {
  # Logical AND on all given filters.
  AND: [VentosanzapSubscriptionWhereInput!]
  # Logical OR on all given filters.
  OR: [VentosanzapSubscriptionWhereInput!]
  # Logical NOT on all given filters combined by AND.
  NOT: [VentosanzapSubscriptionWhereInput!]
  # The subscription event gets dispatched when it's listed in mutation_in
  mutation_in: [MutationType!]
  # The subscription event gets only dispatched when one of the updated fields names is included in this list
  updatedFields_contains: String
  # The subscription event gets only dispatched when all of the field names included in this list have been updated
  updatedFields_contains_every: [String!]
  # The subscription event gets only dispatched when some of the field names included in this list have been updated
  updatedFields_contains_some: [String!]
  node: VentosanzapWhereInput
}

input VentosanzapUpdateInput {
  status: Status
  grey: String
  turquoise: String
  lime: VentosanzapUpdatelimeInput
}

input VentosanzapUpdatelimeInput {
  set: [Muller!]
}

input VentosanzapUpdateManyMutationInput {
  status: Status
  grey: String
  turquoise: String
  lime: VentosanzapUpdatelimeInput
}

input VentosanzapWhereInput {
  # Logical AND on all given filters.
  AND: [VentosanzapWhereInput!]
  # Logical OR on all given filters.
  OR: [VentosanzapWhereInput!]
  # Logical NOT on all given filters combined by AND.
  NOT: [VentosanzapWhereInput!]
  status: Status
  # All values that are not equal to given value.
  status_not: Status
  # All values that are contained in given list.
  status_in: [Status!]
  # All values that are not contained in given list.
  status_not_in: [Status!]
  updatedAt: DateTime
  # All values that are not equal to given value.
  updatedAt_not: DateTime
  # All values that are contained in given list.
  updatedAt_in: [DateTime!]
  # All values that are not contained in given list.
  updatedAt_not_in: [DateTime!]
  # All values less than the given value.
  updatedAt_lt: DateTime
  # All values less than or equal the given value.
  updatedAt_lte: DateTime
  # All values greater than the given value.
  updatedAt_gt: DateTime
  # All values greater than or equal the given value.
  updatedAt_gte: DateTime
  createdAt: DateTime
  # All values that are not equal to given value.
  createdAt_not: DateTime
  # All values that are contained in given list.
  createdAt_in: [DateTime!]
  # All values that are not contained in given list.
  createdAt_not_in: [DateTime!]
  # All values less than the given value.
  createdAt_lt: DateTime
  # All values less than or equal the given value.
  createdAt_lte: DateTime
  # All values greater than the given value.
  createdAt_gt: DateTime
  # All values greater than or equal the given value.
  createdAt_gte: DateTime
  id: ID
  # All values that are not equal to given value.
  id_not: ID
  # All values that are contained in given list.
  id_in: [ID!]
  # All values that are not contained in given list.
  id_not_in: [ID!]
  # All values less than the given value.
  id_lt: ID
  # All values less than or equal the given value.
  id_lte: ID
  # All values greater than the given value.
  id_gt: ID
  # All values greater than or equal the given value.
  id_gte: ID
  # All values containing the given string.
  id_contains: ID
  # All values not containing the given string.
  id_not_contains: ID
  # All values starting with the given string.
  id_starts_with: ID
  # All values not starting with the given string.
  id_not_starts_with: ID
  # All values ending with the given string.
  id_ends_with: ID
  # All values not ending with the given string.
  id_not_ends_with: ID
  grey: String
  # All values that are not equal to given value.
  grey_not: String
  # All values that are contained in given list.
  grey_in: [String!]
  # All values that are not contained in given list.
  grey_not_in: [String!]
  # All values less than the given value.
  grey_lt: String
  # All values less than or equal the given value.
  grey_lte: String
  # All values greater than the given value.
  grey_gt: String
  # All values greater than or equal the given value.
  grey_gte: String
  # All values containing the given string.
  grey_contains: String
  # All values not containing the given string.
  grey_not_contains: String
  # All values starting with the given string.
  grey_starts_with: String
  # All values not starting with the given string.
  grey_not_starts_with: String
  # All values ending with the given string.
  grey_ends_with: String
  # All values not ending with the given string.
  grey_not_ends_with: String
  turquoise: String
  # All values that are not equal to given value.
  turquoise_not: String
  # All values that are contained in given list.
  turquoise_in: [String!]
  # All values that are not contained in given list.
  turquoise_not_in: [String!]
  # All values less than the given value.
  turquoise_lt: String
  # All values less than or equal the given value.
  turquoise_lte: String
  # All values greater than the given value.
  turquoise_gt: String
  # All values greater than or equal the given value.
  turquoise_gte: String
  # All values containing the given string.
  turquoise_contains: String
  # All values not containing the given string.
  turquoise_not_contains: String
  # All values starting with the given string.
  turquoise_starts_with: String
  # All values not starting with the given string.
  turquoise_not_starts_with: String
  # All values ending with the given string.
  turquoise_ends_with: String
  # All values not ending with the given string.
  turquoise_not_ends_with: String
}

input VentosanzapWhereUniqueInput {
  id: ID
}

type Viva implements Node {
  status: Status!
  updatedAt: DateTime!
  createdAt: DateTime!
  id: ID!
  yellow: String
  green: String
  azure: String
  magenta: String
  lavender: String!
  olive: Daugherty
  gold: String
  black: String
}

# A connection to a list of items.
type VivaConnection {
  # Information to aid in pagination.
  pageInfo: PageInfo!
  # A list of edges.
  edges: [VivaEdge]!
  aggregate: AggregateViva!
}

input VivaCreateInput {
  status: Status
  yellow: String
  green: String
  azure: String
  magenta: String
  lavender: String!
  olive: Daugherty
  gold: String
  black: String
}

# An edge in a connection.
type VivaEdge {
  # The item at the end of the edge.
  node: Viva!
  # A cursor for use in pagination.
  cursor: String!
}

enum VivaOrderByInput {
  status_ASC
  status_DESC
  updatedAt_ASC
  updatedAt_DESC
  createdAt_ASC
  createdAt_DESC
  id_ASC
  id_DESC
  yellow_ASC
  yellow_DESC
  green_ASC
  green_DESC
  azure_ASC
  azure_DESC
  magenta_ASC
  magenta_DESC
  lavender_ASC
  lavender_DESC
  olive_ASC
  olive_DESC
  gold_ASC
  gold_DESC
  black_ASC
  black_DESC
}

type VivaPreviousValues {
  status: Status!
  updatedAt: DateTime!
  createdAt: DateTime!
  id: ID!
  yellow: String
  green: String
  azure: String
  magenta: String
  lavender: String!
  olive: Daugherty
  gold: String
  black: String
}

type VivaSubscriptionPayload {
  mutation: MutationType!
  node: Viva
  updatedFields: [String!]
  previousValues: VivaPreviousValues
}

input VivaSubscriptionWhereInput {
  # Logical AND on all given filters.
  AND: [VivaSubscriptionWhereInput!]
  # Logical OR on all given filters.
  OR: [VivaSubscriptionWhereInput!]
  # Logical NOT on all given filters combined by AND.
  NOT: [VivaSubscriptionWhereInput!]
  # The subscription event gets dispatched when it's listed in mutation_in
  mutation_in: [MutationType!]
  # The subscription event gets only dispatched when one of the updated fields names is included in this list
  updatedFields_contains: String
  # The subscription event gets only dispatched when all of the field names included in this list have been updated
  updatedFields_contains_every: [String!]
  # The subscription event gets only dispatched when some of the field names included in this list have been updated
  updatedFields_contains_some: [String!]
  node: VivaWhereInput
}

input VivaUpdateInput {
  status: Status
  yellow: String
  green: String
  azure: String
  magenta: String
  lavender: String
  olive: Daugherty
  gold: String
  black: String
}

input VivaUpdateManyMutationInput {
  status: Status
  yellow: String
  green: String
  azure: String
  magenta: String
  lavender: String
  olive: Daugherty
  gold: String
  black: String
}

input VivaWhereInput {
  # Logical AND on all given filters.
  AND: [VivaWhereInput!]
  # Logical OR on all given filters.
  OR: [VivaWhereInput!]
  # Logical NOT on all given filters combined by AND.
  NOT: [VivaWhereInput!]
  status: Status
  # All values that are not equal to given value.
  status_not: Status
  # All values that are contained in given list.
  status_in: [Status!]
  # All values that are not contained in given list.
  status_not_in: [Status!]
  updatedAt: DateTime
  # All values that are not equal to given value.
  updatedAt_not: DateTime
  # All values that are contained in given list.
  updatedAt_in: [DateTime!]
  # All values that are not contained in given list.
  updatedAt_not_in: [DateTime!]
  # All values less than the given value.
  updatedAt_lt: DateTime
  # All values less than or equal the given value.
  updatedAt_lte: DateTime
  # All values greater than the given value.
  updatedAt_gt: DateTime
  # All values greater than or equal the given value.
  updatedAt_gte: DateTime
  createdAt: DateTime
  # All values that are not equal to given value.
  createdAt_not: DateTime
  # All values that are contained in given list.
  createdAt_in: [DateTime!]
  # All values that are not contained in given list.
  createdAt_not_in: [DateTime!]
  # All values less than the given value.
  createdAt_lt: DateTime
  # All values less than or equal the given value.
  createdAt_lte: DateTime
  # All values greater than the given value.
  createdAt_gt: DateTime
  # All values greater than or equal the given value.
  createdAt_gte: DateTime
  id: ID
  # All values that are not equal to given value.
  id_not: ID
  # All values that are contained in given list.
  id_in: [ID!]
  # All values that are not contained in given list.
  id_not_in: [ID!]
  # All values less than the given value.
  id_lt: ID
  # All values less than or equal the given value.
  id_lte: ID
  # All values greater than the given value.
  id_gt: ID
  # All values greater than or equal the given value.
  id_gte: ID
  # All values containing the given string.
  id_contains: ID
  # All values not containing the given string.
  id_not_contains: ID
  # All values starting with the given string.
  id_starts_with: ID
  # All values not starting with the given string.
  id_not_starts_with: ID
  # All values ending with the given string.
  id_ends_with: ID
  # All values not ending with the given string.
  id_not_ends_with: ID
  yellow: String
  # All values that are not equal to given value.
  yellow_not: String
  # All values that are contained in given list.
  yellow_in: [String!]
  # All values that are not contained in given list.
  yellow_not_in: [String!]
  # All values less than the given value.
  yellow_lt: String
  # All values less than or equal the given value.
  yellow_lte: String
  # All values greater than the given value.
  yellow_gt: String
  # All values greater than or equal the given value.
  yellow_gte: String
  # All values containing the given string.
  yellow_contains: String
  # All values not containing the given string.
  yellow_not_contains: String
  # All values starting with the given string.
  yellow_starts_with: String
  # All values not starting with the given string.
  yellow_not_starts_with: String
  # All values ending with the given string.
  yellow_ends_with: String
  # All values not ending with the given string.
  yellow_not_ends_with: String
  green: String
  # All values that are not equal to given value.
  green_not: String
  # All values that are contained in given list.
  green_in: [String!]
  # All values that are not contained in given list.
  green_not_in: [String!]
  # All values less than the given value.
  green_lt: String
  # All values less than or equal the given value.
  green_lte: String
  # All values greater than the given value.
  green_gt: String
  # All values greater than or equal the given value.
  green_gte: String
  # All values containing the given string.
  green_contains: String
  # All values not containing the given string.
  green_not_contains: String
  # All values starting with the given string.
  green_starts_with: String
  # All values not starting with the given string.
  green_not_starts_with: String
  # All values ending with the given string.
  green_ends_with: String
  # All values not ending with the given string.
  green_not_ends_with: String
  azure: String
  # All values that are not equal to given value.
  azure_not: String
  # All values that are contained in given list.
  azure_in: [String!]
  # All values that are not contained in given list.
  azure_not_in: [String!]
  # All values less than the given value.
  azure_lt: String
  # All values less than or equal the given value.
  azure_lte: String
  # All values greater than the given value.
  azure_gt: String
  # All values greater than or equal the given value.
  azure_gte: String
  # All values containing the given string.
  azure_contains: String
  # All values not containing the given string.
  azure_not_contains: String
  # All values starting with the given string.
  azure_starts_with: String
  # All values not starting with the given string.
  azure_not_starts_with: String
  # All values ending with the given string.
  azure_ends_with: String
  # All values not ending with the given string.
  azure_not_ends_with: String
  magenta: String
  # All values that are not equal to given value.
  magenta_not: String
  # All values that are contained in given list.
  magenta_in: [String!]
  # All values that are not contained in given list.
  magenta_not_in: [String!]
  # All values less than the given value.
  magenta_lt: String
  # All values less than or equal the given value.
  magenta_lte: String
  # All values greater than the given value.
  magenta_gt: String
  # All values greater than or equal the given value.
  magenta_gte: String
  # All values containing the given string.
  magenta_contains: String
  # All values not containing the given string.
  magenta_not_contains: String
  # All values starting with the given string.
  magenta_starts_with: String
  # All values not starting with the given string.
  magenta_not_starts_with: String
  # All values ending with the given string.
  magenta_ends_with: String
  # All values not ending with the given string.
  magenta_not_ends_with: String
  lavender: String
  # All values that are not equal to given value.
  lavender_not: String
  # All values that are contained in given list.
  lavender_in: [String!]
  # All values that are not contained in given list.
  lavender_not_in: [String!]
  # All values less than the given value.
  lavender_lt: String
  # All values less than or equal the given value.
  lavender_lte: String
  # All values greater than the given value.
  lavender_gt: String
  # All values greater than or equal the given value.
  lavender_gte: String
  # All values containing the given string.
  lavender_contains: String
  # All values not containing the given string.
  lavender_not_contains: String
  # All values starting with the given string.
  lavender_starts_with: String
  # All values not starting with the given string.
  lavender_not_starts_with: String
  # All values ending with the given string.
  lavender_ends_with: String
  # All values not ending with the given string.
  lavender_not_ends_with: String
  olive: Daugherty
  # All values that are not equal to given value.
  olive_not: Daugherty
  # All values that are contained in given list.
  olive_in: [Daugherty!]
  # All values that are not contained in given list.
  olive_not_in: [Daugherty!]
  gold: String
  # All values that are not equal to given value.
  gold_not: String
  # All values that are contained in given list.
  gold_in: [String!]
  # All values that are not contained in given list.
  gold_not_in: [String!]
  # All values less than the given value.
  gold_lt: String
  # All values less than or equal the given value.
  gold_lte: String
  # All values greater than the given value.
  gold_gt: String
  # All values greater than or equal the given value.
  gold_gte: String
  # All values containing the given string.
  gold_contains: String
  # All values not containing the given string.
  gold_not_contains: String
  # All values starting with the given string.
  gold_starts_with: String
  # All values not starting with the given string.
  gold_not_starts_with: String
  # All values ending with the given string.
  gold_ends_with: String
  # All values not ending with the given string.
  gold_not_ends_with: String
  black: String
  # All values that are not equal to given value.
  black_not: String
  # All values that are contained in given list.
  black_in: [String!]
  # All values that are not contained in given list.
  black_not_in: [String!]
  # All values less than the given value.
  black_lt: String
  # All values less than or equal the given value.
  black_lte: String
  # All values greater than the given value.
  black_gt: String
  # All values greater than or equal the given value.
  black_gte: String
  # All values containing the given string.
  black_contains: String
  # All values not containing the given string.
  black_not_contains: String
  # All values starting with the given string.
  black_starts_with: String
  # All values not starting with the given string.
  black_not_starts_with: String
  # All values ending with the given string.
  black_ends_with: String
  # All values not ending with the given string.
  black_not_ends_with: String
}

input VivaWhereUniqueInput {
  id: ID
  olive: Daugherty
}

type Voltsillam implements Node {
  status: Status!
  updatedAt: DateTime!
  createdAt: DateTime!
  id: ID!
  ivory: String
  black: String
  olive: String
  cyan: Daugherty!
}

# A connection to a list of items.
type VoltsillamConnection {
  # Information to aid in pagination.
  pageInfo: PageInfo!
  # A list of edges.
  edges: [VoltsillamEdge]!
  aggregate: AggregateVoltsillam!
}

input VoltsillamCreateInput {
  status: Status
  ivory: String
  black: String
  olive: String
  cyan: Daugherty!
}

# An edge in a connection.
type VoltsillamEdge {
  # The item at the end of the edge.
  node: Voltsillam!
  # A cursor for use in pagination.
  cursor: String!
}

enum VoltsillamOrderByInput {
  status_ASC
  status_DESC
  updatedAt_ASC
  updatedAt_DESC
  createdAt_ASC
  createdAt_DESC
  id_ASC
  id_DESC
  ivory_ASC
  ivory_DESC
  black_ASC
  black_DESC
  olive_ASC
  olive_DESC
  cyan_ASC
  cyan_DESC
}

type VoltsillamPreviousValues {
  status: Status!
  updatedAt: DateTime!
  createdAt: DateTime!
  id: ID!
  ivory: String
  black: String
  olive: String
  cyan: Daugherty!
}

type VoltsillamSubscriptionPayload {
  mutation: MutationType!
  node: Voltsillam
  updatedFields: [String!]
  previousValues: VoltsillamPreviousValues
}

input VoltsillamSubscriptionWhereInput {
  # Logical AND on all given filters.
  AND: [VoltsillamSubscriptionWhereInput!]
  # Logical OR on all given filters.
  OR: [VoltsillamSubscriptionWhereInput!]
  # Logical NOT on all given filters combined by AND.
  NOT: [VoltsillamSubscriptionWhereInput!]
  # The subscription event gets dispatched when it's listed in mutation_in
  mutation_in: [MutationType!]
  # The subscription event gets only dispatched when one of the updated fields names is included in this list
  updatedFields_contains: String
  # The subscription event gets only dispatched when all of the field names included in this list have been updated
  updatedFields_contains_every: [String!]
  # The subscription event gets only dispatched when some of the field names included in this list have been updated
  updatedFields_contains_some: [String!]
  node: VoltsillamWhereInput
}

input VoltsillamUpdateInput {
  status: Status
  ivory: String
  black: String
  olive: String
  cyan: Daugherty
}

input VoltsillamUpdateManyMutationInput {
  status: Status
  ivory: String
  black: String
  olive: String
  cyan: Daugherty
}

input VoltsillamWhereInput {
  # Logical AND on all given filters.
  AND: [VoltsillamWhereInput!]
  # Logical OR on all given filters.
  OR: [VoltsillamWhereInput!]
  # Logical NOT on all given filters combined by AND.
  NOT: [VoltsillamWhereInput!]
  status: Status
  # All values that are not equal to given value.
  status_not: Status
  # All values that are contained in given list.
  status_in: [Status!]
  # All values that are not contained in given list.
  status_not_in: [Status!]
  updatedAt: DateTime
  # All values that are not equal to given value.
  updatedAt_not: DateTime
  # All values that are contained in given list.
  updatedAt_in: [DateTime!]
  # All values that are not contained in given list.
  updatedAt_not_in: [DateTime!]
  # All values less than the given value.
  updatedAt_lt: DateTime
  # All values less than or equal the given value.
  updatedAt_lte: DateTime
  # All values greater than the given value.
  updatedAt_gt: DateTime
  # All values greater than or equal the given value.
  updatedAt_gte: DateTime
  createdAt: DateTime
  # All values that are not equal to given value.
  createdAt_not: DateTime
  # All values that are contained in given list.
  createdAt_in: [DateTime!]
  # All values that are not contained in given list.
  createdAt_not_in: [DateTime!]
  # All values less than the given value.
  createdAt_lt: DateTime
  # All values less than or equal the given value.
  createdAt_lte: DateTime
  # All values greater than the given value.
  createdAt_gt: DateTime
  # All values greater than or equal the given value.
  createdAt_gte: DateTime
  id: ID
  # All values that are not equal to given value.
  id_not: ID
  # All values that are contained in given list.
  id_in: [ID!]
  # All values that are not contained in given list.
  id_not_in: [ID!]
  # All values less than the given value.
  id_lt: ID
  # All values less than or equal the given value.
  id_lte: ID
  # All values greater than the given value.
  id_gt: ID
  # All values greater than or equal the given value.
  id_gte: ID
  # All values containing the given string.
  id_contains: ID
  # All values not containing the given string.
  id_not_contains: ID
  # All values starting with the given string.
  id_starts_with: ID
  # All values not starting with the given string.
  id_not_starts_with: ID
  # All values ending with the given string.
  id_ends_with: ID
  # All values not ending with the given string.
  id_not_ends_with: ID
  ivory: String
  # All values that are not equal to given value.
  ivory_not: String
  # All values that are contained in given list.
  ivory_in: [String!]
  # All values that are not contained in given list.
  ivory_not_in: [String!]
  # All values less than the given value.
  ivory_lt: String
  # All values less than or equal the given value.
  ivory_lte: String
  # All values greater than the given value.
  ivory_gt: String
  # All values greater than or equal the given value.
  ivory_gte: String
  # All values containing the given string.
  ivory_contains: String
  # All values not containing the given string.
  ivory_not_contains: String
  # All values starting with the given string.
  ivory_starts_with: String
  # All values not starting with the given string.
  ivory_not_starts_with: String
  # All values ending with the given string.
  ivory_ends_with: String
  # All values not ending with the given string.
  ivory_not_ends_with: String
  black: String
  # All values that are not equal to given value.
  black_not: String
  # All values that are contained in given list.
  black_in: [String!]
  # All values that are not contained in given list.
  black_not_in: [String!]
  # All values less than the given value.
  black_lt: String
  # All values less than or equal the given value.
  black_lte: String
  # All values greater than the given value.
  black_gt: String
  # All values greater than or equal the given value.
  black_gte: String
  # All values containing the given string.
  black_contains: String
  # All values not containing the given string.
  black_not_contains: String
  # All values starting with the given string.
  black_starts_with: String
  # All values not starting with the given string.
  black_not_starts_with: String
  # All values ending with the given string.
  black_ends_with: String
  # All values not ending with the given string.
  black_not_ends_with: String
  olive: String
  # All values that are not equal to given value.
  olive_not: String
  # All values that are contained in given list.
  olive_in: [String!]
  # All values that are not contained in given list.
  olive_not_in: [String!]
  # All values less than the given value.
  olive_lt: String
  # All values less than or equal the given value.
  olive_lte: String
  # All values greater than the given value.
  olive_gt: String
  # All values greater than or equal the given value.
  olive_gte: String
  # All values containing the given string.
  olive_contains: String
  # All values not containing the given string.
  olive_not_contains: String
  # All values starting with the given string.
  olive_starts_with: String
  # All values not starting with the given string.
  olive_not_starts_with: String
  # All values ending with the given string.
  olive_ends_with: String
  # All values not ending with the given string.
  olive_not_ends_with: String
  cyan: Daugherty
  # All values that are not equal to given value.
  cyan_not: Daugherty
  # All values that are contained in given list.
  cyan_in: [Daugherty!]
  # All values that are not contained in given list.
  cyan_not_in: [Daugherty!]
}

input VoltsillamWhereUniqueInput {
  id: ID
  cyan: Daugherty
}

enum Von {
  ZERO
  ONE
  TWO
  THREE
}

type Voyatouch implements Node {
  status: Status!
  updatedAt: DateTime!
  createdAt: DateTime!
  id: ID!
  purple: String!
  white: String!
  tan(
    where: BigtaxWhereInput
    orderBy: BigtaxOrderByInput
    skip: Int
    after: String
    before: String
    first: Int
    last: Int
  ): [Bigtax!]
  orange: Int
  silver: String
}

# A connection to a list of items.
type VoyatouchConnection {
  # Information to aid in pagination.
  pageInfo: PageInfo!
  # A list of edges.
  edges: [VoyatouchEdge]!
  aggregate: AggregateVoyatouch!
}

input VoyatouchCreateInput {
  status: Status
  purple: String!
  white: String!
  orange: Int
  silver: String
  tan: BigtaxCreateManyWithoutYellowInput
}

input VoyatouchCreateManyWithoutTanInput {
  create: [VoyatouchCreateWithoutTanInput!]
  connect: [VoyatouchWhereUniqueInput!]
}

input VoyatouchCreateWithoutTanInput {
  status: Status
  purple: String!
  white: String!
  orange: Int
  silver: String
}

# An edge in a connection.
type VoyatouchEdge {
  # The item at the end of the edge.
  node: Voyatouch!
  # A cursor for use in pagination.
  cursor: String!
}

enum VoyatouchOrderByInput {
  status_ASC
  status_DESC
  updatedAt_ASC
  updatedAt_DESC
  createdAt_ASC
  createdAt_DESC
  id_ASC
  id_DESC
  purple_ASC
  purple_DESC
  white_ASC
  white_DESC
  orange_ASC
  orange_DESC
  silver_ASC
  silver_DESC
}

type VoyatouchPreviousValues {
  status: Status!
  updatedAt: DateTime!
  createdAt: DateTime!
  id: ID!
  purple: String!
  white: String!
  orange: Int
  silver: String
}

input VoyatouchScalarWhereInput {
  # Logical AND on all given filters.
  AND: [VoyatouchScalarWhereInput!]
  # Logical OR on all given filters.
  OR: [VoyatouchScalarWhereInput!]
  # Logical NOT on all given filters combined by AND.
  NOT: [VoyatouchScalarWhereInput!]
  status: Status
  # All values that are not equal to given value.
  status_not: Status
  # All values that are contained in given list.
  status_in: [Status!]
  # All values that are not contained in given list.
  status_not_in: [Status!]
  updatedAt: DateTime
  # All values that are not equal to given value.
  updatedAt_not: DateTime
  # All values that are contained in given list.
  updatedAt_in: [DateTime!]
  # All values that are not contained in given list.
  updatedAt_not_in: [DateTime!]
  # All values less than the given value.
  updatedAt_lt: DateTime
  # All values less than or equal the given value.
  updatedAt_lte: DateTime
  # All values greater than the given value.
  updatedAt_gt: DateTime
  # All values greater than or equal the given value.
  updatedAt_gte: DateTime
  createdAt: DateTime
  # All values that are not equal to given value.
  createdAt_not: DateTime
  # All values that are contained in given list.
  createdAt_in: [DateTime!]
  # All values that are not contained in given list.
  createdAt_not_in: [DateTime!]
  # All values less than the given value.
  createdAt_lt: DateTime
  # All values less than or equal the given value.
  createdAt_lte: DateTime
  # All values greater than the given value.
  createdAt_gt: DateTime
  # All values greater than or equal the given value.
  createdAt_gte: DateTime
  id: ID
  # All values that are not equal to given value.
  id_not: ID
  # All values that are contained in given list.
  id_in: [ID!]
  # All values that are not contained in given list.
  id_not_in: [ID!]
  # All values less than the given value.
  id_lt: ID
  # All values less than or equal the given value.
  id_lte: ID
  # All values greater than the given value.
  id_gt: ID
  # All values greater than or equal the given value.
  id_gte: ID
  # All values containing the given string.
  id_contains: ID
  # All values not containing the given string.
  id_not_contains: ID
  # All values starting with the given string.
  id_starts_with: ID
  # All values not starting with the given string.
  id_not_starts_with: ID
  # All values ending with the given string.
  id_ends_with: ID
  # All values not ending with the given string.
  id_not_ends_with: ID
  purple: String
  # All values that are not equal to given value.
  purple_not: String
  # All values that are contained in given list.
  purple_in: [String!]
  # All values that are not contained in given list.
  purple_not_in: [String!]
  # All values less than the given value.
  purple_lt: String
  # All values less than or equal the given value.
  purple_lte: String
  # All values greater than the given value.
  purple_gt: String
  # All values greater than or equal the given value.
  purple_gte: String
  # All values containing the given string.
  purple_contains: String
  # All values not containing the given string.
  purple_not_contains: String
  # All values starting with the given string.
  purple_starts_with: String
  # All values not starting with the given string.
  purple_not_starts_with: String
  # All values ending with the given string.
  purple_ends_with: String
  # All values not ending with the given string.
  purple_not_ends_with: String
  white: String
  # All values that are not equal to given value.
  white_not: String
  # All values that are contained in given list.
  white_in: [String!]
  # All values that are not contained in given list.
  white_not_in: [String!]
  # All values less than the given value.
  white_lt: String
  # All values less than or equal the given value.
  white_lte: String
  # All values greater than the given value.
  white_gt: String
  # All values greater than or equal the given value.
  white_gte: String
  # All values containing the given string.
  white_contains: String
  # All values not containing the given string.
  white_not_contains: String
  # All values starting with the given string.
  white_starts_with: String
  # All values not starting with the given string.
  white_not_starts_with: String
  # All values ending with the given string.
  white_ends_with: String
  # All values not ending with the given string.
  white_not_ends_with: String
  orange: Int
  # All values that are not equal to given value.
  orange_not: Int
  # All values that are contained in given list.
  orange_in: [Int!]
  # All values that are not contained in given list.
  orange_not_in: [Int!]
  # All values less than the given value.
  orange_lt: Int
  # All values less than or equal the given value.
  orange_lte: Int
  # All values greater than the given value.
  orange_gt: Int
  # All values greater than or equal the given value.
  orange_gte: Int
  silver: String
  # All values that are not equal to given value.
  silver_not: String
  # All values that are contained in given list.
  silver_in: [String!]
  # All values that are not contained in given list.
  silver_not_in: [String!]
  # All values less than the given value.
  silver_lt: String
  # All values less than or equal the given value.
  silver_lte: String
  # All values greater than the given value.
  silver_gt: String
  # All values greater than or equal the given value.
  silver_gte: String
  # All values containing the given string.
  silver_contains: String
  # All values not containing the given string.
  silver_not_contains: String
  # All values starting with the given string.
  silver_starts_with: String
  # All values not starting with the given string.
  silver_not_starts_with: String
  # All values ending with the given string.
  silver_ends_with: String
  # All values not ending with the given string.
  silver_not_ends_with: String
}

type VoyatouchSubscriptionPayload {
  mutation: MutationType!
  node: Voyatouch
  updatedFields: [String!]
  previousValues: VoyatouchPreviousValues
}

input VoyatouchSubscriptionWhereInput {
  # Logical AND on all given filters.
  AND: [VoyatouchSubscriptionWhereInput!]
  # Logical OR on all given filters.
  OR: [VoyatouchSubscriptionWhereInput!]
  # Logical NOT on all given filters combined by AND.
  NOT: [VoyatouchSubscriptionWhereInput!]
  # The subscription event gets dispatched when it's listed in mutation_in
  mutation_in: [MutationType!]
  # The subscription event gets only dispatched when one of the updated fields names is included in this list
  updatedFields_contains: String
  # The subscription event gets only dispatched when all of the field names included in this list have been updated
  updatedFields_contains_every: [String!]
  # The subscription event gets only dispatched when some of the field names included in this list have been updated
  updatedFields_contains_some: [String!]
  node: VoyatouchWhereInput
}

input VoyatouchUpdateInput {
  status: Status
  purple: String
  white: String
  orange: Int
  silver: String
  tan: BigtaxUpdateManyWithoutYellowInput
}

input VoyatouchUpdateManyDataInput {
  status: Status
  purple: String
  white: String
  orange: Int
  silver: String
}

input VoyatouchUpdateManyMutationInput {
  status: Status
  purple: String
  white: String
  orange: Int
  silver: String
}

input VoyatouchUpdateManyWithoutTanInput {
  create: [VoyatouchCreateWithoutTanInput!]
  connect: [VoyatouchWhereUniqueInput!]
  set: [VoyatouchWhereUniqueInput!]
  disconnect: [VoyatouchWhereUniqueInput!]
  delete: [VoyatouchWhereUniqueInput!]
  update: [VoyatouchUpdateWithWhereUniqueWithoutTanInput!]
  updateMany: [VoyatouchUpdateManyWithWhereNestedInput!]
  deleteMany: [VoyatouchScalarWhereInput!]
  upsert: [VoyatouchUpsertWithWhereUniqueWithoutTanInput!]
}

input VoyatouchUpdateManyWithWhereNestedInput {
  where: VoyatouchScalarWhereInput!
  data: VoyatouchUpdateManyDataInput!
}

input VoyatouchUpdateWithoutTanDataInput {
  status: Status
  purple: String
  white: String
  orange: Int
  silver: String
}

input VoyatouchUpdateWithWhereUniqueWithoutTanInput {
  where: VoyatouchWhereUniqueInput!
  data: VoyatouchUpdateWithoutTanDataInput!
}

input VoyatouchUpsertWithWhereUniqueWithoutTanInput {
  where: VoyatouchWhereUniqueInput!
  update: VoyatouchUpdateWithoutTanDataInput!
  create: VoyatouchCreateWithoutTanInput!
}

input VoyatouchWhereInput {
  # Logical AND on all given filters.
  AND: [VoyatouchWhereInput!]
  # Logical OR on all given filters.
  OR: [VoyatouchWhereInput!]
  # Logical NOT on all given filters combined by AND.
  NOT: [VoyatouchWhereInput!]
  status: Status
  # All values that are not equal to given value.
  status_not: Status
  # All values that are contained in given list.
  status_in: [Status!]
  # All values that are not contained in given list.
  status_not_in: [Status!]
  updatedAt: DateTime
  # All values that are not equal to given value.
  updatedAt_not: DateTime
  # All values that are contained in given list.
  updatedAt_in: [DateTime!]
  # All values that are not contained in given list.
  updatedAt_not_in: [DateTime!]
  # All values less than the given value.
  updatedAt_lt: DateTime
  # All values less than or equal the given value.
  updatedAt_lte: DateTime
  # All values greater than the given value.
  updatedAt_gt: DateTime
  # All values greater than or equal the given value.
  updatedAt_gte: DateTime
  createdAt: DateTime
  # All values that are not equal to given value.
  createdAt_not: DateTime
  # All values that are contained in given list.
  createdAt_in: [DateTime!]
  # All values that are not contained in given list.
  createdAt_not_in: [DateTime!]
  # All values less than the given value.
  createdAt_lt: DateTime
  # All values less than or equal the given value.
  createdAt_lte: DateTime
  # All values greater than the given value.
  createdAt_gt: DateTime
  # All values greater than or equal the given value.
  createdAt_gte: DateTime
  id: ID
  # All values that are not equal to given value.
  id_not: ID
  # All values that are contained in given list.
  id_in: [ID!]
  # All values that are not contained in given list.
  id_not_in: [ID!]
  # All values less than the given value.
  id_lt: ID
  # All values less than or equal the given value.
  id_lte: ID
  # All values greater than the given value.
  id_gt: ID
  # All values greater than or equal the given value.
  id_gte: ID
  # All values containing the given string.
  id_contains: ID
  # All values not containing the given string.
  id_not_contains: ID
  # All values starting with the given string.
  id_starts_with: ID
  # All values not starting with the given string.
  id_not_starts_with: ID
  # All values ending with the given string.
  id_ends_with: ID
  # All values not ending with the given string.
  id_not_ends_with: ID
  purple: String
  # All values that are not equal to given value.
  purple_not: String
  # All values that are contained in given list.
  purple_in: [String!]
  # All values that are not contained in given list.
  purple_not_in: [String!]
  # All values less than the given value.
  purple_lt: String
  # All values less than or equal the given value.
  purple_lte: String
  # All values greater than the given value.
  purple_gt: String
  # All values greater than or equal the given value.
  purple_gte: String
  # All values containing the given string.
  purple_contains: String
  # All values not containing the given string.
  purple_not_contains: String
  # All values starting with the given string.
  purple_starts_with: String
  # All values not starting with the given string.
  purple_not_starts_with: String
  # All values ending with the given string.
  purple_ends_with: String
  # All values not ending with the given string.
  purple_not_ends_with: String
  white: String
  # All values that are not equal to given value.
  white_not: String
  # All values that are contained in given list.
  white_in: [String!]
  # All values that are not contained in given list.
  white_not_in: [String!]
  # All values less than the given value.
  white_lt: String
  # All values less than or equal the given value.
  white_lte: String
  # All values greater than the given value.
  white_gt: String
  # All values greater than or equal the given value.
  white_gte: String
  # All values containing the given string.
  white_contains: String
  # All values not containing the given string.
  white_not_contains: String
  # All values starting with the given string.
  white_starts_with: String
  # All values not starting with the given string.
  white_not_starts_with: String
  # All values ending with the given string.
  white_ends_with: String
  # All values not ending with the given string.
  white_not_ends_with: String
  orange: Int
  # All values that are not equal to given value.
  orange_not: Int
  # All values that are contained in given list.
  orange_in: [Int!]
  # All values that are not contained in given list.
  orange_not_in: [Int!]
  # All values less than the given value.
  orange_lt: Int
  # All values less than or equal the given value.
  orange_lte: Int
  # All values greater than the given value.
  orange_gt: Int
  # All values greater than or equal the given value.
  orange_gte: Int
  silver: String
  # All values that are not equal to given value.
  silver_not: String
  # All values that are contained in given list.
  silver_in: [String!]
  # All values that are not contained in given list.
  silver_not_in: [String!]
  # All values less than the given value.
  silver_lt: String
  # All values less than or equal the given value.
  silver_lte: String
  # All values greater than the given value.
  silver_gt: String
  # All values greater than or equal the given value.
  silver_gte: String
  # All values containing the given string.
  silver_contains: String
  # All values not containing the given string.
  silver_not_contains: String
  # All values starting with the given string.
  silver_starts_with: String
  # All values not starting with the given string.
  silver_not_starts_with: String
  # All values ending with the given string.
  silver_ends_with: String
  # All values not ending with the given string.
  silver_not_ends_with: String
  tan_every: BigtaxWhereInput
  tan_some: BigtaxWhereInput
  tan_none: BigtaxWhereInput
}

input VoyatouchWhereUniqueInput {
  id: ID
}

enum Wisoky {
  ET
  AT
  BLANDITIIS
  REICIENDIS
}

type Zamit implements Node {
  status: Status!
  updatedAt: DateTime!
  createdAt: DateTime!
  id: ID!
  green: String
  ivory: String!
  orchid: String!
  fuchsia: String
  violet: Parker
  yellow: Boolean
  orange: String
  plum: String
  grey: Asset
}

# A connection to a list of items.
type ZamitConnection {
  # Information to aid in pagination.
  pageInfo: PageInfo!
  # A list of edges.
  edges: [ZamitEdge]!
  aggregate: AggregateZamit!
}

input ZamitCreateInput {
  status: Status
  green: String
  ivory: String!
  orchid: String!
  fuchsia: String
  violet: Parker
  yellow: Boolean
  orange: String
  plum: String
  grey: AssetCreateOneWithoutGreyZamitInput
}

input ZamitCreateManyWithoutGreyInput {
  create: [ZamitCreateWithoutGreyInput!]
  connect: [ZamitWhereUniqueInput!]
}

input ZamitCreateWithoutGreyInput {
  status: Status
  green: String
  ivory: String!
  orchid: String!
  fuchsia: String
  violet: Parker
  yellow: Boolean
  orange: String
  plum: String
}

# An edge in a connection.
type ZamitEdge {
  # The item at the end of the edge.
  node: Zamit!
  # A cursor for use in pagination.
  cursor: String!
}

enum ZamitOrderByInput {
  status_ASC
  status_DESC
  updatedAt_ASC
  updatedAt_DESC
  createdAt_ASC
  createdAt_DESC
  id_ASC
  id_DESC
  green_ASC
  green_DESC
  ivory_ASC
  ivory_DESC
  orchid_ASC
  orchid_DESC
  fuchsia_ASC
  fuchsia_DESC
  violet_ASC
  violet_DESC
  yellow_ASC
  yellow_DESC
  orange_ASC
  orange_DESC
  plum_ASC
  plum_DESC
}

type ZamitPreviousValues {
  status: Status!
  updatedAt: DateTime!
  createdAt: DateTime!
  id: ID!
  green: String
  ivory: String!
  orchid: String!
  fuchsia: String
  violet: Parker
  yellow: Boolean
  orange: String
  plum: String
}

input ZamitScalarWhereInput {
  # Logical AND on all given filters.
  AND: [ZamitScalarWhereInput!]
  # Logical OR on all given filters.
  OR: [ZamitScalarWhereInput!]
  # Logical NOT on all given filters combined by AND.
  NOT: [ZamitScalarWhereInput!]
  status: Status
  # All values that are not equal to given value.
  status_not: Status
  # All values that are contained in given list.
  status_in: [Status!]
  # All values that are not contained in given list.
  status_not_in: [Status!]
  updatedAt: DateTime
  # All values that are not equal to given value.
  updatedAt_not: DateTime
  # All values that are contained in given list.
  updatedAt_in: [DateTime!]
  # All values that are not contained in given list.
  updatedAt_not_in: [DateTime!]
  # All values less than the given value.
  updatedAt_lt: DateTime
  # All values less than or equal the given value.
  updatedAt_lte: DateTime
  # All values greater than the given value.
  updatedAt_gt: DateTime
  # All values greater than or equal the given value.
  updatedAt_gte: DateTime
  createdAt: DateTime
  # All values that are not equal to given value.
  createdAt_not: DateTime
  # All values that are contained in given list.
  createdAt_in: [DateTime!]
  # All values that are not contained in given list.
  createdAt_not_in: [DateTime!]
  # All values less than the given value.
  createdAt_lt: DateTime
  # All values less than or equal the given value.
  createdAt_lte: DateTime
  # All values greater than the given value.
  createdAt_gt: DateTime
  # All values greater than or equal the given value.
  createdAt_gte: DateTime
  id: ID
  # All values that are not equal to given value.
  id_not: ID
  # All values that are contained in given list.
  id_in: [ID!]
  # All values that are not contained in given list.
  id_not_in: [ID!]
  # All values less than the given value.
  id_lt: ID
  # All values less than or equal the given value.
  id_lte: ID
  # All values greater than the given value.
  id_gt: ID
  # All values greater than or equal the given value.
  id_gte: ID
  # All values containing the given string.
  id_contains: ID
  # All values not containing the given string.
  id_not_contains: ID
  # All values starting with the given string.
  id_starts_with: ID
  # All values not starting with the given string.
  id_not_starts_with: ID
  # All values ending with the given string.
  id_ends_with: ID
  # All values not ending with the given string.
  id_not_ends_with: ID
  green: String
  # All values that are not equal to given value.
  green_not: String
  # All values that are contained in given list.
  green_in: [String!]
  # All values that are not contained in given list.
  green_not_in: [String!]
  # All values less than the given value.
  green_lt: String
  # All values less than or equal the given value.
  green_lte: String
  # All values greater than the given value.
  green_gt: String
  # All values greater than or equal the given value.
  green_gte: String
  # All values containing the given string.
  green_contains: String
  # All values not containing the given string.
  green_not_contains: String
  # All values starting with the given string.
  green_starts_with: String
  # All values not starting with the given string.
  green_not_starts_with: String
  # All values ending with the given string.
  green_ends_with: String
  # All values not ending with the given string.
  green_not_ends_with: String
  ivory: String
  # All values that are not equal to given value.
  ivory_not: String
  # All values that are contained in given list.
  ivory_in: [String!]
  # All values that are not contained in given list.
  ivory_not_in: [String!]
  # All values less than the given value.
  ivory_lt: String
  # All values less than or equal the given value.
  ivory_lte: String
  # All values greater than the given value.
  ivory_gt: String
  # All values greater than or equal the given value.
  ivory_gte: String
  # All values containing the given string.
  ivory_contains: String
  # All values not containing the given string.
  ivory_not_contains: String
  # All values starting with the given string.
  ivory_starts_with: String
  # All values not starting with the given string.
  ivory_not_starts_with: String
  # All values ending with the given string.
  ivory_ends_with: String
  # All values not ending with the given string.
  ivory_not_ends_with: String
  orchid: String
  # All values that are not equal to given value.
  orchid_not: String
  # All values that are contained in given list.
  orchid_in: [String!]
  # All values that are not contained in given list.
  orchid_not_in: [String!]
  # All values less than the given value.
  orchid_lt: String
  # All values less than or equal the given value.
  orchid_lte: String
  # All values greater than the given value.
  orchid_gt: String
  # All values greater than or equal the given value.
  orchid_gte: String
  # All values containing the given string.
  orchid_contains: String
  # All values not containing the given string.
  orchid_not_contains: String
  # All values starting with the given string.
  orchid_starts_with: String
  # All values not starting with the given string.
  orchid_not_starts_with: String
  # All values ending with the given string.
  orchid_ends_with: String
  # All values not ending with the given string.
  orchid_not_ends_with: String
  fuchsia: String
  # All values that are not equal to given value.
  fuchsia_not: String
  # All values that are contained in given list.
  fuchsia_in: [String!]
  # All values that are not contained in given list.
  fuchsia_not_in: [String!]
  # All values less than the given value.
  fuchsia_lt: String
  # All values less than or equal the given value.
  fuchsia_lte: String
  # All values greater than the given value.
  fuchsia_gt: String
  # All values greater than or equal the given value.
  fuchsia_gte: String
  # All values containing the given string.
  fuchsia_contains: String
  # All values not containing the given string.
  fuchsia_not_contains: String
  # All values starting with the given string.
  fuchsia_starts_with: String
  # All values not starting with the given string.
  fuchsia_not_starts_with: String
  # All values ending with the given string.
  fuchsia_ends_with: String
  # All values not ending with the given string.
  fuchsia_not_ends_with: String
  violet: Parker
  # All values that are not equal to given value.
  violet_not: Parker
  # All values that are contained in given list.
  violet_in: [Parker!]
  # All values that are not contained in given list.
  violet_not_in: [Parker!]
  yellow: Boolean
  # All values that are not equal to given value.
  yellow_not: Boolean
  orange: String
  # All values that are not equal to given value.
  orange_not: String
  # All values that are contained in given list.
  orange_in: [String!]
  # All values that are not contained in given list.
  orange_not_in: [String!]
  # All values less than the given value.
  orange_lt: String
  # All values less than or equal the given value.
  orange_lte: String
  # All values greater than the given value.
  orange_gt: String
  # All values greater than or equal the given value.
  orange_gte: String
  # All values containing the given string.
  orange_contains: String
  # All values not containing the given string.
  orange_not_contains: String
  # All values starting with the given string.
  orange_starts_with: String
  # All values not starting with the given string.
  orange_not_starts_with: String
  # All values ending with the given string.
  orange_ends_with: String
  # All values not ending with the given string.
  orange_not_ends_with: String
  plum: String
  # All values that are not equal to given value.
  plum_not: String
  # All values that are contained in given list.
  plum_in: [String!]
  # All values that are not contained in given list.
  plum_not_in: [String!]
  # All values less than the given value.
  plum_lt: String
  # All values less than or equal the given value.
  plum_lte: String
  # All values greater than the given value.
  plum_gt: String
  # All values greater than or equal the given value.
  plum_gte: String
  # All values containing the given string.
  plum_contains: String
  # All values not containing the given string.
  plum_not_contains: String
  # All values starting with the given string.
  plum_starts_with: String
  # All values not starting with the given string.
  plum_not_starts_with: String
  # All values ending with the given string.
  plum_ends_with: String
  # All values not ending with the given string.
  plum_not_ends_with: String
}

type ZamitSubscriptionPayload {
  mutation: MutationType!
  node: Zamit
  updatedFields: [String!]
  previousValues: ZamitPreviousValues
}

input ZamitSubscriptionWhereInput {
  # Logical AND on all given filters.
  AND: [ZamitSubscriptionWhereInput!]
  # Logical OR on all given filters.
  OR: [ZamitSubscriptionWhereInput!]
  # Logical NOT on all given filters combined by AND.
  NOT: [ZamitSubscriptionWhereInput!]
  # The subscription event gets dispatched when it's listed in mutation_in
  mutation_in: [MutationType!]
  # The subscription event gets only dispatched when one of the updated fields names is included in this list
  updatedFields_contains: String
  # The subscription event gets only dispatched when all of the field names included in this list have been updated
  updatedFields_contains_every: [String!]
  # The subscription event gets only dispatched when some of the field names included in this list have been updated
  updatedFields_contains_some: [String!]
  node: ZamitWhereInput
}

input ZamitUpdateInput {
  status: Status
  green: String
  ivory: String
  orchid: String
  fuchsia: String
  violet: Parker
  yellow: Boolean
  orange: String
  plum: String
  grey: AssetUpdateOneWithoutGreyZamitInput
}

input ZamitUpdateManyDataInput {
  status: Status
  green: String
  ivory: String
  orchid: String
  fuchsia: String
  violet: Parker
  yellow: Boolean
  orange: String
  plum: String
}

input ZamitUpdateManyMutationInput {
  status: Status
  green: String
  ivory: String
  orchid: String
  fuchsia: String
  violet: Parker
  yellow: Boolean
  orange: String
  plum: String
}

input ZamitUpdateManyWithoutGreyInput {
  create: [ZamitCreateWithoutGreyInput!]
  connect: [ZamitWhereUniqueInput!]
  set: [ZamitWhereUniqueInput!]
  disconnect: [ZamitWhereUniqueInput!]
  delete: [ZamitWhereUniqueInput!]
  update: [ZamitUpdateWithWhereUniqueWithoutGreyInput!]
  updateMany: [ZamitUpdateManyWithWhereNestedInput!]
  deleteMany: [ZamitScalarWhereInput!]
  upsert: [ZamitUpsertWithWhereUniqueWithoutGreyInput!]
}

input ZamitUpdateManyWithWhereNestedInput {
  where: ZamitScalarWhereInput!
  data: ZamitUpdateManyDataInput!
}

input ZamitUpdateWithoutGreyDataInput {
  status: Status
  green: String
  ivory: String
  orchid: String
  fuchsia: String
  violet: Parker
  yellow: Boolean
  orange: String
  plum: String
}

input ZamitUpdateWithWhereUniqueWithoutGreyInput {
  where: ZamitWhereUniqueInput!
  data: ZamitUpdateWithoutGreyDataInput!
}

input ZamitUpsertWithWhereUniqueWithoutGreyInput {
  where: ZamitWhereUniqueInput!
  update: ZamitUpdateWithoutGreyDataInput!
  create: ZamitCreateWithoutGreyInput!
}

input ZamitWhereInput {
  # Logical AND on all given filters.
  AND: [ZamitWhereInput!]
  # Logical OR on all given filters.
  OR: [ZamitWhereInput!]
  # Logical NOT on all given filters combined by AND.
  NOT: [ZamitWhereInput!]
  status: Status
  # All values that are not equal to given value.
  status_not: Status
  # All values that are contained in given list.
  status_in: [Status!]
  # All values that are not contained in given list.
  status_not_in: [Status!]
  updatedAt: DateTime
  # All values that are not equal to given value.
  updatedAt_not: DateTime
  # All values that are contained in given list.
  updatedAt_in: [DateTime!]
  # All values that are not contained in given list.
  updatedAt_not_in: [DateTime!]
  # All values less than the given value.
  updatedAt_lt: DateTime
  # All values less than or equal the given value.
  updatedAt_lte: DateTime
  # All values greater than the given value.
  updatedAt_gt: DateTime
  # All values greater than or equal the given value.
  updatedAt_gte: DateTime
  createdAt: DateTime
  # All values that are not equal to given value.
  createdAt_not: DateTime
  # All values that are contained in given list.
  createdAt_in: [DateTime!]
  # All values that are not contained in given list.
  createdAt_not_in: [DateTime!]
  # All values less than the given value.
  createdAt_lt: DateTime
  # All values less than or equal the given value.
  createdAt_lte: DateTime
  # All values greater than the given value.
  createdAt_gt: DateTime
  # All values greater than or equal the given value.
  createdAt_gte: DateTime
  id: ID
  # All values that are not equal to given value.
  id_not: ID
  # All values that are contained in given list.
  id_in: [ID!]
  # All values that are not contained in given list.
  id_not_in: [ID!]
  # All values less than the given value.
  id_lt: ID
  # All values less than or equal the given value.
  id_lte: ID
  # All values greater than the given value.
  id_gt: ID
  # All values greater than or equal the given value.
  id_gte: ID
  # All values containing the given string.
  id_contains: ID
  # All values not containing the given string.
  id_not_contains: ID
  # All values starting with the given string.
  id_starts_with: ID
  # All values not starting with the given string.
  id_not_starts_with: ID
  # All values ending with the given string.
  id_ends_with: ID
  # All values not ending with the given string.
  id_not_ends_with: ID
  green: String
  # All values that are not equal to given value.
  green_not: String
  # All values that are contained in given list.
  green_in: [String!]
  # All values that are not contained in given list.
  green_not_in: [String!]
  # All values less than the given value.
  green_lt: String
  # All values less than or equal the given value.
  green_lte: String
  # All values greater than the given value.
  green_gt: String
  # All values greater than or equal the given value.
  green_gte: String
  # All values containing the given string.
  green_contains: String
  # All values not containing the given string.
  green_not_contains: String
  # All values starting with the given string.
  green_starts_with: String
  # All values not starting with the given string.
  green_not_starts_with: String
  # All values ending with the given string.
  green_ends_with: String
  # All values not ending with the given string.
  green_not_ends_with: String
  ivory: String
  # All values that are not equal to given value.
  ivory_not: String
  # All values that are contained in given list.
  ivory_in: [String!]
  # All values that are not contained in given list.
  ivory_not_in: [String!]
  # All values less than the given value.
  ivory_lt: String
  # All values less than or equal the given value.
  ivory_lte: String
  # All values greater than the given value.
  ivory_gt: String
  # All values greater than or equal the given value.
  ivory_gte: String
  # All values containing the given string.
  ivory_contains: String
  # All values not containing the given string.
  ivory_not_contains: String
  # All values starting with the given string.
  ivory_starts_with: String
  # All values not starting with the given string.
  ivory_not_starts_with: String
  # All values ending with the given string.
  ivory_ends_with: String
  # All values not ending with the given string.
  ivory_not_ends_with: String
  orchid: String
  # All values that are not equal to given value.
  orchid_not: String
  # All values that are contained in given list.
  orchid_in: [String!]
  # All values that are not contained in given list.
  orchid_not_in: [String!]
  # All values less than the given value.
  orchid_lt: String
  # All values less than or equal the given value.
  orchid_lte: String
  # All values greater than the given value.
  orchid_gt: String
  # All values greater than or equal the given value.
  orchid_gte: String
  # All values containing the given string.
  orchid_contains: String
  # All values not containing the given string.
  orchid_not_contains: String
  # All values starting with the given string.
  orchid_starts_with: String
  # All values not starting with the given string.
  orchid_not_starts_with: String
  # All values ending with the given string.
  orchid_ends_with: String
  # All values not ending with the given string.
  orchid_not_ends_with: String
  fuchsia: String
  # All values that are not equal to given value.
  fuchsia_not: String
  # All values that are contained in given list.
  fuchsia_in: [String!]
  # All values that are not contained in given list.
  fuchsia_not_in: [String!]
  # All values less than the given value.
  fuchsia_lt: String
  # All values less than or equal the given value.
  fuchsia_lte: String
  # All values greater than the given value.
  fuchsia_gt: String
  # All values greater than or equal the given value.
  fuchsia_gte: String
  # All values containing the given string.
  fuchsia_contains: String
  # All values not containing the given string.
  fuchsia_not_contains: String
  # All values starting with the given string.
  fuchsia_starts_with: String
  # All values not starting with the given string.
  fuchsia_not_starts_with: String
  # All values ending with the given string.
  fuchsia_ends_with: String
  # All values not ending with the given string.
  fuchsia_not_ends_with: String
  violet: Parker
  # All values that are not equal to given value.
  violet_not: Parker
  # All values that are contained in given list.
  violet_in: [Parker!]
  # All values that are not contained in given list.
  violet_not_in: [Parker!]
  yellow: Boolean
  # All values that are not equal to given value.
  yellow_not: Boolean
  orange: String
  # All values that are not equal to given value.
  orange_not: String
  # All values that are contained in given list.
  orange_in: [String!]
  # All values that are not contained in given list.
  orange_not_in: [String!]
  # All values less than the given value.
  orange_lt: String
  # All values less than or equal the given value.
  orange_lte: String
  # All values greater than the given value.
  orange_gt: String
  # All values greater than or equal the given value.
  orange_gte: String
  # All values containing the given string.
  orange_contains: String
  # All values not containing the given string.
  orange_not_contains: String
  # All values starting with the given string.
  orange_starts_with: String
  # All values not starting with the given string.
  orange_not_starts_with: String
  # All values ending with the given string.
  orange_ends_with: String
  # All values not ending with the given string.
  orange_not_ends_with: String
  plum: String
  # All values that are not equal to given value.
  plum_not: String
  # All values that are contained in given list.
  plum_in: [String!]
  # All values that are not contained in given list.
  plum_not_in: [String!]
  # All values less than the given value.
  plum_lt: String
  # All values less than or equal the given value.
  plum_lte: String
  # All values greater than the given value.
  plum_gt: String
  # All values greater than or equal the given value.
  plum_gte: String
  # All values containing the given string.
  plum_contains: String
  # All values not containing the given string.
  plum_not_contains: String
  # All values starting with the given string.
  plum_starts_with: String
  # All values not starting with the given string.
  plum_not_starts_with: String
  # All values ending with the given string.
  plum_ends_with: String
  # All values not ending with the given string.
  plum_not_ends_with: String
  grey: AssetWhereInput
}

input ZamitWhereUniqueInput {
  id: ID
  orchid: String
}

type Zathin implements Node {
  status: Status!
  updatedAt: DateTime!
  createdAt: DateTime!
  id: ID!
  pink: String
  cyan: [King!]!
}

# A connection to a list of items.
type ZathinConnection {
  # Information to aid in pagination.
  pageInfo: PageInfo!
  # A list of edges.
  edges: [ZathinEdge]!
  aggregate: AggregateZathin!
}

input ZathinCreatecyanInput {
  set: [King!]
}

input ZathinCreateInput {
  status: Status
  pink: String
  cyan: ZathinCreatecyanInput
}

# An edge in a connection.
type ZathinEdge {
  # The item at the end of the edge.
  node: Zathin!
  # A cursor for use in pagination.
  cursor: String!
}

enum ZathinOrderByInput {
  status_ASC
  status_DESC
  updatedAt_ASC
  updatedAt_DESC
  createdAt_ASC
  createdAt_DESC
  id_ASC
  id_DESC
  pink_ASC
  pink_DESC
}

type ZathinPreviousValues {
  status: Status!
  updatedAt: DateTime!
  createdAt: DateTime!
  id: ID!
  pink: String
  cyan: [King!]!
}

type ZathinSubscriptionPayload {
  mutation: MutationType!
  node: Zathin
  updatedFields: [String!]
  previousValues: ZathinPreviousValues
}

input ZathinSubscriptionWhereInput {
  # Logical AND on all given filters.
  AND: [ZathinSubscriptionWhereInput!]
  # Logical OR on all given filters.
  OR: [ZathinSubscriptionWhereInput!]
  # Logical NOT on all given filters combined by AND.
  NOT: [ZathinSubscriptionWhereInput!]
  # The subscription event gets dispatched when it's listed in mutation_in
  mutation_in: [MutationType!]
  # The subscription event gets only dispatched when one of the updated fields names is included in this list
  updatedFields_contains: String
  # The subscription event gets only dispatched when all of the field names included in this list have been updated
  updatedFields_contains_every: [String!]
  # The subscription event gets only dispatched when some of the field names included in this list have been updated
  updatedFields_contains_some: [String!]
  node: ZathinWhereInput
}

input ZathinUpdatecyanInput {
  set: [King!]
}

input ZathinUpdateInput {
  status: Status
  pink: String
  cyan: ZathinUpdatecyanInput
}

input ZathinUpdateManyMutationInput {
  status: Status
  pink: String
  cyan: ZathinUpdatecyanInput
}

input ZathinWhereInput {
  # Logical AND on all given filters.
  AND: [ZathinWhereInput!]
  # Logical OR on all given filters.
  OR: [ZathinWhereInput!]
  # Logical NOT on all given filters combined by AND.
  NOT: [ZathinWhereInput!]
  status: Status
  # All values that are not equal to given value.
  status_not: Status
  # All values that are contained in given list.
  status_in: [Status!]
  # All values that are not contained in given list.
  status_not_in: [Status!]
  updatedAt: DateTime
  # All values that are not equal to given value.
  updatedAt_not: DateTime
  # All values that are contained in given list.
  updatedAt_in: [DateTime!]
  # All values that are not contained in given list.
  updatedAt_not_in: [DateTime!]
  # All values less than the given value.
  updatedAt_lt: DateTime
  # All values less than or equal the given value.
  updatedAt_lte: DateTime
  # All values greater than the given value.
  updatedAt_gt: DateTime
  # All values greater than or equal the given value.
  updatedAt_gte: DateTime
  createdAt: DateTime
  # All values that are not equal to given value.
  createdAt_not: DateTime
  # All values that are contained in given list.
  createdAt_in: [DateTime!]
  # All values that are not contained in given list.
  createdAt_not_in: [DateTime!]
  # All values less than the given value.
  createdAt_lt: DateTime
  # All values less than or equal the given value.
  createdAt_lte: DateTime
  # All values greater than the given value.
  createdAt_gt: DateTime
  # All values greater than or equal the given value.
  createdAt_gte: DateTime
  id: ID
  # All values that are not equal to given value.
  id_not: ID
  # All values that are contained in given list.
  id_in: [ID!]
  # All values that are not contained in given list.
  id_not_in: [ID!]
  # All values less than the given value.
  id_lt: ID
  # All values less than or equal the given value.
  id_lte: ID
  # All values greater than the given value.
  id_gt: ID
  # All values greater than or equal the given value.
  id_gte: ID
  # All values containing the given string.
  id_contains: ID
  # All values not containing the given string.
  id_not_contains: ID
  # All values starting with the given string.
  id_starts_with: ID
  # All values not starting with the given string.
  id_not_starts_with: ID
  # All values ending with the given string.
  id_ends_with: ID
  # All values not ending with the given string.
  id_not_ends_with: ID
  pink: String
  # All values that are not equal to given value.
  pink_not: String
  # All values that are contained in given list.
  pink_in: [String!]
  # All values that are not contained in given list.
  pink_not_in: [String!]
  # All values less than the given value.
  pink_lt: String
  # All values less than or equal the given value.
  pink_lte: String
  # All values greater than the given value.
  pink_gt: String
  # All values greater than or equal the given value.
  pink_gte: String
  # All values containing the given string.
  pink_contains: String
  # All values not containing the given string.
  pink_not_contains: String
  # All values starting with the given string.
  pink_starts_with: String
  # All values not starting with the given string.
  pink_not_starts_with: String
  # All values ending with the given string.
  pink_ends_with: String
  # All values not ending with the given string.
  pink_not_ends_with: String
}

input ZathinWhereUniqueInput {
  id: ID
}

type Zoolab implements Node {
  status: Status!
  updatedAt: DateTime!
  createdAt: DateTime!
  id: ID!
  indigo: String!
  azure: Int
  tan(
    where: JobWhereInput
    orderBy: JobOrderByInput
    skip: Int
    after: String
    before: String
    first: Int
    last: Int
  ): [Job!]
}

# A connection to a list of items.
type ZoolabConnection {
  # Information to aid in pagination.
  pageInfo: PageInfo!
  # A list of edges.
  edges: [ZoolabEdge]!
  aggregate: AggregateZoolab!
}

input ZoolabCreateInput {
  status: Status
  indigo: String!
  azure: Int
  tan: JobCreateManyWithoutTanInput
}

input ZoolabCreateOneWithoutTanInput {
  create: ZoolabCreateWithoutTanInput
  connect: ZoolabWhereUniqueInput
}

input ZoolabCreateWithoutTanInput {
  status: Status
  indigo: String!
  azure: Int
}

# An edge in a connection.
type ZoolabEdge {
  # The item at the end of the edge.
  node: Zoolab!
  # A cursor for use in pagination.
  cursor: String!
}

enum ZoolabOrderByInput {
  status_ASC
  status_DESC
  updatedAt_ASC
  updatedAt_DESC
  createdAt_ASC
  createdAt_DESC
  id_ASC
  id_DESC
  indigo_ASC
  indigo_DESC
  azure_ASC
  azure_DESC
}

type ZoolabPreviousValues {
  status: Status!
  updatedAt: DateTime!
  createdAt: DateTime!
  id: ID!
  indigo: String!
  azure: Int
}

type ZoolabSubscriptionPayload {
  mutation: MutationType!
  node: Zoolab
  updatedFields: [String!]
  previousValues: ZoolabPreviousValues
}

input ZoolabSubscriptionWhereInput {
  # Logical AND on all given filters.
  AND: [ZoolabSubscriptionWhereInput!]
  # Logical OR on all given filters.
  OR: [ZoolabSubscriptionWhereInput!]
  # Logical NOT on all given filters combined by AND.
  NOT: [ZoolabSubscriptionWhereInput!]
  # The subscription event gets dispatched when it's listed in mutation_in
  mutation_in: [MutationType!]
  # The subscription event gets only dispatched when one of the updated fields names is included in this list
  updatedFields_contains: String
  # The subscription event gets only dispatched when all of the field names included in this list have been updated
  updatedFields_contains_every: [String!]
  # The subscription event gets only dispatched when some of the field names included in this list have been updated
  updatedFields_contains_some: [String!]
  node: ZoolabWhereInput
}

input ZoolabUpdateInput {
  status: Status
  indigo: String
  azure: Int
  tan: JobUpdateManyWithoutTanInput
}

input ZoolabUpdateManyMutationInput {
  status: Status
  indigo: String
  azure: Int
}

input ZoolabUpdateOneWithoutTanInput {
  create: ZoolabCreateWithoutTanInput
  connect: ZoolabWhereUniqueInput
  disconnect: Boolean
  delete: Boolean
  update: ZoolabUpdateWithoutTanDataInput
  upsert: ZoolabUpsertWithoutTanInput
}

input ZoolabUpdateWithoutTanDataInput {
  status: Status
  indigo: String
  azure: Int
}

input ZoolabUpsertWithoutTanInput {
  update: ZoolabUpdateWithoutTanDataInput!
  create: ZoolabCreateWithoutTanInput!
}

input ZoolabWhereInput {
  # Logical AND on all given filters.
  AND: [ZoolabWhereInput!]
  # Logical OR on all given filters.
  OR: [ZoolabWhereInput!]
  # Logical NOT on all given filters combined by AND.
  NOT: [ZoolabWhereInput!]
  status: Status
  # All values that are not equal to given value.
  status_not: Status
  # All values that are contained in given list.
  status_in: [Status!]
  # All values that are not contained in given list.
  status_not_in: [Status!]
  updatedAt: DateTime
  # All values that are not equal to given value.
  updatedAt_not: DateTime
  # All values that are contained in given list.
  updatedAt_in: [DateTime!]
  # All values that are not contained in given list.
  updatedAt_not_in: [DateTime!]
  # All values less than the given value.
  updatedAt_lt: DateTime
  # All values less than or equal the given value.
  updatedAt_lte: DateTime
  # All values greater than the given value.
  updatedAt_gt: DateTime
  # All values greater than or equal the given value.
  updatedAt_gte: DateTime
  createdAt: DateTime
  # All values that are not equal to given value.
  createdAt_not: DateTime
  # All values that are contained in given list.
  createdAt_in: [DateTime!]
  # All values that are not contained in given list.
  createdAt_not_in: [DateTime!]
  # All values less than the given value.
  createdAt_lt: DateTime
  # All values less than or equal the given value.
  createdAt_lte: DateTime
  # All values greater than the given value.
  createdAt_gt: DateTime
  # All values greater than or equal the given value.
  createdAt_gte: DateTime
  id: ID
  # All values that are not equal to given value.
  id_not: ID
  # All values that are contained in given list.
  id_in: [ID!]
  # All values that are not contained in given list.
  id_not_in: [ID!]
  # All values less than the given value.
  id_lt: ID
  # All values less than or equal the given value.
  id_lte: ID
  # All values greater than the given value.
  id_gt: ID
  # All values greater than or equal the given value.
  id_gte: ID
  # All values containing the given string.
  id_contains: ID
  # All values not containing the given string.
  id_not_contains: ID
  # All values starting with the given string.
  id_starts_with: ID
  # All values not starting with the given string.
  id_not_starts_with: ID
  # All values ending with the given string.
  id_ends_with: ID
  # All values not ending with the given string.
  id_not_ends_with: ID
  indigo: String
  # All values that are not equal to given value.
  indigo_not: String
  # All values that are contained in given list.
  indigo_in: [String!]
  # All values that are not contained in given list.
  indigo_not_in: [String!]
  # All values less than the given value.
  indigo_lt: String
  # All values less than or equal the given value.
  indigo_lte: String
  # All values greater than the given value.
  indigo_gt: String
  # All values greater than or equal the given value.
  indigo_gte: String
  # All values containing the given string.
  indigo_contains: String
  # All values not containing the given string.
  indigo_not_contains: String
  # All values starting with the given string.
  indigo_starts_with: String
  # All values not starting with the given string.
  indigo_not_starts_with: String
  # All values ending with the given string.
  indigo_ends_with: String
  # All values not ending with the given string.
  indigo_not_ends_with: String
  azure: Int
  # All values that are not equal to given value.
  azure_not: Int
  # All values that are contained in given list.
  azure_in: [Int!]
  # All values that are not contained in given list.
  azure_not_in: [Int!]
  # All values less than the given value.
  azure_lt: Int
  # All values less than or equal the given value.
  azure_lte: Int
  # All values greater than the given value.
  azure_gt: Int
  # All values greater than or equal the given value.
  azure_gte: Int
  tan_every: JobWhereInput
  tan_some: JobWhereInput
  tan_none: JobWhereInput
}

input ZoolabWhereUniqueInput {
  id: ID
}

