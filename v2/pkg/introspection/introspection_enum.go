// Code generated by go-enum DO NOT EDIT.
// Version:
// Revision:
// Build Date:
// Built By:

package introspection

import (
	"errors"
	"fmt"
)

const (
	// SCALAR is a __TypeKind of type SCALAR.
	SCALAR __TypeKind = iota
	// LIST is a __TypeKind of type LIST.
	LIST
	// NONNULL is a __TypeKind of type NON_NULL.
	NONNULL
	// OBJECT is a __TypeKind of type OBJECT.
	OBJECT
	// ENUM is a __TypeKind of type ENUM.
	ENUM
	// INTERFACE is a __TypeKind of type INTERFACE.
	INTERFACE
	// UNION is a __TypeKind of type UNION.
	UNION
	// INPUTOBJECT is a __TypeKind of type INPUT_OBJECT.
	INPUTOBJECT
)

var ErrInvalid__TypeKind = errors.New("not a valid __TypeKind")

const ___TypeKindName = "SCALARLISTNON_NULLOBJECTENUMINTERFACEUNIONINPUT_OBJECT"

var ___TypeKindMap = map[__TypeKind]string{
	SCALAR:      ___TypeKindName[0:6],
	LIST:        ___TypeKindName[6:10],
	NONNULL:     ___TypeKindName[10:18],
	OBJECT:      ___TypeKindName[18:24],
	ENUM:        ___TypeKindName[24:28],
	INTERFACE:   ___TypeKindName[28:37],
	UNION:       ___TypeKindName[37:42],
	INPUTOBJECT: ___TypeKindName[42:54],
}

// String implements the Stringer interface.
func (x __TypeKind) String() string {
	if str, ok := ___TypeKindMap[x]; ok {
		return str
	}
	return fmt.Sprintf("__TypeKind(%d)", x)
}

// IsValid provides a quick way to determine if the typed value is
// part of the allowed enumerated values
func (x __TypeKind) IsValid() bool {
	_, ok := ___TypeKindMap[x]
	return ok
}

var ___TypeKindValue = map[string]__TypeKind{
	___TypeKindName[0:6]:   SCALAR,
	___TypeKindName[6:10]:  LIST,
	___TypeKindName[10:18]: NONNULL,
	___TypeKindName[18:24]: OBJECT,
	___TypeKindName[24:28]: ENUM,
	___TypeKindName[28:37]: INTERFACE,
	___TypeKindName[37:42]: UNION,
	___TypeKindName[42:54]: INPUTOBJECT,
}

// Parse__TypeKind attempts to convert a string to a __TypeKind.
func Parse__TypeKind(name string) (__TypeKind, error) {
	if x, ok := ___TypeKindValue[name]; ok {
		return x, nil
	}
	return __TypeKind(0), fmt.Errorf("%s is %w", name, ErrInvalid__TypeKind)
}

// MarshalText implements the text marshaller method.
func (x __TypeKind) MarshalText() ([]byte, error) {
	return []byte(x.String()), nil
}

// UnmarshalText implements the text unmarshaller method.
func (x *__TypeKind) UnmarshalText(text []byte) error {
	name := string(text)
	tmp, err := Parse__TypeKind(name)
	if err != nil {
		return err
	}
	*x = tmp
	return nil
}
