syntax = "proto3";
package productv1;

option go_package = "cosmo/pkg/proto/productv1;productv1";

service ProductService {
  rpc LookupProductById(LookupProductByIdRequest) returns (LookupProductByIdResponse) {}
  rpc LookupStorageById(LookupStorageByIdRequest) returns (LookupStorageByIdResponse) {}
  rpc MutationCreateUser(MutationCreateUserRequest) returns (MutationCreateUserResponse) {}
  rpc QueryAllPets(QueryAllPetsRequest) returns (QueryAllPetsResponse) {}
  rpc QueryCalculateTotals(QueryCalculateTotalsRequest) returns (QueryCalculateTotalsResponse) {}
  rpc QueryCategories(QueryCategoriesRequest) returns (QueryCategoriesResponse) {}
  rpc QueryCategoriesByKind(QueryCategoriesByKindRequest) returns (QueryCategoriesByKindResponse) {}
  rpc QueryCategoriesByKinds(QueryCategoriesByKindsRequest) returns (QueryCategoriesByKindsResponse) {}
  rpc QueryComplexFilterType(QueryComplexFilterTypeRequest) returns (QueryComplexFilterTypeResponse) {}
  rpc QueryFilterCategories(QueryFilterCategoriesRequest) returns (QueryFilterCategoriesResponse) {}
  rpc QueryNestedType(QueryNestedTypeRequest) returns (QueryNestedTypeResponse) {}
  rpc QueryRandomPet(QueryRandomPetRequest) returns (QueryRandomPetResponse) {}
  rpc QueryRecursiveType(QueryRecursiveTypeRequest) returns (QueryRecursiveTypeResponse) {}
  rpc QueryTypeFilterWithArguments(QueryTypeFilterWithArgumentsRequest) returns (QueryTypeFilterWithArgumentsResponse) {}
  rpc QueryTypeWithMultipleFilterFields(QueryTypeWithMultipleFilterFieldsRequest) returns (QueryTypeWithMultipleFilterFieldsResponse) {}
  rpc QueryUser(QueryUserRequest) returns (QueryUserResponse) {}
  rpc QueryUsers(QueryUsersRequest) returns (QueryUsersResponse) {}
}

message LookupProductByIdRequestKey {
    string id = 1;
}

message LookupProductByIdRequest {
    repeated LookupProductByIdRequestKey keys = 1;
}

message LookupProductByIdResponse {
    repeated Product result = 1;
}

message LookupStorageByIdRequestKey {
    string id = 1;
}

message LookupStorageByIdRequest {
    repeated LookupStorageByIdRequestKey keys = 1;
}

message LookupStorageByIdResponse {
    repeated Storage result = 1;
}

message QueryUsersRequest {
}
message QueryUsersResponse {
    repeated User users = 1;
}
message QueryUserRequest {
    string id = 1;
}
message QueryUserResponse {
    User user = 1;
}
message QueryNestedTypeRequest {
}
message QueryNestedTypeResponse {
    repeated NestedTypeA nested_type = 1;
}
message QueryRecursiveTypeRequest {
}
message QueryRecursiveTypeResponse {
    RecursiveType recursive_type = 1;
}
message QueryTypeFilterWithArgumentsRequest {
    string filter_field_1 = 1;
    string filter_field_2 = 2;
}
message QueryTypeFilterWithArgumentsResponse {
    repeated TypeWithMultipleFilterFields type_filter_with_arguments = 1;
}
message QueryTypeWithMultipleFilterFieldsRequest {
    FilterTypeInput filter = 1;
}
message QueryTypeWithMultipleFilterFieldsResponse {
    repeated TypeWithMultipleFilterFields type_with_multiple_filter_fields = 1;
}
message QueryComplexFilterTypeRequest {
    ComplexFilterTypeInput filter = 1;
}
message QueryComplexFilterTypeResponse {
    repeated TypeWithComplexFilterInput complex_filter_type = 1;
}
message QueryCalculateTotalsRequest {
    repeated OrderInput orders = 1;
}
message QueryCalculateTotalsResponse {
    repeated Order calculate_totals = 1;
}
message QueryCategoriesRequest {
}
message QueryCategoriesResponse {
    repeated Category categories = 1;
}
message QueryCategoriesByKindRequest {
    CategoryKind kind = 1;
}
message QueryCategoriesByKindResponse {
    repeated Category categories_by_kind = 1;
}
message QueryCategoriesByKindsRequest {
    repeated CategoryKind kinds = 1;
}
message QueryCategoriesByKindsResponse {
    repeated Category categories_by_kinds = 1;
}
message QueryFilterCategoriesRequest {
    CategoryFilter filter = 1;
}
message QueryFilterCategoriesResponse {
    repeated Category filter_categories = 1;
}
message QueryRandomPetRequest {
}
message QueryRandomPetResponse {
    Animal random_pet = 1;
}
message QueryAllPetsRequest {
}
message QueryAllPetsResponse {
    repeated Animal all_pets = 1;
}
message MutationCreateUserRequest {
    UserInput input = 1;
}
message MutationCreateUserResponse {
    User create_user = 1;
}

message Product {
  string id = 1;
  string name = 2;
  double price = 3;
}

message Storage {
  string id = 1;
  string name = 2;
  string location = 3;
}

message User {
  string id = 1;
  string name = 2;
}

message NestedTypeA {
  string id = 1;
  string name = 2;
  NestedTypeB b = 3;
}

message RecursiveType {
  string id = 1;
  string name = 2;
  RecursiveType recursive_type = 3;
}

message TypeWithMultipleFilterFields {
  string id = 1;
  string name = 2;
  string filter_field_1 = 3;
  string filter_field_2 = 4;
}

message FilterTypeInput {
  string filter_field_1 = 1;
  string filter_field_2 = 2;
}

message ComplexFilterTypeInput {
  FilterType filter = 1;
}

message TypeWithComplexFilterInput {
  string id = 1;
  string name = 2;
}

message OrderInput {
  string order_id = 1;
  string customer_name = 2;
  repeated OrderLineInput lines = 3;
}

message Order {
  string order_id = 1;
  string customer_name = 2;
  int32 total_items = 3;
}

message Category {
  string id = 1;
  string name = 2;
  CategoryKind kind = 3;
}

message CategoryFilter {
  CategoryKind category = 1;
  Pagination pagination = 2;
}

message Animal {
  oneof instance {
    Cat cat = 1;
    Dog dog = 2;
  }
}

message UserInput {
  string name = 1;
}

message NestedTypeB {
  string id = 1;
  string name = 2;
  NestedTypeC c = 3;
}

message NestedTypeC {
  string id = 1;
  string name = 2;
}

message FilterType {
  string name = 1;
  string filter_field_1 = 2;
  string filter_field_2 = 3;
  Pagination pagination = 4;
}

message Pagination {
  int32 page = 1;
  int32 per_page = 2;
}

message OrderLineInput {
  string product_id = 1;
  int32 quantity = 2;
  repeated string modifiers = 3;
}

enum CategoryKind {
  CATEGORY_KIND_UNSPECIFIED = 0;
  CATEGORY_KIND_BOOK = 1;
  CATEGORY_KIND_ELECTRONICS = 2;
  CATEGORY_KIND_FURNITURE = 3;
  CATEGORY_KIND_OTHER = 4;
}

message Cat {
  string id = 1;
  string name = 2;
  string kind = 3;
  int32 meow_volume = 4;
}

message Dog {
  string id = 1;
  string name = 2;
  string kind = 3;
  int32 bark_volume = 4;
}