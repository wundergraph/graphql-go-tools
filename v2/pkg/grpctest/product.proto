syntax = "proto3";
package productv1;

import "google/protobuf/wrappers.proto";

option go_package = "cosmo/pkg/proto/productv1;productv1";

// Service definition for ProductService
service ProductService {
  // Lookup Product entity by id
  rpc LookupProductById(LookupProductByIdRequest) returns (LookupProductByIdResponse) {}
  // Lookup Storage entity by id
  rpc LookupStorageById(LookupStorageByIdRequest) returns (LookupStorageByIdResponse) {}
  rpc MutationCreateUser(MutationCreateUserRequest) returns (MutationCreateUserResponse) {}
  rpc MutationPerformAction(MutationPerformActionRequest) returns (MutationPerformActionResponse) {}
  rpc QueryAllPets(QueryAllPetsRequest) returns (QueryAllPetsResponse) {}
  rpc QueryCalculateTotals(QueryCalculateTotalsRequest) returns (QueryCalculateTotalsResponse) {}
  rpc QueryCategories(QueryCategoriesRequest) returns (QueryCategoriesResponse) {}
  rpc QueryCategoriesByKind(QueryCategoriesByKindRequest) returns (QueryCategoriesByKindResponse) {}
  rpc QueryCategoriesByKinds(QueryCategoriesByKindsRequest) returns (QueryCategoriesByKindsResponse) {}
  rpc QueryComplexFilterType(QueryComplexFilterTypeRequest) returns (QueryComplexFilterTypeResponse) {}
  rpc QueryFilterCategories(QueryFilterCategoriesRequest) returns (QueryFilterCategoriesResponse) {}
  rpc QueryNestedType(QueryNestedTypeRequest) returns (QueryNestedTypeResponse) {}
  rpc QueryRandomPet(QueryRandomPetRequest) returns (QueryRandomPetResponse) {}
  rpc QueryRandomSearchResult(QueryRandomSearchResultRequest) returns (QueryRandomSearchResultResponse) {}
  rpc QueryRecursiveType(QueryRecursiveTypeRequest) returns (QueryRecursiveTypeResponse) {}
  rpc QuerySearch(QuerySearchRequest) returns (QuerySearchResponse) {}
  rpc QueryTypeFilterWithArguments(QueryTypeFilterWithArgumentsRequest) returns (QueryTypeFilterWithArgumentsResponse) {}
  rpc QueryTypeWithMultipleFilterFields(QueryTypeWithMultipleFilterFieldsRequest) returns (QueryTypeWithMultipleFilterFieldsResponse) {}
  rpc QueryUser(QueryUserRequest) returns (QueryUserResponse) {}
  rpc QueryUsers(QueryUsersRequest) returns (QueryUsersResponse) {}
  // Nullable fields RPCs
  rpc QueryNullableFieldsType(QueryNullableFieldsTypeRequest) returns (QueryNullableFieldsTypeResponse) {}
  rpc QueryNullableFieldsTypeById(QueryNullableFieldsTypeByIdRequest) returns (QueryNullableFieldsTypeByIdResponse) {}
  rpc QueryNullableFieldsTypeWithFilter(QueryNullableFieldsTypeWithFilterRequest) returns (QueryNullableFieldsTypeWithFilterResponse) {}
  rpc QueryAllNullableFieldsTypes(QueryAllNullableFieldsTypesRequest) returns (QueryAllNullableFieldsTypesResponse) {}
  rpc MutationCreateNullableFieldsType(MutationCreateNullableFieldsTypeRequest) returns (MutationCreateNullableFieldsTypeResponse) {}
  rpc MutationUpdateNullableFieldsType(MutationUpdateNullableFieldsTypeRequest) returns (MutationUpdateNullableFieldsTypeResponse) {}
}

// Key message for Product entity lookup
message LookupProductByIdRequestKey {
  // Key field for Product entity lookup.
  string id = 1;
}

// Request message for Product entity lookup.
message LookupProductByIdRequest {
  /*
   * List of keys to look up Product entities.
   * Order matters - each key maps to one entity in LookupProductByIdResponse.
   */
  repeated LookupProductByIdRequestKey keys = 1;
}

// Response message for Product entity lookup.
message LookupProductByIdResponse {
  /*
   * List of Product entities in the same order as the keys in LookupProductByIdRequest.
   * Always return the same number of entities as keys. Use null for entities that cannot be found.
   * 
   * Example:
   *   LookupUserByIdRequest:
   *     keys:
   *       - id: 1
   *       - id: 2
   *   LookupUserByIdResponse:
   *     result:
   *       - id: 1 # User with id 1 found
   *       - null  # User with id 2 not found
   */
  repeated Product result = 1;
}

// Key message for Storage entity lookup
message LookupStorageByIdRequestKey {
  // Key field for Storage entity lookup.
  string id = 1;
}

// Request message for Storage entity lookup.
message LookupStorageByIdRequest {
  /*
   * List of keys to look up Storage entities.
   * Order matters - each key maps to one entity in LookupStorageByIdResponse.
   */
  repeated LookupStorageByIdRequestKey keys = 1;
}

// Response message for Storage entity lookup.
message LookupStorageByIdResponse {
  /*
   * List of Storage entities in the same order as the keys in LookupStorageByIdRequest.
   * Always return the same number of entities as keys. Use null for entities that cannot be found.
   * 
   * Example:
   *   LookupUserByIdRequest:
   *     keys:
   *       - id: 1
   *       - id: 2
   *   LookupUserByIdResponse:
   *     result:
   *       - id: 1 # User with id 1 found
   *       - null  # User with id 2 not found
   */
  repeated Storage result = 1;
}

// Request message for users operation.
message QueryUsersRequest {
}
// Response message for users operation.
message QueryUsersResponse {
  repeated User users = 1;
}
// Request message for user operation.
message QueryUserRequest {
  string id = 1;
}
// Response message for user operation.
message QueryUserResponse {
  User user = 1;
}
// Request message for nestedType operation.
message QueryNestedTypeRequest {
}
// Response message for nestedType operation.
message QueryNestedTypeResponse {
  repeated NestedTypeA nested_type = 1;
}
// Request message for recursiveType operation.
message QueryRecursiveTypeRequest {
}
// Response message for recursiveType operation.
message QueryRecursiveTypeResponse {
  RecursiveType recursive_type = 1;
}
// Request message for typeFilterWithArguments operation.
message QueryTypeFilterWithArgumentsRequest {
  string filter_field_1 = 1;
  string filter_field_2 = 2;
}
// Response message for typeFilterWithArguments operation.
message QueryTypeFilterWithArgumentsResponse {
  repeated TypeWithMultipleFilterFields type_filter_with_arguments = 1;
}
// Request message for typeWithMultipleFilterFields operation.
message QueryTypeWithMultipleFilterFieldsRequest {
  FilterTypeInput filter = 1;
}
// Response message for typeWithMultipleFilterFields operation.
message QueryTypeWithMultipleFilterFieldsResponse {
  repeated TypeWithMultipleFilterFields type_with_multiple_filter_fields = 1;
}
// Request message for complexFilterType operation.
message QueryComplexFilterTypeRequest {
  ComplexFilterTypeInput filter = 1;
}
// Response message for complexFilterType operation.
message QueryComplexFilterTypeResponse {
  repeated TypeWithComplexFilterInput complex_filter_type = 1;
}
// Request message for calculateTotals operation.
message QueryCalculateTotalsRequest {
  repeated OrderInput orders = 1;
}
// Response message for calculateTotals operation.
message QueryCalculateTotalsResponse {
  repeated Order calculate_totals = 1;
}
// Request message for categories operation.
message QueryCategoriesRequest {
}
// Response message for categories operation.
message QueryCategoriesResponse {
  repeated Category categories = 1;
}
// Request message for categoriesByKind operation.
message QueryCategoriesByKindRequest {
  CategoryKind kind = 1;
}
// Response message for categoriesByKind operation.
message QueryCategoriesByKindResponse {
  repeated Category categories_by_kind = 1;
}
// Request message for categoriesByKinds operation.
message QueryCategoriesByKindsRequest {
  repeated CategoryKind kinds = 1;
}
// Response message for categoriesByKinds operation.
message QueryCategoriesByKindsResponse {
  repeated Category categories_by_kinds = 1;
}
// Request message for filterCategories operation.
message QueryFilterCategoriesRequest {
  CategoryFilter filter = 1;
}
// Response message for filterCategories operation.
message QueryFilterCategoriesResponse {
  repeated Category filter_categories = 1;
}
// Request message for randomPet operation.
message QueryRandomPetRequest {
}
// Response message for randomPet operation.
message QueryRandomPetResponse {
  Animal random_pet = 1;
}
// Request message for allPets operation.
message QueryAllPetsRequest {
}
// Response message for allPets operation.
message QueryAllPetsResponse {
  repeated Animal all_pets = 1;
}
// Request message for search operation.
message QuerySearchRequest {
  SearchInput input = 1;
}
// Response message for search operation.
message QuerySearchResponse {
  repeated SearchResult search = 1;
}
// Request message for randomSearchResult operation.
message QueryRandomSearchResultRequest {
}
// Response message for randomSearchResult operation.
message QueryRandomSearchResultResponse {
  SearchResult random_search_result = 1;
}
// Request message for createUser operation.
message MutationCreateUserRequest {
  UserInput input = 1;
}
// Response message for createUser operation.
message MutationCreateUserResponse {
  User create_user = 1;
}
// Request message for performAction operation.
message MutationPerformActionRequest {
  ActionInput input = 1;
}
// Response message for performAction operation.
message MutationPerformActionResponse {
  ActionResult perform_action = 1;
}

// Request message for nullableFieldsType operation.
message QueryNullableFieldsTypeRequest {
}
// Response message for nullableFieldsType operation.
message QueryNullableFieldsTypeResponse {
  NullableFieldsType nullable_fields_type = 1;
}
// Request message for nullableFieldsTypeById operation.
message QueryNullableFieldsTypeByIdRequest {
  string id = 1;
}
// Response message for nullableFieldsTypeById operation.
message QueryNullableFieldsTypeByIdResponse {
  NullableFieldsType nullable_fields_type_by_id = 1;
}
// Request message for nullableFieldsTypeWithFilter operation.
message QueryNullableFieldsTypeWithFilterRequest {
  NullableFieldsFilter filter = 1;
}
// Response message for nullableFieldsTypeWithFilter operation.
message QueryNullableFieldsTypeWithFilterResponse {
  repeated NullableFieldsType nullable_fields_type_with_filter = 1;
}
// Request message for allNullableFieldsTypes operation.
message QueryAllNullableFieldsTypesRequest {
}
// Response message for allNullableFieldsTypes operation.
message QueryAllNullableFieldsTypesResponse {
  repeated NullableFieldsType all_nullable_fields_types = 1;
}
// Request message for createNullableFieldsType operation.
message MutationCreateNullableFieldsTypeRequest {
  NullableFieldsInput input = 1;
}
// Response message for createNullableFieldsType operation.
message MutationCreateNullableFieldsTypeResponse {
  NullableFieldsType create_nullable_fields_type = 1;
}
// Request message for updateNullableFieldsType operation.
message MutationUpdateNullableFieldsTypeRequest {
  string id = 1;
  NullableFieldsInput input = 2;
}
// Response message for updateNullableFieldsType operation.
message MutationUpdateNullableFieldsTypeResponse {
  NullableFieldsType update_nullable_fields_type = 1;
}

message Product {
  string id = 1;
  string name = 2;
  double price = 3;
}

message Storage {
  string id = 1;
  string name = 2;
  string location = 3;
}

message User {
  string id = 1;
  string name = 2;
}

message NestedTypeA {
  string id = 1;
  string name = 2;
  NestedTypeB b = 3;
}

message RecursiveType {
  string id = 1;
  string name = 2;
  RecursiveType recursive_type = 3;
}

message TypeWithMultipleFilterFields {
  string id = 1;
  string name = 2;
  string filter_field_1 = 3;
  string filter_field_2 = 4;
}

message FilterTypeInput {
  string filter_field_1 = 1;
  string filter_field_2 = 2;
}

message ComplexFilterTypeInput {
  FilterType filter = 1;
}

message TypeWithComplexFilterInput {
  string id = 1;
  string name = 2;
}

message OrderInput {
  string order_id = 1;
  string customer_name = 2;
  repeated OrderLineInput lines = 3;
}

message Order {
  string order_id = 1;
  string customer_name = 2;
  int32 total_items = 3;
  repeated OrderLine order_lines = 4;
}

message Category {
  string id = 1;
  string name = 2;
  CategoryKind kind = 3;
}

message CategoryFilter {
  CategoryKind category = 1;
  Pagination pagination = 2;
}

message Animal {
  oneof instance {
  Cat cat = 1;
  Dog dog = 2;
  }
}

message SearchInput {
  string query = 1;
  int32 limit = 2;
}

message SearchResult {
  oneof value {
  Product product = 1;
  User user = 2;
  Category category = 3;
  }
}

message UserInput {
  string name = 1;
}

message ActionInput {
  string type = 1;
  string payload = 2;
}

message ActionResult {
  oneof value {
  ActionSuccess action_success = 1;
  ActionError action_error = 2;
  }
}

message NestedTypeB {
  string id = 1;
  string name = 2;
  NestedTypeC c = 3;
}

message NestedTypeC {
  string id = 1;
  string name = 2;
}

message FilterType {
  string name = 1;
  string filter_field_1 = 2;
  string filter_field_2 = 3;
  Pagination pagination = 4;
}

message Pagination {
  int32 page = 1;
  int32 per_page = 2;
}

message OrderLineInput {
  string product_id = 1;
  int32 quantity = 2;
  repeated string modifiers = 3;
}

message OrderLine {
  string product_id = 1;
  int32 quantity = 2;
  repeated string modifiers = 3;
}

enum CategoryKind {
  CATEGORY_KIND_UNSPECIFIED = 0;
  CATEGORY_KIND_BOOK = 1;
  CATEGORY_KIND_ELECTRONICS = 2;
  CATEGORY_KIND_FURNITURE = 3;
  CATEGORY_KIND_OTHER = 4;
}

message Cat {
  string id = 1;
  string name = 2;
  string kind = 3;
  int32 meow_volume = 4;
}

message Dog {
  string id = 1;
  string name = 2;
  string kind = 3;
  int32 bark_volume = 4;
}

message ActionSuccess {
  string message = 1;
  string timestamp = 2;
}

message ActionError {
  string message = 1;
  string code = 2;
}

// New messages for testing nullable fields
message NullableFieldsType {
  string id = 1;
  string name = 2;
  google.protobuf.StringValue optional_string = 3;
  google.protobuf.Int32Value optional_int = 4;
  google.protobuf.FloatValue optional_float = 5;
  google.protobuf.BoolValue optional_boolean = 6;
  string required_string = 7;
  int32 required_int = 8;
}

message NullableFieldsInput {
  string name = 1;
  google.protobuf.StringValue optional_string = 2;
  google.protobuf.Int32Value optional_int = 3;
  google.protobuf.FloatValue optional_float = 4;
  google.protobuf.BoolValue optional_boolean = 5;
  string required_string = 6;
  int32 required_int = 7;
}

message NullableFieldsFilter {
  google.protobuf.StringValue name = 1;
  google.protobuf.StringValue optional_string = 2;
  google.protobuf.BoolValue include_nulls = 3;
}