type Product @key(fields: "id") {
  id: ID!
  name: String!
  price: Float!
  # shippingEstimate(input: ShippingEstimateInput!): Float!
}

type Storage @key(fields: "id") {
  id: ID!
  name: String!
  location: String!
}

type User {
  id: ID!
  name: String!
}

type NestedTypeA {
  id: ID!
  name: String!
  b: NestedTypeB!
}

type NestedTypeB {
  id: ID!
  name: String!
  c: NestedTypeC!
}

type NestedTypeC {
  id: ID!
  name: String!
}

type RecursiveType {
  id: ID!
  name: String!
  recursiveType: RecursiveType!
}

type TypeWithMultipleFilterFields {
  id: ID!
  name: String!
  filterField1: String!
  filterField2: String!
}

input FilterTypeInput {
  filterField1: String!
  filterField2: String!
}

type TypeWithComplexFilterInput {
  id: ID!
  name: String!
}

input FilterType {
  name: String!
  filterField1: String!
  filterField2: String!
  pagination: Pagination
}

input Pagination {
  page: Int!
  perPage: Int!
}

input ComplexFilterTypeInput {
  filter: FilterType!
}

input OrderLineInput {
  productId: ID!
  quantity: Int!
  modifiers: [String!]
}

input OrderInput {
  orderId: ID!
  customerName: String!
  lines: [OrderLineInput!]!
}

type Order {
  orderId: ID!
  customerName: String!
  totalItems: Int!
  orderLines: [OrderLine!]
}

type OrderLine {
  productId: ID!
  quantity: Int!
  modifiers: [String!]
}

input CategoryFilter {
  category: CategoryKind!
  pagination: Pagination
}

type Category {
  id: ID!
  name: String!
  kind: CategoryKind!
}

enum CategoryKind {
  BOOK
  ELECTRONICS
  FURNITURE
  OTHER
}

interface Animal {
  id: ID!
  name: String!
  kind: String!
}

type Cat implements Animal {
  id: ID!
  name: String!
  kind: String!
  meowVolume: Int!
}

type Dog implements Animal {
  id: ID!
  name: String!
  kind: String!
  barkVolume: Int!
}

# Union Types for Testing

# Search result union - tests union with existing types
union SearchResult = Product | User | Category

# Action result union - tests success/error patterns
union ActionResult = ActionSuccess | ActionError

type ActionSuccess {
  message: String!
  timestamp: String!
}

type ActionError {
  message: String!
  code: String!
}

# Input types for union operations
input SearchInput {
  query: String!
  limit: Int
}

input ActionInput {
  type: String!
  payload: String!
}

type Query {
  _entities(representations: [_Any!]!): [_Entity!]!
  users: [User!]!
  user(id: ID!): User
  nestedType: [NestedTypeA!]!
  recursiveType: RecursiveType!
  typeFilterWithArguments(
    filterField1: String!
    filterField2: String!
  ): [TypeWithMultipleFilterFields!]!
  typeWithMultipleFilterFields(
    filter: FilterTypeInput!
  ): [TypeWithMultipleFilterFields!]!
  complexFilterType(
    filter: ComplexFilterTypeInput!
  ): [TypeWithComplexFilterInput!]!
  calculateTotals(orders: [OrderInput!]!): [Order!]!
  categories: [Category!]!
  categoriesByKind(kind: CategoryKind!): [Category!]!
  categoriesByKinds(kinds: [CategoryKind!]!): [Category!]!
  filterCategories(filter: CategoryFilter!): [Category!]!
  randomPet: Animal!
  allPets: [Animal!]!
  
  # Union queries
  search(input: SearchInput!): [SearchResult!]!
  randomSearchResult: SearchResult!
}

input UserInput {
  name: String!
}

type Mutation {
  createUser(input: UserInput!): User!
  
  # Union mutation
  performAction(input: ActionInput!): ActionResult!
}

union _Entity = Product | Storage
scalar _Any
