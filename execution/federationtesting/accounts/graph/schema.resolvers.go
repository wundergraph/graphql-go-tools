package graph

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.22

import (
	"context"
	"fmt"

	"github.com/wundergraph/graphql-go-tools/execution/federationtesting/accounts/graph/generated"
	"github.com/wundergraph/graphql-go-tools/execution/federationtesting/accounts/graph/model"
)

// Me is the resolver for the me field.
func (r *queryResolver) Me(ctx context.Context) (*model.User, error) {
	return &model.User{
		ID:       "1234",
		Username: "Me",
		History:  histories,
		RealName: "User Usington",
	}, nil
}

// Identifiable is the resolver for the identifiable field.
func (r *queryResolver) Identifiable(ctx context.Context) (model.Identifiable, error) {
	return &model.User{
		ID:       "1234",
		Username: "Me",
		History:  histories,
		RealName: "User Usington",
	}, nil
}

// Histories is the resolver for the histories field.
func (r *queryResolver) Histories(ctx context.Context) ([]model.History, error) {
	return allHistories, nil
}

// Cat is the resolver for the cat field.
func (r *queryResolver) Cat(ctx context.Context) (*model.Cat, error) {
	return &model.Cat{
		Name: "Pepper",
	}, nil
}

// InterfaceUnion is the resolver for the interfaceUnion field.
func (r *queryResolver) InterfaceUnion(ctx context.Context, which model.Which) (model.Ab, error) {
	switch which {
	case model.WhichA:
		return &model.A{
			Name: "A",
		}, nil
	case model.WhichB:
		return &model.B{
			Name: "B",
		}, nil
	}
	return nil, fmt.Errorf("unknown which: %v", which)
}

// AbstractList is the resolver for the abstractList field.
func (r *queryResolver) AbstractList(ctx context.Context) ([]model.AbstractListItem, error) {
	return []model.AbstractListItem{
		&model.ConcreteListItem1{
			Obj: &model.SomeType1{
				Name:  "1",
				Age:   1,
				Names: []string{"1", "2"},
			},
		},
		&model.ConcreteListItem2{
			Obj: &model.SomeType2{
				Name:   "2",
				Height: 2.0,
				Names:  []string{"3", "4"},
			},
		},
	}, nil
}

// TitleName is the resolver for the titleName field.
func (r *queryResolver) TitleName(ctx context.Context) (*model.TitleName, error) {
	return &model.TitleName{
		Title: "Title",
		Name:  "Name",
		A:     "A",
		B:     "B",
		C:     "C",
	}, nil
}

// Cds is the resolver for the cds field.
func (r *queryResolver) Cds(ctx context.Context) ([]model.Cd, error) {
	return []model.Cd{
		&model.C{
			Name: &model.CDerObj{
				First:  "Leonie",
				Middle: "Johanna",
				Last:   "Neuse",
			},
		},
		&model.D{
			Name: &model.CDerObj{
				First:  "Jannik",
				Middle: "",
				Last:   "Neuse",
			},
		},
	}, nil
}

// Query returns generated.QueryResolver implementation.
func (r *Resolver) Query() generated.QueryResolver { return &queryResolver{r} }

type queryResolver struct{ *Resolver }
