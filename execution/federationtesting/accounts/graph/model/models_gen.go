// Code generated by github.com/99designs/gqlgen, DO NOT EDIT.

package model

import (
	"fmt"
	"io"
	"strconv"
)

type Ab interface {
	IsAb()
}

type AbstractListItem interface {
	IsAbstractListItem()
	GetObj() OtherInterface
}

type Cd interface {
	IsCd()
}

type CDer interface {
	IsCDer()
	GetName() *CDerObj
}

type History interface {
	IsHistory()
}

type Identifiable interface {
	IsIdentifiable()
	GetID() string
}

type Info interface {
	IsInfo()
	GetQuantity() int
}

type Name interface {
	IsName()
	GetName() string
}

type Namer interface {
	IsNamer()
	GetName() string
}

type OtherInterface interface {
	IsOtherInterface()
	GetName() string
	GetNames() []string
}

type Store interface {
	IsStore()
	GetLocation() string
}

type Title interface {
	IsTitle()
	GetTitle() string
}

type Wallet interface {
	IsWallet()
	GetCurrency() string
	GetAmount() float64
}

type A struct {
	Name string `json:"name"`
}

func (A) IsAb() {}

func (A) IsNamer()             {}
func (this A) GetName() string { return this.Name }

type B struct {
	Name string `json:"name"`
}

func (B) IsAb() {}

func (B) IsNamer()             {}
func (this B) GetName() string { return this.Name }

type C struct {
	Name *CDerObj `json:"name"`
}

func (C) IsCd() {}

func (C) IsCDer()                {}
func (this C) GetName() *CDerObj { return this.Name }

type CDerObj struct {
	First  string `json:"first"`
	Middle string `json:"middle"`
	Last   string `json:"last"`
}

type Cat struct {
	Name string `json:"name"`
}

type ConcreteListItem1 struct {
	Obj OtherInterface `json:"obj"`
}

func (ConcreteListItem1) IsAbstractListItem()         {}
func (this ConcreteListItem1) GetObj() OtherInterface { return this.Obj }

type ConcreteListItem2 struct {
	Obj OtherInterface `json:"obj"`
}

func (ConcreteListItem2) IsAbstractListItem()         {}
func (this ConcreteListItem2) GetObj() OtherInterface { return this.Obj }

type D struct {
	Name *CDerObj `json:"name"`
}

func (D) IsCd() {}

func (D) IsCDer()                {}
func (this D) GetName() *CDerObj { return this.Name }

type Product struct {
	Upc string `json:"upc"`
}

func (Product) IsEntity() {}

type Purchase struct {
	Product  *Product `json:"product"`
	Wallet   Wallet   `json:"wallet"`
	Quantity int      `json:"quantity"`
}

func (Purchase) IsHistory() {}

func (Purchase) IsInfo()               {}
func (this Purchase) GetQuantity() int { return this.Quantity }

type Sale struct {
	Product  *Product `json:"product"`
	Rating   int      `json:"rating"`
	Location string   `json:"location"`
}

func (Sale) IsHistory() {}

func (Sale) IsStore()                 {}
func (this Sale) GetLocation() string { return this.Location }

type SomeType1 struct {
	Name  string   `json:"name"`
	Age   int      `json:"age"`
	Names []string `json:"names"`
}

func (SomeType1) IsOtherInterface()    {}
func (this SomeType1) GetName() string { return this.Name }
func (this SomeType1) GetNames() []string {
	if this.Names == nil {
		return nil
	}
	interfaceSlice := make([]string, 0, len(this.Names))
	for _, concrete := range this.Names {
		interfaceSlice = append(interfaceSlice, concrete)
	}
	return interfaceSlice
}

type SomeType2 struct {
	Name   string   `json:"name"`
	Height float64  `json:"height"`
	Names  []string `json:"names"`
}

func (SomeType2) IsOtherInterface()    {}
func (this SomeType2) GetName() string { return this.Name }
func (this SomeType2) GetNames() []string {
	if this.Names == nil {
		return nil
	}
	interfaceSlice := make([]string, 0, len(this.Names))
	for _, concrete := range this.Names {
		interfaceSlice = append(interfaceSlice, concrete)
	}
	return interfaceSlice
}

type TitleName struct {
	A     string `json:"a"`
	B     string `json:"b"`
	C     string `json:"c"`
	Title string `json:"title"`
	Name  string `json:"name"`
}

func (TitleName) IsTitle()              {}
func (this TitleName) GetTitle() string { return this.Title }

func (TitleName) IsName()              {}
func (this TitleName) GetName() string { return this.Name }

type User struct {
	ID       string    `json:"id"`
	Username string    `json:"username"`
	History  []History `json:"history"`
	RealName string    `json:"realName"`
}

func (User) IsIdentifiable()    {}
func (this User) GetID() string { return this.ID }

func (User) IsEntity() {}

type WalletType1 struct {
	Currency      string  `json:"currency"`
	Amount        float64 `json:"amount"`
	SpecialField1 string  `json:"specialField1"`
}

func (WalletType1) IsWallet()                {}
func (this WalletType1) GetCurrency() string { return this.Currency }
func (this WalletType1) GetAmount() float64  { return this.Amount }

type WalletType2 struct {
	Currency      string  `json:"currency"`
	Amount        float64 `json:"amount"`
	SpecialField2 string  `json:"specialField2"`
}

func (WalletType2) IsWallet()                {}
func (this WalletType2) GetCurrency() string { return this.Currency }
func (this WalletType2) GetAmount() float64  { return this.Amount }

type Which string

const (
	WhichA Which = "A"
	WhichB Which = "B"
)

var AllWhich = []Which{
	WhichA,
	WhichB,
}

func (e Which) IsValid() bool {
	switch e {
	case WhichA, WhichB:
		return true
	}
	return false
}

func (e Which) String() string {
	return string(e)
}

func (e *Which) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = Which(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid Which", str)
	}
	return nil
}

func (e Which) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}
